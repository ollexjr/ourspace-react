{"version":3,"sources":["model/compiled.js","types.js","components/button.tsx","stores/user.tsx","service/api.ts","stores/app.tsx","stores/board.tsx","stores/thread.tsx","components/editor/editor.tsx","components/board/vote.tsx","components/network/gateway.tsx","components/user/avatar.tsx","components/media.tsx","components/board/user.tsx","components/board/thread/thread.tsx","components/screen.tsx","components/board/thread/create.tsx","screens/board/thread/create.tsx","components/board/avatar.tsx","components/dropdown.tsx","components/scroll.tsx","components/board/overlay.tsx","components/board/board.tsx","screens/board/edit.tsx","components/app/messages.tsx","components/uisettings.tsx","components/modal.tsx","components/user/card.tsx","components/user/recent.tsx","components/app/sidebar.tsx","components/header.tsx","screens/board/index.tsx","screens/home/front.tsx","components/user/sub.tsx","components/board/create.tsx","screens/board/create.tsx","screens/user/account.tsx","components/user/auth/login.tsx","components/brand.tsx","components/navbar.tsx","components/jumbosheet.tsx","screens/user/login.tsx","components/user/auth/signup.tsx","screens/user/signup.tsx","components/user/notification.tsx","screens/home/explore.tsx","components/spotlight.tsx","components/board/moderator/actions.tsx","components/user/overlay.jsx","screens/scaffold.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","User","properties","keys","Object","i","length","this","prototype","rId","username","email","avatar","create","encode","message","writer","hasOwnProperty","call","uint32","string","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","isString","fromObject","object","String","toObject","options","defaults","toJSON","constructor","toJSONOptions","UserRef","AccountState","subscriptions","emptyArray","karma","Long","fromBits","upvotes","downvotes","BoardSubscription","fork","int64","push","Array","isArray","error","low","high","TypeError","fromValue","unsigned","parseInt","LongBits","toNumber","arrays","long","longs","toString","Number","j","LoginRequest","password","TokenPair","accessToken","refreshToken","JwtTokenPair","LoginResponse","userId","tokens","state","ThreadCreateRequest","boardId","title","link","content","createdAtHint","ThreadCreateResponse","threadId","ThreadWithBoardContext","thread","comments","commentsGraph","board","Thread","Board","CommentSelectResponse","CommentSelectGraphResponse","BanInfo","bannedBy","banReason","approvedBy","createdAt","reason","ReportInfo","report","user","Vote","type","typeCode","amount","int32","CommentActionedContext","isModerator","vote","bool","Boolean","ThreadActionedContext","CommentEditRequest","commentId","comment","Comment","CommentCreateResponse","commentuId","CommentCreateRequest","CommentNode","children","clipped","emptyObject","key","value","end2","tag2","isObject","keys2","objects","data","token","CommentSelectHistoryResponse","commentEdits","mod","votes","uId","parentId","me","unhandledReports","reports","depth","CommunityUserRef","CommentSelectFilters","rankMethod","sortDirection","enums","Method","SortDirection","valuesById","values","ReportsSelectResponse","CommunitySelectRequest","query","limit","CommunitySelectResponse","isMod","isOwner","isBanned","members","icon","preview","description","banner","posts","moderators","rules","isMember","lockType","awards","isAdmin","flair","acceptedVotes","acceptedCommentVotes","url","linkType","thumb","isKicked","isLocked","isArchived","thumbAspectRatio","location","numComments","numCrossposts","lastCommentAt","float","json","isFinite","EntityVoteRequest","entityId","ThreadSelectFilters","page","useBoolean","createdStart","createdEnd","ThreadContentFilter","ContentWarning","ThreadSelectRequest","filters","withContext","ThreadsSelectResponse","users","ThreadsSelectResponseWithBoardContext","threads","UserCreate","acceptEmail","subscribeNewsletter","UserSubscribedRequest","BlogSubscription","UserMod","BoardMod","BoardCreate","name","UserModerationAction","endsAt","ModerationAction","action","category","ThreadModerationAction","CommentModerationAction","BoardModerationAction","UserInBoardContext","communityOpinion","theirUpvotes","theirDownvotes","Image","format","height","width","size","ImageModifyRequest","item","file","DraftJsBlock","inlineStyleRanges","entityRanges","text","DraftJsEntity","DraftJsRawContent","blocks","Event","eventId","newBuffer","bytes","base64","slice","CommentReplyEvent","CommentCreateEvent","UserMentionEvent","CommunityEvent","ThreadVoteEvent","totalVotes","EventContextUpdate","threadViewportRange","commentViewportRange","Error","code","module","exports","trimMax","max","s","substr","LinkButton","withRouter","props","Button","variant","onClick","pathname","to","history","PromiseButton","className","React","useState","loading","setState","finally","Spinner","animation","IconButton","AccountStore","app","addDefaults","sync","_","map","mapSubscriptions","addSubscription","e","api","endpointGet","then","r","forEach","observable","UserStore","loggedIn","active","userStoreContext","createContext","UserStoreProvider","useAppStore","store","setStore","useEffect","Provider","Jwt","raw","console","log","JwtDecode","header","Date","now","exp","AccessJwt","rawToken","http","request","init","expects","a","fetch","catch","res","o","response","Promise","reject","status","API","NetworkService","socket","getToken","timer","retryFactor","f","jwt","encoded","resolve","WebSocket","addEventListener","event","ev","JSON","stringify","setTimeout","initWebSocket","t","setupSocket","path","args","encodedArgs","serialize","method","headers","body","getHeaders","h","formData","FormData","append","obj","prefix","str","p","k","v","encodeURIComponent","join","ObservableRequestState","isFetching","AppStore","_api","storeStack","accounts","auto","autorun","persist","getTokenCallback","_access","expired","basicPost","_refresh","invalidToken","Worker","loadOther","openSocket","toJsonM","setupLogin","loginOverlay","themeName","Notification","requestPermission","parse","addEvent","commentReply","commentReplyEvent","displayableEvent","array","trending","toJson","window","localStorage","setItem","recent","tearDownLogin","endpointPost","login","unsetGetToken","setGetToken","spotlightQuery","closeWebSocket","uid","communitySearch","UIShowSpotlight","appStoreContext","AppStoreProvider","getItem","fromStorage","hydrateAppStore","useContext","BoardStore","headerImage","iconImage","backgroundRepeat","backgroundSize","filtersPrev","autoQuery","UIconstrainContainer","entries","info","endpointPostEx","ignore","wrap","getCollection","document","getPageTitle","endpointPostFile","moderate","c","overlayThread","DESC","TOP","boardStoreContext","BoardStoreProvider","useBoardStore","ThreadStore","threadctx","_flattenComments","n","load","wrapper","insertComment","flatComments","voteThread","addView","assertInlineLogin","threadStoreContext","ThreadStoreProvider","initData","useThreadStore","TextEditor","source","onAccept","onCancel","buttons","setValue","selectedTab","setSelectedTab","isWaiting","setWaiting","onAcceptPre","useRef","onTabChange","generateMarkdownPreview","markdown","onChange","style","visibility","position","top","right","left","bottom","zIndex","pointerEvents","display","justifyContent","alignItems","backgroundColor","faTimes","faPaperPlane","codeMap","arrowMap","faArrowUp","faArrowDown","ArrowVoter","onVote","mvt","setVoteChange","up","down","total","isThis","onVotePre","InlineVoter","table","setLoading","valueState","fire","nv","cls","OverlayTrigger","rootClose","trigger","placement","overlay","Popover","id","Title","as","Content","count","padding","classNames","click","onMouseLeave","onMouseEnter","role","NetworkGateway","observer","retry","minHeight","faSync","CircleAvatar","src","label","Tooltip","objectFit","borderRadius","MediaSource","onOpen","aspectRatio","onEvent","isVideo","ReactPlayer","canPlay","loader","child","debounce","once","offset","innerHeight","light","controls","onPlay","onPause","u","URL","hostname","lang","data-id","href","async","paddingBottom","frameBorder","allowFullScreen","UserBadge","Badge","CommunityUserInline","faHammer","faUserShield","CommentPadding","index","borderLeft","ThreadCommentCard","debug","reply","setReply","edit","setEditing","canReply","canEdit","moment","unix","fromNow","acceptText","cancelText","addComment","voteComment","faEdit","faReply","editComment","FlatCommentWrapper","ThreadCommentView","ExternalFrame","setLoaded","onLoadStart","onScroll","marginWidth","marginHeight","onLoad","ThreadNavbar","Navbar","bg","overflow","fontSize","whiteSpace","overflowY","textOverflow","target","ThreadView","showModal","setModal","Container","fluid","Modal","show","onHide","Header","closeButton","network","faRandom","faExpand","faShare","ScreenScaffold","ThreadCreateForm","onSubmit","onDraft","set","Form","Group","controlId","Label","Control","placeholder","Text","dark","isDarkTheme","defaultValue","template","err","ScreenCreate","useHistory","createThread","replace","getThreadLink","CommunityAvatar","wrapperClassName","CommunityLinkPopover","DropdownEnum","labels","onSelect","DropdownButton","Dropdown","Item","eventKey","CustomToggle","forwardRef","ref","preventDefault","faEllipsisV","ButtonDropdown","items","Toggle","Menu","ScrollEventProvider","listener","onScrollBottom","isBottom","onScrollDebounce","useCallback","getBoundingClientRect","removeEventListener","BoardSingleThreadOverlayObserver","Body","isImage","RegExp","CardButtons","buttonClass","commentNum","saveThread","navigator","clipboard","writeText","open","moderateThread","setOverlay","faCommentAlt","faLink","faRetweet","ThreadCard","showContext","innerClass","test","host","faExternalLinkAlt","Card","ThreadsView","layout","getElementById","requestMore","statusText","elementType","isConstrained","BoardTextSearch","BoardNavbar","faWindowMaximize","faStream","faPortrait","UIdatalayout","faSave","search","getQueryParams","faUsersSlash","faUsers","unsubscribe","subscribe","BoardView","requests","FileInput","waiting","File","files","required","isInvalid","feedback","feedbackTooltip","custom","ScreenEdit","uploadIcon","uploadBanner","SystemMessages","AppSettingsForm","Check","checked","UIshowEventDebug","UIanimatedHeader","UIdarkTheme","SidebarSettings","ModalSheetWrapper","onConfirm","setShow","handleClose","backdrop","keyboard","Footer","InlineNavCard","logout","Divider","UserNotifications","faEnvelope","ActivityRecentThreads","reverse","TrendingCommunitiesList","faChartLine","SiteCard","Portal","ReactDOM","createPortal","SidebarDefault","getFullYear","ImageHeader","animated","Jumbotron","backgroundImage","ImageHeaderParallax","borderBottomRightRadius","borderBottomLeftRadius","layers","image","opacity","RouterThread","useParams","BoardScaffold","component","backgroundAttachment","UIcontainerFluid","exact","Subtitle","ListGroup","ListGroupItem","ButtonGroup","faUserPlus","faUserCheck","RouterBoard","match","ScreenFrontpage","SubscriptionIcon","SubscriptionList","params","pathId","SubscriptionListWithSearch","setFilter","showOverlay","getCommunityLink","showSpotlight","faSearch","faPlus","filter","startsWith","faArrowRight","BoardCreateForm","Alert","Heading","createCommunity","unknown","ProvideUserScaffold","UserScaffold","useUserStore","isSelf","ScreenAccount","UserLoginForm","validated","identifier","setError","currentTarget","checkValidity","Feedback","Brand","NavbarBase","expand","SiteNavbar","aria-controls","Collapse","Nav","Link","faProjectDiagram","faAddressCard","faDice","getRandomCommunity","Jumbosheet","Row","Col","ScreenLogin","maxWidth","goBack","UserSignupForm","signup","NotificationCard","NotificationListObserver","ScreenExploreGraph","nodes","DataSet","current","Network","CommunityList","Spotlight","setSearch","lg","SpotlightModal","ModerateForm","banLength","setBan","multiple","rows","ModeratorActionsGlobal","BoardSingleAuthenticationOverlayObserver","mode","Scaffold","minWidth","BoardRouterWrapper","RouterRoot","ScreenSignup","RouterScaffold","App","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cea7d34b.chunk.js","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.User = (function() {\n\n    /**\n     * Properties of a User.\n     * @exports IUser\n     * @interface IUser\n     * @property {number|null} [rId] User rId\n     * @property {string|null} [username] User username\n     * @property {string|null} [email] User email\n     * @property {string|null} [avatar] User avatar\n     */\n\n    /**\n     * Constructs a new User.\n     * @exports User\n     * @classdesc Internal user reference *\n     * @implements IUser\n     * @constructor\n     * @param {IUser=} [properties] Properties to set\n     */\n    function User(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * User rId.\n     * @member {number} rId\n     * @memberof User\n     * @instance\n     */\n    User.prototype.rId = 0;\n\n    /**\n     * User username.\n     * @member {string} username\n     * @memberof User\n     * @instance\n     */\n    User.prototype.username = \"\";\n\n    /**\n     * User email.\n     * @member {string} email\n     * @memberof User\n     * @instance\n     */\n    User.prototype.email = \"\";\n\n    /**\n     * User avatar.\n     * @member {string} avatar\n     * @memberof User\n     * @instance\n     */\n    User.prototype.avatar = \"\";\n\n    /**\n     * Creates a new User instance using the specified properties.\n     * @function create\n     * @memberof User\n     * @static\n     * @param {IUser=} [properties] Properties to set\n     * @returns {User} User instance\n     */\n    User.create = function create(properties) {\n        return new User(properties);\n    };\n\n    /**\n     * Encodes the specified User message. Does not implicitly {@link User.verify|verify} messages.\n     * @function encode\n     * @memberof User\n     * @static\n     * @param {IUser} message User message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    User.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rId != null && Object.hasOwnProperty.call(message, \"rId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rId);\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n        if (message.email != null && Object.hasOwnProperty.call(message, \"email\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.email);\n        if (message.avatar != null && Object.hasOwnProperty.call(message, \"avatar\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified User message, length delimited. Does not implicitly {@link User.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof User\n     * @static\n     * @param {IUser} message User message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    User.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a User message from the specified reader or buffer.\n     * @function decode\n     * @memberof User\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {User} User\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    User.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.User();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rId = reader.uint32();\n                break;\n            case 2:\n                message.username = reader.string();\n                break;\n            case 3:\n                message.email = reader.string();\n                break;\n            case 6:\n                message.avatar = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a User message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof User\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {User} User\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    User.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a User message.\n     * @function verify\n     * @memberof User\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    User.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rId != null && message.hasOwnProperty(\"rId\"))\n            if (!$util.isInteger(message.rId))\n                return \"rId: integer expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            if (!$util.isString(message.email))\n                return \"email: string expected\";\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            if (!$util.isString(message.avatar))\n                return \"avatar: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a User message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof User\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {User} User\n     */\n    User.fromObject = function fromObject(object) {\n        if (object instanceof $root.User)\n            return object;\n        var message = new $root.User();\n        if (object.rId != null)\n            message.rId = object.rId >>> 0;\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.email != null)\n            message.email = String(object.email);\n        if (object.avatar != null)\n            message.avatar = String(object.avatar);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a User message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof User\n     * @static\n     * @param {User} message User\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    User.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.rId = 0;\n            object.username = \"\";\n            object.email = \"\";\n            object.avatar = \"\";\n        }\n        if (message.rId != null && message.hasOwnProperty(\"rId\"))\n            object.rId = message.rId;\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            object.email = message.email;\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            object.avatar = message.avatar;\n        return object;\n    };\n\n    /**\n     * Converts this User to JSON.\n     * @function toJSON\n     * @memberof User\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    User.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return User;\n})();\n\n$root.UserRef = (function() {\n\n    /**\n     * Properties of a UserRef.\n     * @exports IUserRef\n     * @interface IUserRef\n     * @property {string|null} [username] UserRef username\n     * @property {string|null} [avatar] UserRef avatar\n     */\n\n    /**\n     * Constructs a new UserRef.\n     * @exports UserRef\n     * @classdesc Represents a UserRef.\n     * @implements IUserRef\n     * @constructor\n     * @param {IUserRef=} [properties] Properties to set\n     */\n    function UserRef(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserRef username.\n     * @member {string} username\n     * @memberof UserRef\n     * @instance\n     */\n    UserRef.prototype.username = \"\";\n\n    /**\n     * UserRef avatar.\n     * @member {string} avatar\n     * @memberof UserRef\n     * @instance\n     */\n    UserRef.prototype.avatar = \"\";\n\n    /**\n     * Creates a new UserRef instance using the specified properties.\n     * @function create\n     * @memberof UserRef\n     * @static\n     * @param {IUserRef=} [properties] Properties to set\n     * @returns {UserRef} UserRef instance\n     */\n    UserRef.create = function create(properties) {\n        return new UserRef(properties);\n    };\n\n    /**\n     * Encodes the specified UserRef message. Does not implicitly {@link UserRef.verify|verify} messages.\n     * @function encode\n     * @memberof UserRef\n     * @static\n     * @param {IUserRef} message UserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserRef.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n        if (message.avatar != null && Object.hasOwnProperty.call(message, \"avatar\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserRef message, length delimited. Does not implicitly {@link UserRef.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserRef\n     * @static\n     * @param {IUserRef} message UserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserRef.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserRef message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserRef} UserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserRef.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserRef();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.username = reader.string();\n                break;\n            case 6:\n                message.avatar = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserRef message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserRef} UserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserRef.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserRef message.\n     * @function verify\n     * @memberof UserRef\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserRef.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            if (!$util.isString(message.avatar))\n                return \"avatar: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserRef message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserRef\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserRef} UserRef\n     */\n    UserRef.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserRef)\n            return object;\n        var message = new $root.UserRef();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.avatar != null)\n            message.avatar = String(object.avatar);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserRef message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserRef\n     * @static\n     * @param {UserRef} message UserRef\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserRef.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.avatar = \"\";\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            object.avatar = message.avatar;\n        return object;\n    };\n\n    /**\n     * Converts this UserRef to JSON.\n     * @function toJSON\n     * @memberof UserRef\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserRef.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserRef;\n})();\n\n$root.AccountState = (function() {\n\n    /**\n     * Properties of an AccountState.\n     * @exports IAccountState\n     * @interface IAccountState\n     * @property {Array.<IBoardSubscription>|null} [subscriptions] AccountState subscriptions\n     * @property {number|null} [karma] AccountState karma\n     * @property {number|null} [upvotes] AccountState upvotes\n     * @property {number|null} [downvotes] AccountState downvotes\n     */\n\n    /**\n     * Constructs a new AccountState.\n     * @exports AccountState\n     * @classdesc Represents an AccountState.\n     * @implements IAccountState\n     * @constructor\n     * @param {IAccountState=} [properties] Properties to set\n     */\n    function AccountState(properties) {\n        this.subscriptions = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AccountState subscriptions.\n     * @member {Array.<IBoardSubscription>} subscriptions\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.subscriptions = $util.emptyArray;\n\n    /**\n     * AccountState karma.\n     * @member {number} karma\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.karma = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * AccountState upvotes.\n     * @member {number} upvotes\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.upvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * AccountState downvotes.\n     * @member {number} downvotes\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.downvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new AccountState instance using the specified properties.\n     * @function create\n     * @memberof AccountState\n     * @static\n     * @param {IAccountState=} [properties] Properties to set\n     * @returns {AccountState} AccountState instance\n     */\n    AccountState.create = function create(properties) {\n        return new AccountState(properties);\n    };\n\n    /**\n     * Encodes the specified AccountState message. Does not implicitly {@link AccountState.verify|verify} messages.\n     * @function encode\n     * @memberof AccountState\n     * @static\n     * @param {IAccountState} message AccountState message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AccountState.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.subscriptions != null && message.subscriptions.length)\n            for (var i = 0; i < message.subscriptions.length; ++i)\n                $root.BoardSubscription.encode(message.subscriptions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.karma != null && Object.hasOwnProperty.call(message, \"karma\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.karma);\n        if (message.upvotes != null && Object.hasOwnProperty.call(message, \"upvotes\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.upvotes);\n        if (message.downvotes != null && Object.hasOwnProperty.call(message, \"downvotes\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.downvotes);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AccountState message, length delimited. Does not implicitly {@link AccountState.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AccountState\n     * @static\n     * @param {IAccountState} message AccountState message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AccountState.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AccountState message from the specified reader or buffer.\n     * @function decode\n     * @memberof AccountState\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AccountState} AccountState\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AccountState.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AccountState();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                if (!(message.subscriptions && message.subscriptions.length))\n                    message.subscriptions = [];\n                message.subscriptions.push($root.BoardSubscription.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                message.karma = reader.int64();\n                break;\n            case 5:\n                message.upvotes = reader.int64();\n                break;\n            case 6:\n                message.downvotes = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AccountState message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AccountState\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AccountState} AccountState\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AccountState.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AccountState message.\n     * @function verify\n     * @memberof AccountState\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AccountState.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.subscriptions != null && message.hasOwnProperty(\"subscriptions\")) {\n            if (!Array.isArray(message.subscriptions))\n                return \"subscriptions: array expected\";\n            for (var i = 0; i < message.subscriptions.length; ++i) {\n                var error = $root.BoardSubscription.verify(message.subscriptions[i]);\n                if (error)\n                    return \"subscriptions.\" + error;\n            }\n        }\n        if (message.karma != null && message.hasOwnProperty(\"karma\"))\n            if (!$util.isInteger(message.karma) && !(message.karma && $util.isInteger(message.karma.low) && $util.isInteger(message.karma.high)))\n                return \"karma: integer|Long expected\";\n        if (message.upvotes != null && message.hasOwnProperty(\"upvotes\"))\n            if (!$util.isInteger(message.upvotes) && !(message.upvotes && $util.isInteger(message.upvotes.low) && $util.isInteger(message.upvotes.high)))\n                return \"upvotes: integer|Long expected\";\n        if (message.downvotes != null && message.hasOwnProperty(\"downvotes\"))\n            if (!$util.isInteger(message.downvotes) && !(message.downvotes && $util.isInteger(message.downvotes.low) && $util.isInteger(message.downvotes.high)))\n                return \"downvotes: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates an AccountState message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AccountState\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AccountState} AccountState\n     */\n    AccountState.fromObject = function fromObject(object) {\n        if (object instanceof $root.AccountState)\n            return object;\n        var message = new $root.AccountState();\n        if (object.subscriptions) {\n            if (!Array.isArray(object.subscriptions))\n                throw TypeError(\".AccountState.subscriptions: array expected\");\n            message.subscriptions = [];\n            for (var i = 0; i < object.subscriptions.length; ++i) {\n                if (typeof object.subscriptions[i] !== \"object\")\n                    throw TypeError(\".AccountState.subscriptions: object expected\");\n                message.subscriptions[i] = $root.BoardSubscription.fromObject(object.subscriptions[i]);\n            }\n        }\n        if (object.karma != null)\n            if ($util.Long)\n                (message.karma = $util.Long.fromValue(object.karma)).unsigned = false;\n            else if (typeof object.karma === \"string\")\n                message.karma = parseInt(object.karma, 10);\n            else if (typeof object.karma === \"number\")\n                message.karma = object.karma;\n            else if (typeof object.karma === \"object\")\n                message.karma = new $util.LongBits(object.karma.low >>> 0, object.karma.high >>> 0).toNumber();\n        if (object.upvotes != null)\n            if ($util.Long)\n                (message.upvotes = $util.Long.fromValue(object.upvotes)).unsigned = false;\n            else if (typeof object.upvotes === \"string\")\n                message.upvotes = parseInt(object.upvotes, 10);\n            else if (typeof object.upvotes === \"number\")\n                message.upvotes = object.upvotes;\n            else if (typeof object.upvotes === \"object\")\n                message.upvotes = new $util.LongBits(object.upvotes.low >>> 0, object.upvotes.high >>> 0).toNumber();\n        if (object.downvotes != null)\n            if ($util.Long)\n                (message.downvotes = $util.Long.fromValue(object.downvotes)).unsigned = false;\n            else if (typeof object.downvotes === \"string\")\n                message.downvotes = parseInt(object.downvotes, 10);\n            else if (typeof object.downvotes === \"number\")\n                message.downvotes = object.downvotes;\n            else if (typeof object.downvotes === \"object\")\n                message.downvotes = new $util.LongBits(object.downvotes.low >>> 0, object.downvotes.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AccountState message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AccountState\n     * @static\n     * @param {AccountState} message AccountState\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AccountState.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.subscriptions = [];\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.karma = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.karma = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.upvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.upvotes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.downvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.downvotes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.subscriptions && message.subscriptions.length) {\n            object.subscriptions = [];\n            for (var j = 0; j < message.subscriptions.length; ++j)\n                object.subscriptions[j] = $root.BoardSubscription.toObject(message.subscriptions[j], options);\n        }\n        if (message.karma != null && message.hasOwnProperty(\"karma\"))\n            if (typeof message.karma === \"number\")\n                object.karma = options.longs === String ? String(message.karma) : message.karma;\n            else\n                object.karma = options.longs === String ? $util.Long.prototype.toString.call(message.karma) : options.longs === Number ? new $util.LongBits(message.karma.low >>> 0, message.karma.high >>> 0).toNumber() : message.karma;\n        if (message.upvotes != null && message.hasOwnProperty(\"upvotes\"))\n            if (typeof message.upvotes === \"number\")\n                object.upvotes = options.longs === String ? String(message.upvotes) : message.upvotes;\n            else\n                object.upvotes = options.longs === String ? $util.Long.prototype.toString.call(message.upvotes) : options.longs === Number ? new $util.LongBits(message.upvotes.low >>> 0, message.upvotes.high >>> 0).toNumber() : message.upvotes;\n        if (message.downvotes != null && message.hasOwnProperty(\"downvotes\"))\n            if (typeof message.downvotes === \"number\")\n                object.downvotes = options.longs === String ? String(message.downvotes) : message.downvotes;\n            else\n                object.downvotes = options.longs === String ? $util.Long.prototype.toString.call(message.downvotes) : options.longs === Number ? new $util.LongBits(message.downvotes.low >>> 0, message.downvotes.high >>> 0).toNumber() : message.downvotes;\n        return object;\n    };\n\n    /**\n     * Converts this AccountState to JSON.\n     * @function toJSON\n     * @memberof AccountState\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AccountState.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AccountState;\n})();\n\n$root.LoginRequest = (function() {\n\n    /**\n     * Properties of a LoginRequest.\n     * @exports ILoginRequest\n     * @interface ILoginRequest\n     * @property {string|null} [username] LoginRequest username\n     * @property {string|null} [password] LoginRequest password\n     */\n\n    /**\n     * Constructs a new LoginRequest.\n     * @exports LoginRequest\n     * @classdesc Represents a LoginRequest.\n     * @implements ILoginRequest\n     * @constructor\n     * @param {ILoginRequest=} [properties] Properties to set\n     */\n    function LoginRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LoginRequest username.\n     * @member {string} username\n     * @memberof LoginRequest\n     * @instance\n     */\n    LoginRequest.prototype.username = \"\";\n\n    /**\n     * LoginRequest password.\n     * @member {string} password\n     * @memberof LoginRequest\n     * @instance\n     */\n    LoginRequest.prototype.password = \"\";\n\n    /**\n     * Creates a new LoginRequest instance using the specified properties.\n     * @function create\n     * @memberof LoginRequest\n     * @static\n     * @param {ILoginRequest=} [properties] Properties to set\n     * @returns {LoginRequest} LoginRequest instance\n     */\n    LoginRequest.create = function create(properties) {\n        return new LoginRequest(properties);\n    };\n\n    /**\n     * Encodes the specified LoginRequest message. Does not implicitly {@link LoginRequest.verify|verify} messages.\n     * @function encode\n     * @memberof LoginRequest\n     * @static\n     * @param {ILoginRequest} message LoginRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);\n        if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link LoginRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LoginRequest\n     * @static\n     * @param {ILoginRequest} message LoginRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LoginRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof LoginRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LoginRequest} LoginRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.username = reader.string();\n                break;\n            case 2:\n                message.password = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a LoginRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LoginRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LoginRequest} LoginRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a LoginRequest message.\n     * @function verify\n     * @memberof LoginRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    LoginRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.password != null && message.hasOwnProperty(\"password\"))\n            if (!$util.isString(message.password))\n                return \"password: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof LoginRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {LoginRequest} LoginRequest\n     */\n    LoginRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.LoginRequest)\n            return object;\n        var message = new $root.LoginRequest();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.password != null)\n            message.password = String(object.password);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof LoginRequest\n     * @static\n     * @param {LoginRequest} message LoginRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    LoginRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.password = \"\";\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.password != null && message.hasOwnProperty(\"password\"))\n            object.password = message.password;\n        return object;\n    };\n\n    /**\n     * Converts this LoginRequest to JSON.\n     * @function toJSON\n     * @memberof LoginRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    LoginRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LoginRequest;\n})();\n\n$root.TokenPair = (function() {\n\n    /**\n     * Properties of a TokenPair.\n     * @exports ITokenPair\n     * @interface ITokenPair\n     * @property {string|null} [accessToken] TokenPair accessToken\n     * @property {string|null} [refreshToken] TokenPair refreshToken\n     */\n\n    /**\n     * Constructs a new TokenPair.\n     * @exports TokenPair\n     * @classdesc Represents a TokenPair.\n     * @implements ITokenPair\n     * @constructor\n     * @param {ITokenPair=} [properties] Properties to set\n     */\n    function TokenPair(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TokenPair accessToken.\n     * @member {string} accessToken\n     * @memberof TokenPair\n     * @instance\n     */\n    TokenPair.prototype.accessToken = \"\";\n\n    /**\n     * TokenPair refreshToken.\n     * @member {string} refreshToken\n     * @memberof TokenPair\n     * @instance\n     */\n    TokenPair.prototype.refreshToken = \"\";\n\n    /**\n     * Creates a new TokenPair instance using the specified properties.\n     * @function create\n     * @memberof TokenPair\n     * @static\n     * @param {ITokenPair=} [properties] Properties to set\n     * @returns {TokenPair} TokenPair instance\n     */\n    TokenPair.create = function create(properties) {\n        return new TokenPair(properties);\n    };\n\n    /**\n     * Encodes the specified TokenPair message. Does not implicitly {@link TokenPair.verify|verify} messages.\n     * @function encode\n     * @memberof TokenPair\n     * @static\n     * @param {ITokenPair} message TokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TokenPair.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.accessToken != null && Object.hasOwnProperty.call(message, \"accessToken\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.accessToken);\n        if (message.refreshToken != null && Object.hasOwnProperty.call(message, \"refreshToken\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.refreshToken);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TokenPair message, length delimited. Does not implicitly {@link TokenPair.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TokenPair\n     * @static\n     * @param {ITokenPair} message TokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TokenPair.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TokenPair message from the specified reader or buffer.\n     * @function decode\n     * @memberof TokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TokenPair} TokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TokenPair.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TokenPair();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.accessToken = reader.string();\n                break;\n            case 2:\n                message.refreshToken = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TokenPair message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TokenPair} TokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TokenPair.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TokenPair message.\n     * @function verify\n     * @memberof TokenPair\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TokenPair.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            if (!$util.isString(message.accessToken))\n                return \"accessToken: string expected\";\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            if (!$util.isString(message.refreshToken))\n                return \"refreshToken: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a TokenPair message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TokenPair\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TokenPair} TokenPair\n     */\n    TokenPair.fromObject = function fromObject(object) {\n        if (object instanceof $root.TokenPair)\n            return object;\n        var message = new $root.TokenPair();\n        if (object.accessToken != null)\n            message.accessToken = String(object.accessToken);\n        if (object.refreshToken != null)\n            message.refreshToken = String(object.refreshToken);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TokenPair message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TokenPair\n     * @static\n     * @param {TokenPair} message TokenPair\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TokenPair.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.accessToken = \"\";\n            object.refreshToken = \"\";\n        }\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            object.accessToken = message.accessToken;\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            object.refreshToken = message.refreshToken;\n        return object;\n    };\n\n    /**\n     * Converts this TokenPair to JSON.\n     * @function toJSON\n     * @memberof TokenPair\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TokenPair.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TokenPair;\n})();\n\n$root.JwtTokenPair = (function() {\n\n    /**\n     * Properties of a JwtTokenPair.\n     * @exports IJwtTokenPair\n     * @interface IJwtTokenPair\n     * @property {string|null} [accessToken] JwtTokenPair accessToken\n     * @property {string|null} [refreshToken] JwtTokenPair refreshToken\n     */\n\n    /**\n     * Constructs a new JwtTokenPair.\n     * @exports JwtTokenPair\n     * @classdesc Represents a JwtTokenPair.\n     * @implements IJwtTokenPair\n     * @constructor\n     * @param {IJwtTokenPair=} [properties] Properties to set\n     */\n    function JwtTokenPair(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * JwtTokenPair accessToken.\n     * @member {string} accessToken\n     * @memberof JwtTokenPair\n     * @instance\n     */\n    JwtTokenPair.prototype.accessToken = \"\";\n\n    /**\n     * JwtTokenPair refreshToken.\n     * @member {string} refreshToken\n     * @memberof JwtTokenPair\n     * @instance\n     */\n    JwtTokenPair.prototype.refreshToken = \"\";\n\n    /**\n     * Creates a new JwtTokenPair instance using the specified properties.\n     * @function create\n     * @memberof JwtTokenPair\n     * @static\n     * @param {IJwtTokenPair=} [properties] Properties to set\n     * @returns {JwtTokenPair} JwtTokenPair instance\n     */\n    JwtTokenPair.create = function create(properties) {\n        return new JwtTokenPair(properties);\n    };\n\n    /**\n     * Encodes the specified JwtTokenPair message. Does not implicitly {@link JwtTokenPair.verify|verify} messages.\n     * @function encode\n     * @memberof JwtTokenPair\n     * @static\n     * @param {IJwtTokenPair} message JwtTokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    JwtTokenPair.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.accessToken != null && Object.hasOwnProperty.call(message, \"accessToken\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.accessToken);\n        if (message.refreshToken != null && Object.hasOwnProperty.call(message, \"refreshToken\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.refreshToken);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified JwtTokenPair message, length delimited. Does not implicitly {@link JwtTokenPair.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof JwtTokenPair\n     * @static\n     * @param {IJwtTokenPair} message JwtTokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    JwtTokenPair.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a JwtTokenPair message from the specified reader or buffer.\n     * @function decode\n     * @memberof JwtTokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {JwtTokenPair} JwtTokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    JwtTokenPair.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.JwtTokenPair();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.accessToken = reader.string();\n                break;\n            case 2:\n                message.refreshToken = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a JwtTokenPair message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof JwtTokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {JwtTokenPair} JwtTokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    JwtTokenPair.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a JwtTokenPair message.\n     * @function verify\n     * @memberof JwtTokenPair\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    JwtTokenPair.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            if (!$util.isString(message.accessToken))\n                return \"accessToken: string expected\";\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            if (!$util.isString(message.refreshToken))\n                return \"refreshToken: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a JwtTokenPair message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof JwtTokenPair\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {JwtTokenPair} JwtTokenPair\n     */\n    JwtTokenPair.fromObject = function fromObject(object) {\n        if (object instanceof $root.JwtTokenPair)\n            return object;\n        var message = new $root.JwtTokenPair();\n        if (object.accessToken != null)\n            message.accessToken = String(object.accessToken);\n        if (object.refreshToken != null)\n            message.refreshToken = String(object.refreshToken);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a JwtTokenPair message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof JwtTokenPair\n     * @static\n     * @param {JwtTokenPair} message JwtTokenPair\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    JwtTokenPair.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.accessToken = \"\";\n            object.refreshToken = \"\";\n        }\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            object.accessToken = message.accessToken;\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            object.refreshToken = message.refreshToken;\n        return object;\n    };\n\n    /**\n     * Converts this JwtTokenPair to JSON.\n     * @function toJSON\n     * @memberof JwtTokenPair\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    JwtTokenPair.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return JwtTokenPair;\n})();\n\n$root.LoginResponse = (function() {\n\n    /**\n     * Properties of a LoginResponse.\n     * @exports ILoginResponse\n     * @interface ILoginResponse\n     * @property {string|null} [userId] LoginResponse userId\n     * @property {IJwtTokenPair|null} [tokens] LoginResponse tokens\n     * @property {IAccountState|null} [state] LoginResponse state\n     */\n\n    /**\n     * Constructs a new LoginResponse.\n     * @exports LoginResponse\n     * @classdesc Represents a LoginResponse.\n     * @implements ILoginResponse\n     * @constructor\n     * @param {ILoginResponse=} [properties] Properties to set\n     */\n    function LoginResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LoginResponse userId.\n     * @member {string} userId\n     * @memberof LoginResponse\n     * @instance\n     */\n    LoginResponse.prototype.userId = \"\";\n\n    /**\n     * LoginResponse tokens.\n     * @member {IJwtTokenPair|null|undefined} tokens\n     * @memberof LoginResponse\n     * @instance\n     */\n    LoginResponse.prototype.tokens = null;\n\n    /**\n     * LoginResponse state.\n     * @member {IAccountState|null|undefined} state\n     * @memberof LoginResponse\n     * @instance\n     */\n    LoginResponse.prototype.state = null;\n\n    /**\n     * Creates a new LoginResponse instance using the specified properties.\n     * @function create\n     * @memberof LoginResponse\n     * @static\n     * @param {ILoginResponse=} [properties] Properties to set\n     * @returns {LoginResponse} LoginResponse instance\n     */\n    LoginResponse.create = function create(properties) {\n        return new LoginResponse(properties);\n    };\n\n    /**\n     * Encodes the specified LoginResponse message. Does not implicitly {@link LoginResponse.verify|verify} messages.\n     * @function encode\n     * @memberof LoginResponse\n     * @static\n     * @param {ILoginResponse} message LoginResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.tokens != null && Object.hasOwnProperty.call(message, \"tokens\"))\n            $root.JwtTokenPair.encode(message.tokens, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.state != null && Object.hasOwnProperty.call(message, \"state\"))\n            $root.AccountState.encode(message.state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified LoginResponse message, length delimited. Does not implicitly {@link LoginResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LoginResponse\n     * @static\n     * @param {ILoginResponse} message LoginResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LoginResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof LoginResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LoginResponse} LoginResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.tokens = $root.JwtTokenPair.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.state = $root.AccountState.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a LoginResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LoginResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LoginResponse} LoginResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a LoginResponse message.\n     * @function verify\n     * @memberof LoginResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    LoginResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.tokens != null && message.hasOwnProperty(\"tokens\")) {\n            var error = $root.JwtTokenPair.verify(message.tokens);\n            if (error)\n                return \"tokens.\" + error;\n        }\n        if (message.state != null && message.hasOwnProperty(\"state\")) {\n            var error = $root.AccountState.verify(message.state);\n            if (error)\n                return \"state.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a LoginResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof LoginResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {LoginResponse} LoginResponse\n     */\n    LoginResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.LoginResponse)\n            return object;\n        var message = new $root.LoginResponse();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.tokens != null) {\n            if (typeof object.tokens !== \"object\")\n                throw TypeError(\".LoginResponse.tokens: object expected\");\n            message.tokens = $root.JwtTokenPair.fromObject(object.tokens);\n        }\n        if (object.state != null) {\n            if (typeof object.state !== \"object\")\n                throw TypeError(\".LoginResponse.state: object expected\");\n            message.state = $root.AccountState.fromObject(object.state);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a LoginResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof LoginResponse\n     * @static\n     * @param {LoginResponse} message LoginResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    LoginResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.tokens = null;\n            object.state = null;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.tokens != null && message.hasOwnProperty(\"tokens\"))\n            object.tokens = $root.JwtTokenPair.toObject(message.tokens, options);\n        if (message.state != null && message.hasOwnProperty(\"state\"))\n            object.state = $root.AccountState.toObject(message.state, options);\n        return object;\n    };\n\n    /**\n     * Converts this LoginResponse to JSON.\n     * @function toJSON\n     * @memberof LoginResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    LoginResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LoginResponse;\n})();\n\n$root.ThreadCreateRequest = (function() {\n\n    /**\n     * Properties of a ThreadCreateRequest.\n     * @exports IThreadCreateRequest\n     * @interface IThreadCreateRequest\n     * @property {string|null} [boardId] ThreadCreateRequest boardId\n     * @property {string|null} [title] ThreadCreateRequest title\n     * @property {string|null} [link] ThreadCreateRequest link\n     * @property {string|null} [content] ThreadCreateRequest content\n     * @property {number|null} [createdAtHint] ThreadCreateRequest createdAtHint\n     */\n\n    /**\n     * Constructs a new ThreadCreateRequest.\n     * @exports ThreadCreateRequest\n     * @classdesc Represents a ThreadCreateRequest.\n     * @implements IThreadCreateRequest\n     * @constructor\n     * @param {IThreadCreateRequest=} [properties] Properties to set\n     */\n    function ThreadCreateRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadCreateRequest boardId.\n     * @member {string} boardId\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.boardId = \"\";\n\n    /**\n     * ThreadCreateRequest title.\n     * @member {string} title\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.title = \"\";\n\n    /**\n     * ThreadCreateRequest link.\n     * @member {string} link\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.link = \"\";\n\n    /**\n     * ThreadCreateRequest content.\n     * @member {string} content\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.content = \"\";\n\n    /**\n     * ThreadCreateRequest createdAtHint.\n     * @member {number} createdAtHint\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.createdAtHint = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ThreadCreateRequest instance using the specified properties.\n     * @function create\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {IThreadCreateRequest=} [properties] Properties to set\n     * @returns {ThreadCreateRequest} ThreadCreateRequest instance\n     */\n    ThreadCreateRequest.create = function create(properties) {\n        return new ThreadCreateRequest(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadCreateRequest message. Does not implicitly {@link ThreadCreateRequest.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {IThreadCreateRequest} message ThreadCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);\n        if (message.link != null && Object.hasOwnProperty.call(message, \"link\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.link);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n        if (message.createdAtHint != null && Object.hasOwnProperty.call(message, \"createdAtHint\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createdAtHint);\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.boardId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadCreateRequest message, length delimited. Does not implicitly {@link ThreadCreateRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {IThreadCreateRequest} message ThreadCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadCreateRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadCreateRequest} ThreadCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadCreateRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 5:\n                message.boardId = reader.string();\n                break;\n            case 1:\n                message.title = reader.string();\n                break;\n            case 2:\n                message.link = reader.string();\n                break;\n            case 3:\n                message.content = reader.string();\n                break;\n            case 4:\n                message.createdAtHint = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadCreateRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadCreateRequest} ThreadCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadCreateRequest message.\n     * @function verify\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadCreateRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            if (!$util.isString(message.link))\n                return \"link: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.createdAtHint != null && message.hasOwnProperty(\"createdAtHint\"))\n            if (!$util.isInteger(message.createdAtHint) && !(message.createdAtHint && $util.isInteger(message.createdAtHint.low) && $util.isInteger(message.createdAtHint.high)))\n                return \"createdAtHint: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadCreateRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadCreateRequest} ThreadCreateRequest\n     */\n    ThreadCreateRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadCreateRequest)\n            return object;\n        var message = new $root.ThreadCreateRequest();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.link != null)\n            message.link = String(object.link);\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.createdAtHint != null)\n            if ($util.Long)\n                (message.createdAtHint = $util.Long.fromValue(object.createdAtHint)).unsigned = false;\n            else if (typeof object.createdAtHint === \"string\")\n                message.createdAtHint = parseInt(object.createdAtHint, 10);\n            else if (typeof object.createdAtHint === \"number\")\n                message.createdAtHint = object.createdAtHint;\n            else if (typeof object.createdAtHint === \"object\")\n                message.createdAtHint = new $util.LongBits(object.createdAtHint.low >>> 0, object.createdAtHint.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadCreateRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {ThreadCreateRequest} message ThreadCreateRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadCreateRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.title = \"\";\n            object.link = \"\";\n            object.content = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAtHint = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAtHint = options.longs === String ? \"0\" : 0;\n            object.boardId = \"\";\n        }\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            object.link = message.link;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.createdAtHint != null && message.hasOwnProperty(\"createdAtHint\"))\n            if (typeof message.createdAtHint === \"number\")\n                object.createdAtHint = options.longs === String ? String(message.createdAtHint) : message.createdAtHint;\n            else\n                object.createdAtHint = options.longs === String ? $util.Long.prototype.toString.call(message.createdAtHint) : options.longs === Number ? new $util.LongBits(message.createdAtHint.low >>> 0, message.createdAtHint.high >>> 0).toNumber() : message.createdAtHint;\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadCreateRequest to JSON.\n     * @function toJSON\n     * @memberof ThreadCreateRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadCreateRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadCreateRequest;\n})();\n\n$root.ThreadCreateResponse = (function() {\n\n    /**\n     * Properties of a ThreadCreateResponse.\n     * @exports IThreadCreateResponse\n     * @interface IThreadCreateResponse\n     * @property {string|null} [threadId] ThreadCreateResponse threadId\n     */\n\n    /**\n     * Constructs a new ThreadCreateResponse.\n     * @exports ThreadCreateResponse\n     * @classdesc Represents a ThreadCreateResponse.\n     * @implements IThreadCreateResponse\n     * @constructor\n     * @param {IThreadCreateResponse=} [properties] Properties to set\n     */\n    function ThreadCreateResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadCreateResponse threadId.\n     * @member {string} threadId\n     * @memberof ThreadCreateResponse\n     * @instance\n     */\n    ThreadCreateResponse.prototype.threadId = \"\";\n\n    /**\n     * Creates a new ThreadCreateResponse instance using the specified properties.\n     * @function create\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {IThreadCreateResponse=} [properties] Properties to set\n     * @returns {ThreadCreateResponse} ThreadCreateResponse instance\n     */\n    ThreadCreateResponse.create = function create(properties) {\n        return new ThreadCreateResponse(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadCreateResponse message. Does not implicitly {@link ThreadCreateResponse.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {IThreadCreateResponse} message ThreadCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.threadId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadCreateResponse message, length delimited. Does not implicitly {@link ThreadCreateResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {IThreadCreateResponse} message ThreadCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadCreateResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadCreateResponse} ThreadCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadCreateResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threadId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadCreateResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadCreateResponse} ThreadCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadCreateResponse message.\n     * @function verify\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadCreateResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadCreateResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadCreateResponse} ThreadCreateResponse\n     */\n    ThreadCreateResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadCreateResponse)\n            return object;\n        var message = new $root.ThreadCreateResponse();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadCreateResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {ThreadCreateResponse} message ThreadCreateResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadCreateResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.threadId = \"\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadCreateResponse to JSON.\n     * @function toJSON\n     * @memberof ThreadCreateResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadCreateResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadCreateResponse;\n})();\n\n$root.ThreadWithBoardContext = (function() {\n\n    /**\n     * Properties of a ThreadWithBoardContext.\n     * @exports IThreadWithBoardContext\n     * @interface IThreadWithBoardContext\n     * @property {IThread|null} [thread] ThreadWithBoardContext thread\n     * @property {ICommentSelectResponse|null} [comments] ThreadWithBoardContext comments\n     * @property {ICommentSelectGraphResponse|null} [commentsGraph] ThreadWithBoardContext commentsGraph\n     * @property {IBoard|null} [board] ThreadWithBoardContext board\n     */\n\n    /**\n     * Constructs a new ThreadWithBoardContext.\n     * @exports ThreadWithBoardContext\n     * @classdesc Represents a ThreadWithBoardContext.\n     * @implements IThreadWithBoardContext\n     * @constructor\n     * @param {IThreadWithBoardContext=} [properties] Properties to set\n     */\n    function ThreadWithBoardContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadWithBoardContext thread.\n     * @member {IThread|null|undefined} thread\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.thread = null;\n\n    /**\n     * ThreadWithBoardContext comments.\n     * @member {ICommentSelectResponse|null|undefined} comments\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.comments = null;\n\n    /**\n     * ThreadWithBoardContext commentsGraph.\n     * @member {ICommentSelectGraphResponse|null|undefined} commentsGraph\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.commentsGraph = null;\n\n    /**\n     * ThreadWithBoardContext board.\n     * @member {IBoard|null|undefined} board\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.board = null;\n\n    /**\n     * Creates a new ThreadWithBoardContext instance using the specified properties.\n     * @function create\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {IThreadWithBoardContext=} [properties] Properties to set\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext instance\n     */\n    ThreadWithBoardContext.create = function create(properties) {\n        return new ThreadWithBoardContext(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadWithBoardContext message. Does not implicitly {@link ThreadWithBoardContext.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {IThreadWithBoardContext} message ThreadWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadWithBoardContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.thread != null && Object.hasOwnProperty.call(message, \"thread\"))\n            $root.Thread.encode(message.thread, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n            $root.Board.encode(message.board, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.comments != null && Object.hasOwnProperty.call(message, \"comments\"))\n            $root.CommentSelectResponse.encode(message.comments, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.commentsGraph != null && Object.hasOwnProperty.call(message, \"commentsGraph\"))\n            $root.CommentSelectGraphResponse.encode(message.commentsGraph, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadWithBoardContext message, length delimited. Does not implicitly {@link ThreadWithBoardContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {IThreadWithBoardContext} message ThreadWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadWithBoardContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadWithBoardContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadWithBoardContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadWithBoardContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.thread = $root.Thread.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.comments = $root.CommentSelectResponse.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.commentsGraph = $root.CommentSelectGraphResponse.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.board = $root.Board.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadWithBoardContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadWithBoardContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadWithBoardContext message.\n     * @function verify\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadWithBoardContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.thread != null && message.hasOwnProperty(\"thread\")) {\n            var error = $root.Thread.verify(message.thread);\n            if (error)\n                return \"thread.\" + error;\n        }\n        if (message.comments != null && message.hasOwnProperty(\"comments\")) {\n            var error = $root.CommentSelectResponse.verify(message.comments);\n            if (error)\n                return \"comments.\" + error;\n        }\n        if (message.commentsGraph != null && message.hasOwnProperty(\"commentsGraph\")) {\n            var error = $root.CommentSelectGraphResponse.verify(message.commentsGraph);\n            if (error)\n                return \"commentsGraph.\" + error;\n        }\n        if (message.board != null && message.hasOwnProperty(\"board\")) {\n            var error = $root.Board.verify(message.board);\n            if (error)\n                return \"board.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadWithBoardContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext\n     */\n    ThreadWithBoardContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadWithBoardContext)\n            return object;\n        var message = new $root.ThreadWithBoardContext();\n        if (object.thread != null) {\n            if (typeof object.thread !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.thread: object expected\");\n            message.thread = $root.Thread.fromObject(object.thread);\n        }\n        if (object.comments != null) {\n            if (typeof object.comments !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.comments: object expected\");\n            message.comments = $root.CommentSelectResponse.fromObject(object.comments);\n        }\n        if (object.commentsGraph != null) {\n            if (typeof object.commentsGraph !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.commentsGraph: object expected\");\n            message.commentsGraph = $root.CommentSelectGraphResponse.fromObject(object.commentsGraph);\n        }\n        if (object.board != null) {\n            if (typeof object.board !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.board: object expected\");\n            message.board = $root.Board.fromObject(object.board);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadWithBoardContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {ThreadWithBoardContext} message ThreadWithBoardContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadWithBoardContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.thread = null;\n            object.board = null;\n            object.comments = null;\n            object.commentsGraph = null;\n        }\n        if (message.thread != null && message.hasOwnProperty(\"thread\"))\n            object.thread = $root.Thread.toObject(message.thread, options);\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            object.board = $root.Board.toObject(message.board, options);\n        if (message.comments != null && message.hasOwnProperty(\"comments\"))\n            object.comments = $root.CommentSelectResponse.toObject(message.comments, options);\n        if (message.commentsGraph != null && message.hasOwnProperty(\"commentsGraph\"))\n            object.commentsGraph = $root.CommentSelectGraphResponse.toObject(message.commentsGraph, options);\n        return object;\n    };\n\n    /**\n     * Converts this ThreadWithBoardContext to JSON.\n     * @function toJSON\n     * @memberof ThreadWithBoardContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadWithBoardContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadWithBoardContext;\n})();\n\n$root.BanInfo = (function() {\n\n    /**\n     * Properties of a BanInfo.\n     * @exports IBanInfo\n     * @interface IBanInfo\n     * @property {string|null} [bannedBy] BanInfo bannedBy\n     * @property {string|null} [banReason] BanInfo banReason\n     * @property {string|null} [approvedBy] BanInfo approvedBy\n     * @property {string|null} [createdAt] BanInfo createdAt\n     * @property {string|null} [reason] BanInfo reason\n     */\n\n    /**\n     * Constructs a new BanInfo.\n     * @exports BanInfo\n     * @classdesc Represents a BanInfo.\n     * @implements IBanInfo\n     * @constructor\n     * @param {IBanInfo=} [properties] Properties to set\n     */\n    function BanInfo(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BanInfo bannedBy.\n     * @member {string} bannedBy\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.bannedBy = \"\";\n\n    /**\n     * BanInfo banReason.\n     * @member {string} banReason\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.banReason = \"\";\n\n    /**\n     * BanInfo approvedBy.\n     * @member {string} approvedBy\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.approvedBy = \"\";\n\n    /**\n     * BanInfo createdAt.\n     * @member {string} createdAt\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.createdAt = \"\";\n\n    /**\n     * BanInfo reason.\n     * @member {string} reason\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.reason = \"\";\n\n    /**\n     * Creates a new BanInfo instance using the specified properties.\n     * @function create\n     * @memberof BanInfo\n     * @static\n     * @param {IBanInfo=} [properties] Properties to set\n     * @returns {BanInfo} BanInfo instance\n     */\n    BanInfo.create = function create(properties) {\n        return new BanInfo(properties);\n    };\n\n    /**\n     * Encodes the specified BanInfo message. Does not implicitly {@link BanInfo.verify|verify} messages.\n     * @function encode\n     * @memberof BanInfo\n     * @static\n     * @param {IBanInfo} message BanInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BanInfo.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.bannedBy != null && Object.hasOwnProperty.call(message, \"bannedBy\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.bannedBy);\n        if (message.approvedBy != null && Object.hasOwnProperty.call(message, \"approvedBy\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.approvedBy);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.createdAt);\n        if (message.banReason != null && Object.hasOwnProperty.call(message, \"banReason\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.banReason);\n        if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reason);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BanInfo message, length delimited. Does not implicitly {@link BanInfo.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BanInfo\n     * @static\n     * @param {IBanInfo} message BanInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BanInfo.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BanInfo message from the specified reader or buffer.\n     * @function decode\n     * @memberof BanInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BanInfo} BanInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BanInfo.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BanInfo();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.bannedBy = reader.string();\n                break;\n            case 4:\n                message.banReason = reader.string();\n                break;\n            case 2:\n                message.approvedBy = reader.string();\n                break;\n            case 3:\n                message.createdAt = reader.string();\n                break;\n            case 5:\n                message.reason = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BanInfo message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BanInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BanInfo} BanInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BanInfo.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BanInfo message.\n     * @function verify\n     * @memberof BanInfo\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BanInfo.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.bannedBy != null && message.hasOwnProperty(\"bannedBy\"))\n            if (!$util.isString(message.bannedBy))\n                return \"bannedBy: string expected\";\n        if (message.banReason != null && message.hasOwnProperty(\"banReason\"))\n            if (!$util.isString(message.banReason))\n                return \"banReason: string expected\";\n        if (message.approvedBy != null && message.hasOwnProperty(\"approvedBy\"))\n            if (!$util.isString(message.approvedBy))\n                return \"approvedBy: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isString(message.createdAt))\n                return \"createdAt: string expected\";\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            if (!$util.isString(message.reason))\n                return \"reason: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BanInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BanInfo\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BanInfo} BanInfo\n     */\n    BanInfo.fromObject = function fromObject(object) {\n        if (object instanceof $root.BanInfo)\n            return object;\n        var message = new $root.BanInfo();\n        if (object.bannedBy != null)\n            message.bannedBy = String(object.bannedBy);\n        if (object.banReason != null)\n            message.banReason = String(object.banReason);\n        if (object.approvedBy != null)\n            message.approvedBy = String(object.approvedBy);\n        if (object.createdAt != null)\n            message.createdAt = String(object.createdAt);\n        if (object.reason != null)\n            message.reason = String(object.reason);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BanInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BanInfo\n     * @static\n     * @param {BanInfo} message BanInfo\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BanInfo.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.bannedBy = \"\";\n            object.approvedBy = \"\";\n            object.createdAt = \"\";\n            object.banReason = \"\";\n            object.reason = \"\";\n        }\n        if (message.bannedBy != null && message.hasOwnProperty(\"bannedBy\"))\n            object.bannedBy = message.bannedBy;\n        if (message.approvedBy != null && message.hasOwnProperty(\"approvedBy\"))\n            object.approvedBy = message.approvedBy;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            object.createdAt = message.createdAt;\n        if (message.banReason != null && message.hasOwnProperty(\"banReason\"))\n            object.banReason = message.banReason;\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            object.reason = message.reason;\n        return object;\n    };\n\n    /**\n     * Converts this BanInfo to JSON.\n     * @function toJSON\n     * @memberof BanInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BanInfo.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BanInfo;\n})();\n\n$root.ReportInfo = (function() {\n\n    /**\n     * Properties of a ReportInfo.\n     * @exports IReportInfo\n     * @interface IReportInfo\n     * @property {string|null} [report] ReportInfo report\n     * @property {IUserRef|null} [user] ReportInfo user\n     * @property {number|null} [createdAt] ReportInfo createdAt\n     */\n\n    /**\n     * Constructs a new ReportInfo.\n     * @exports ReportInfo\n     * @classdesc Represents a ReportInfo.\n     * @implements IReportInfo\n     * @constructor\n     * @param {IReportInfo=} [properties] Properties to set\n     */\n    function ReportInfo(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportInfo report.\n     * @member {string} report\n     * @memberof ReportInfo\n     * @instance\n     */\n    ReportInfo.prototype.report = \"\";\n\n    /**\n     * ReportInfo user.\n     * @member {IUserRef|null|undefined} user\n     * @memberof ReportInfo\n     * @instance\n     */\n    ReportInfo.prototype.user = null;\n\n    /**\n     * ReportInfo createdAt.\n     * @member {number} createdAt\n     * @memberof ReportInfo\n     * @instance\n     */\n    ReportInfo.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ReportInfo instance using the specified properties.\n     * @function create\n     * @memberof ReportInfo\n     * @static\n     * @param {IReportInfo=} [properties] Properties to set\n     * @returns {ReportInfo} ReportInfo instance\n     */\n    ReportInfo.create = function create(properties) {\n        return new ReportInfo(properties);\n    };\n\n    /**\n     * Encodes the specified ReportInfo message. Does not implicitly {@link ReportInfo.verify|verify} messages.\n     * @function encode\n     * @memberof ReportInfo\n     * @static\n     * @param {IReportInfo} message ReportInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportInfo.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.report != null && Object.hasOwnProperty.call(message, \"report\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.report);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.UserRef.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportInfo message, length delimited. Does not implicitly {@link ReportInfo.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportInfo\n     * @static\n     * @param {IReportInfo} message ReportInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportInfo.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportInfo message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportInfo} ReportInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportInfo.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportInfo();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.report = reader.string();\n                break;\n            case 2:\n                message.user = $root.UserRef.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportInfo message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportInfo} ReportInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportInfo.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportInfo message.\n     * @function verify\n     * @memberof ReportInfo\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportInfo.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.report != null && message.hasOwnProperty(\"report\"))\n            if (!$util.isString(message.report))\n                return \"report: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.UserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReportInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReportInfo\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReportInfo} ReportInfo\n     */\n    ReportInfo.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReportInfo)\n            return object;\n        var message = new $root.ReportInfo();\n        if (object.report != null)\n            message.report = String(object.report);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".ReportInfo.user: object expected\");\n            message.user = $root.UserRef.fromObject(object.user);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReportInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportInfo\n     * @static\n     * @param {ReportInfo} message ReportInfo\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportInfo.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.report = \"\";\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.report != null && message.hasOwnProperty(\"report\"))\n            object.report = message.report;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.UserRef.toObject(message.user, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this ReportInfo to JSON.\n     * @function toJSON\n     * @memberof ReportInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportInfo.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportInfo;\n})();\n\n$root.Vote = (function() {\n\n    /**\n     * Properties of a Vote.\n     * @exports IVote\n     * @interface IVote\n     * @property {number|null} [type] Vote type\n     * @property {string|null} [typeCode] Vote typeCode\n     * @property {number|null} [amount] Vote amount\n     * @property {number|null} [createdAt] Vote createdAt\n     */\n\n    /**\n     * Constructs a new Vote.\n     * @exports Vote\n     * @classdesc Represents a Vote.\n     * @implements IVote\n     * @constructor\n     * @param {IVote=} [properties] Properties to set\n     */\n    function Vote(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Vote type.\n     * @member {number} type\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.type = 0;\n\n    /**\n     * Vote typeCode.\n     * @member {string} typeCode\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.typeCode = \"\";\n\n    /**\n     * Vote amount.\n     * @member {number} amount\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Vote createdAt.\n     * @member {number} createdAt\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new Vote instance using the specified properties.\n     * @function create\n     * @memberof Vote\n     * @static\n     * @param {IVote=} [properties] Properties to set\n     * @returns {Vote} Vote instance\n     */\n    Vote.create = function create(properties) {\n        return new Vote(properties);\n    };\n\n    /**\n     * Encodes the specified Vote message. Does not implicitly {@link Vote.verify|verify} messages.\n     * @function encode\n     * @memberof Vote\n     * @static\n     * @param {IVote} message Vote message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Vote.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n        if (message.typeCode != null && Object.hasOwnProperty.call(message, \"typeCode\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.typeCode);\n        if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.amount);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Vote message, length delimited. Does not implicitly {@link Vote.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Vote\n     * @static\n     * @param {IVote} message Vote message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Vote.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Vote message from the specified reader or buffer.\n     * @function decode\n     * @memberof Vote\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Vote} Vote\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Vote.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Vote();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.int32();\n                break;\n            case 3:\n                message.typeCode = reader.string();\n                break;\n            case 4:\n                message.amount = reader.int64();\n                break;\n            case 5:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Vote message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Vote\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Vote} Vote\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Vote.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Vote message.\n     * @function verify\n     * @memberof Vote\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Vote.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isInteger(message.type))\n                return \"type: integer expected\";\n        if (message.typeCode != null && message.hasOwnProperty(\"typeCode\"))\n            if (!$util.isString(message.typeCode))\n                return \"typeCode: string expected\";\n        if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))\n                return \"amount: integer|Long expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Vote message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Vote\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Vote} Vote\n     */\n    Vote.fromObject = function fromObject(object) {\n        if (object instanceof $root.Vote)\n            return object;\n        var message = new $root.Vote();\n        if (object.type != null)\n            message.type = object.type | 0;\n        if (object.typeCode != null)\n            message.typeCode = String(object.typeCode);\n        if (object.amount != null)\n            if ($util.Long)\n                (message.amount = $util.Long.fromValue(object.amount)).unsigned = false;\n            else if (typeof object.amount === \"string\")\n                message.amount = parseInt(object.amount, 10);\n            else if (typeof object.amount === \"number\")\n                message.amount = object.amount;\n            else if (typeof object.amount === \"object\")\n                message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber();\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Vote message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Vote\n     * @static\n     * @param {Vote} message Vote\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Vote.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = 0;\n            object.typeCode = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.amount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.typeCode != null && message.hasOwnProperty(\"typeCode\"))\n            object.typeCode = message.typeCode;\n        if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            if (typeof message.amount === \"number\")\n                object.amount = options.longs === String ? String(message.amount) : message.amount;\n            else\n                object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber() : message.amount;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this Vote to JSON.\n     * @function toJSON\n     * @memberof Vote\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Vote.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Vote;\n})();\n\n$root.CommentActionedContext = (function() {\n\n    /**\n     * Properties of a CommentActionedContext.\n     * @exports ICommentActionedContext\n     * @interface ICommentActionedContext\n     * @property {boolean|null} [isModerator] CommentActionedContext isModerator\n     * @property {string|null} [vote] CommentActionedContext vote\n     */\n\n    /**\n     * Constructs a new CommentActionedContext.\n     * @exports CommentActionedContext\n     * @classdesc Represents a CommentActionedContext.\n     * @implements ICommentActionedContext\n     * @constructor\n     * @param {ICommentActionedContext=} [properties] Properties to set\n     */\n    function CommentActionedContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentActionedContext isModerator.\n     * @member {boolean} isModerator\n     * @memberof CommentActionedContext\n     * @instance\n     */\n    CommentActionedContext.prototype.isModerator = false;\n\n    /**\n     * CommentActionedContext vote.\n     * @member {string} vote\n     * @memberof CommentActionedContext\n     * @instance\n     */\n    CommentActionedContext.prototype.vote = \"\";\n\n    /**\n     * Creates a new CommentActionedContext instance using the specified properties.\n     * @function create\n     * @memberof CommentActionedContext\n     * @static\n     * @param {ICommentActionedContext=} [properties] Properties to set\n     * @returns {CommentActionedContext} CommentActionedContext instance\n     */\n    CommentActionedContext.create = function create(properties) {\n        return new CommentActionedContext(properties);\n    };\n\n    /**\n     * Encodes the specified CommentActionedContext message. Does not implicitly {@link CommentActionedContext.verify|verify} messages.\n     * @function encode\n     * @memberof CommentActionedContext\n     * @static\n     * @param {ICommentActionedContext} message CommentActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentActionedContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.vote != null && Object.hasOwnProperty.call(message, \"vote\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.vote);\n        if (message.isModerator != null && Object.hasOwnProperty.call(message, \"isModerator\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isModerator);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentActionedContext message, length delimited. Does not implicitly {@link CommentActionedContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentActionedContext\n     * @static\n     * @param {ICommentActionedContext} message CommentActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentActionedContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentActionedContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentActionedContext} CommentActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentActionedContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentActionedContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.isModerator = reader.bool();\n                break;\n            case 1:\n                message.vote = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentActionedContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentActionedContext} CommentActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentActionedContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentActionedContext message.\n     * @function verify\n     * @memberof CommentActionedContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentActionedContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            if (typeof message.isModerator !== \"boolean\")\n                return \"isModerator: boolean expected\";\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            if (!$util.isString(message.vote))\n                return \"vote: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentActionedContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentActionedContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentActionedContext} CommentActionedContext\n     */\n    CommentActionedContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentActionedContext)\n            return object;\n        var message = new $root.CommentActionedContext();\n        if (object.isModerator != null)\n            message.isModerator = Boolean(object.isModerator);\n        if (object.vote != null)\n            message.vote = String(object.vote);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentActionedContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentActionedContext\n     * @static\n     * @param {CommentActionedContext} message CommentActionedContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentActionedContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.vote = \"\";\n            object.isModerator = false;\n        }\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            object.vote = message.vote;\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            object.isModerator = message.isModerator;\n        return object;\n    };\n\n    /**\n     * Converts this CommentActionedContext to JSON.\n     * @function toJSON\n     * @memberof CommentActionedContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentActionedContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentActionedContext;\n})();\n\n$root.ThreadActionedContext = (function() {\n\n    /**\n     * Properties of a ThreadActionedContext.\n     * @exports IThreadActionedContext\n     * @interface IThreadActionedContext\n     * @property {boolean|null} [isModerator] ThreadActionedContext isModerator\n     * @property {string|null} [vote] ThreadActionedContext vote\n     */\n\n    /**\n     * Constructs a new ThreadActionedContext.\n     * @exports ThreadActionedContext\n     * @classdesc Represents a ThreadActionedContext.\n     * @implements IThreadActionedContext\n     * @constructor\n     * @param {IThreadActionedContext=} [properties] Properties to set\n     */\n    function ThreadActionedContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadActionedContext isModerator.\n     * @member {boolean} isModerator\n     * @memberof ThreadActionedContext\n     * @instance\n     */\n    ThreadActionedContext.prototype.isModerator = false;\n\n    /**\n     * ThreadActionedContext vote.\n     * @member {string} vote\n     * @memberof ThreadActionedContext\n     * @instance\n     */\n    ThreadActionedContext.prototype.vote = \"\";\n\n    /**\n     * Creates a new ThreadActionedContext instance using the specified properties.\n     * @function create\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {IThreadActionedContext=} [properties] Properties to set\n     * @returns {ThreadActionedContext} ThreadActionedContext instance\n     */\n    ThreadActionedContext.create = function create(properties) {\n        return new ThreadActionedContext(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadActionedContext message. Does not implicitly {@link ThreadActionedContext.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {IThreadActionedContext} message ThreadActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadActionedContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.vote != null && Object.hasOwnProperty.call(message, \"vote\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.vote);\n        if (message.isModerator != null && Object.hasOwnProperty.call(message, \"isModerator\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isModerator);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadActionedContext message, length delimited. Does not implicitly {@link ThreadActionedContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {IThreadActionedContext} message ThreadActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadActionedContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadActionedContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadActionedContext} ThreadActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadActionedContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadActionedContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.isModerator = reader.bool();\n                break;\n            case 1:\n                message.vote = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadActionedContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadActionedContext} ThreadActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadActionedContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadActionedContext message.\n     * @function verify\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadActionedContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            if (typeof message.isModerator !== \"boolean\")\n                return \"isModerator: boolean expected\";\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            if (!$util.isString(message.vote))\n                return \"vote: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadActionedContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadActionedContext} ThreadActionedContext\n     */\n    ThreadActionedContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadActionedContext)\n            return object;\n        var message = new $root.ThreadActionedContext();\n        if (object.isModerator != null)\n            message.isModerator = Boolean(object.isModerator);\n        if (object.vote != null)\n            message.vote = String(object.vote);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadActionedContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {ThreadActionedContext} message ThreadActionedContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadActionedContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.vote = \"\";\n            object.isModerator = false;\n        }\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            object.vote = message.vote;\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            object.isModerator = message.isModerator;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadActionedContext to JSON.\n     * @function toJSON\n     * @memberof ThreadActionedContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadActionedContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadActionedContext;\n})();\n\n$root.CommentEditRequest = (function() {\n\n    /**\n     * Properties of a CommentEditRequest.\n     * @exports ICommentEditRequest\n     * @interface ICommentEditRequest\n     * @property {string|null} [commentId] CommentEditRequest commentId\n     * @property {string|null} [content] CommentEditRequest content\n     * @property {IComment|null} [comment] CommentEditRequest comment\n     */\n\n    /**\n     * Constructs a new CommentEditRequest.\n     * @exports CommentEditRequest\n     * @classdesc Represents a CommentEditRequest.\n     * @implements ICommentEditRequest\n     * @constructor\n     * @param {ICommentEditRequest=} [properties] Properties to set\n     */\n    function CommentEditRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentEditRequest commentId.\n     * @member {string} commentId\n     * @memberof CommentEditRequest\n     * @instance\n     */\n    CommentEditRequest.prototype.commentId = \"\";\n\n    /**\n     * CommentEditRequest content.\n     * @member {string} content\n     * @memberof CommentEditRequest\n     * @instance\n     */\n    CommentEditRequest.prototype.content = \"\";\n\n    /**\n     * CommentEditRequest comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentEditRequest\n     * @instance\n     */\n    CommentEditRequest.prototype.comment = null;\n\n    /**\n     * Creates a new CommentEditRequest instance using the specified properties.\n     * @function create\n     * @memberof CommentEditRequest\n     * @static\n     * @param {ICommentEditRequest=} [properties] Properties to set\n     * @returns {CommentEditRequest} CommentEditRequest instance\n     */\n    CommentEditRequest.create = function create(properties) {\n        return new CommentEditRequest(properties);\n    };\n\n    /**\n     * Encodes the specified CommentEditRequest message. Does not implicitly {@link CommentEditRequest.verify|verify} messages.\n     * @function encode\n     * @memberof CommentEditRequest\n     * @static\n     * @param {ICommentEditRequest} message CommentEditRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentEditRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.commentId != null && Object.hasOwnProperty.call(message, \"commentId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.commentId);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentEditRequest message, length delimited. Does not implicitly {@link CommentEditRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentEditRequest\n     * @static\n     * @param {ICommentEditRequest} message CommentEditRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentEditRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentEditRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentEditRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentEditRequest} CommentEditRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentEditRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentEditRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.commentId = reader.string();\n                break;\n            case 2:\n                message.content = reader.string();\n                break;\n            case 3:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentEditRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentEditRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentEditRequest} CommentEditRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentEditRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentEditRequest message.\n     * @function verify\n     * @memberof CommentEditRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentEditRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            if (!$util.isString(message.commentId))\n                return \"commentId: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommentEditRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentEditRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentEditRequest} CommentEditRequest\n     */\n    CommentEditRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentEditRequest)\n            return object;\n        var message = new $root.CommentEditRequest();\n        if (object.commentId != null)\n            message.commentId = String(object.commentId);\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentEditRequest.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentEditRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentEditRequest\n     * @static\n     * @param {CommentEditRequest} message CommentEditRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentEditRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.commentId = \"\";\n            object.content = \"\";\n            object.comment = null;\n        }\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            object.commentId = message.commentId;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        return object;\n    };\n\n    /**\n     * Converts this CommentEditRequest to JSON.\n     * @function toJSON\n     * @memberof CommentEditRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentEditRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentEditRequest;\n})();\n\n$root.CommentCreateResponse = (function() {\n\n    /**\n     * Properties of a CommentCreateResponse.\n     * @exports ICommentCreateResponse\n     * @interface ICommentCreateResponse\n     * @property {number|null} [commentId] CommentCreateResponse commentId\n     * @property {string|null} [commentuId] CommentCreateResponse commentuId\n     */\n\n    /**\n     * Constructs a new CommentCreateResponse.\n     * @exports CommentCreateResponse\n     * @classdesc Represents a CommentCreateResponse.\n     * @implements ICommentCreateResponse\n     * @constructor\n     * @param {ICommentCreateResponse=} [properties] Properties to set\n     */\n    function CommentCreateResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentCreateResponse commentId.\n     * @member {number} commentId\n     * @memberof CommentCreateResponse\n     * @instance\n     */\n    CommentCreateResponse.prototype.commentId = 0;\n\n    /**\n     * CommentCreateResponse commentuId.\n     * @member {string} commentuId\n     * @memberof CommentCreateResponse\n     * @instance\n     */\n    CommentCreateResponse.prototype.commentuId = \"\";\n\n    /**\n     * Creates a new CommentCreateResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {ICommentCreateResponse=} [properties] Properties to set\n     * @returns {CommentCreateResponse} CommentCreateResponse instance\n     */\n    CommentCreateResponse.create = function create(properties) {\n        return new CommentCreateResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentCreateResponse message. Does not implicitly {@link CommentCreateResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {ICommentCreateResponse} message CommentCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.commentId != null && Object.hasOwnProperty.call(message, \"commentId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.commentId);\n        if (message.commentuId != null && Object.hasOwnProperty.call(message, \"commentuId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.commentuId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentCreateResponse message, length delimited. Does not implicitly {@link CommentCreateResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {ICommentCreateResponse} message CommentCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentCreateResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentCreateResponse} CommentCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentCreateResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.commentId = reader.uint32();\n                break;\n            case 2:\n                message.commentuId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentCreateResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentCreateResponse} CommentCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentCreateResponse message.\n     * @function verify\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentCreateResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            if (!$util.isInteger(message.commentId))\n                return \"commentId: integer expected\";\n        if (message.commentuId != null && message.hasOwnProperty(\"commentuId\"))\n            if (!$util.isString(message.commentuId))\n                return \"commentuId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentCreateResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentCreateResponse} CommentCreateResponse\n     */\n    CommentCreateResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentCreateResponse)\n            return object;\n        var message = new $root.CommentCreateResponse();\n        if (object.commentId != null)\n            message.commentId = object.commentId >>> 0;\n        if (object.commentuId != null)\n            message.commentuId = String(object.commentuId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentCreateResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {CommentCreateResponse} message CommentCreateResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentCreateResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.commentId = 0;\n            object.commentuId = \"\";\n        }\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            object.commentId = message.commentId;\n        if (message.commentuId != null && message.hasOwnProperty(\"commentuId\"))\n            object.commentuId = message.commentuId;\n        return object;\n    };\n\n    /**\n     * Converts this CommentCreateResponse to JSON.\n     * @function toJSON\n     * @memberof CommentCreateResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentCreateResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentCreateResponse;\n})();\n\n$root.CommentCreateRequest = (function() {\n\n    /**\n     * Properties of a CommentCreateRequest.\n     * @exports ICommentCreateRequest\n     * @interface ICommentCreateRequest\n     * @property {string|null} [threadId] CommentCreateRequest threadId\n     * @property {IComment|null} [comment] CommentCreateRequest comment\n     */\n\n    /**\n     * Constructs a new CommentCreateRequest.\n     * @exports CommentCreateRequest\n     * @classdesc Represents a CommentCreateRequest.\n     * @implements ICommentCreateRequest\n     * @constructor\n     * @param {ICommentCreateRequest=} [properties] Properties to set\n     */\n    function CommentCreateRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentCreateRequest threadId.\n     * @member {string} threadId\n     * @memberof CommentCreateRequest\n     * @instance\n     */\n    CommentCreateRequest.prototype.threadId = \"\";\n\n    /**\n     * CommentCreateRequest comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentCreateRequest\n     * @instance\n     */\n    CommentCreateRequest.prototype.comment = null;\n\n    /**\n     * Creates a new CommentCreateRequest instance using the specified properties.\n     * @function create\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {ICommentCreateRequest=} [properties] Properties to set\n     * @returns {CommentCreateRequest} CommentCreateRequest instance\n     */\n    CommentCreateRequest.create = function create(properties) {\n        return new CommentCreateRequest(properties);\n    };\n\n    /**\n     * Encodes the specified CommentCreateRequest message. Does not implicitly {@link CommentCreateRequest.verify|verify} messages.\n     * @function encode\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {ICommentCreateRequest} message CommentCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.threadId);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentCreateRequest message, length delimited. Does not implicitly {@link CommentCreateRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {ICommentCreateRequest} message CommentCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentCreateRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentCreateRequest} CommentCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentCreateRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threadId = reader.string();\n                break;\n            case 3:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentCreateRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentCreateRequest} CommentCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentCreateRequest message.\n     * @function verify\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentCreateRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommentCreateRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentCreateRequest} CommentCreateRequest\n     */\n    CommentCreateRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentCreateRequest)\n            return object;\n        var message = new $root.CommentCreateRequest();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentCreateRequest.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentCreateRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {CommentCreateRequest} message CommentCreateRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentCreateRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.threadId = \"\";\n            object.comment = null;\n        }\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        return object;\n    };\n\n    /**\n     * Converts this CommentCreateRequest to JSON.\n     * @function toJSON\n     * @memberof CommentCreateRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentCreateRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentCreateRequest;\n})();\n\n$root.CommentNode = (function() {\n\n    /**\n     * Properties of a CommentNode.\n     * @exports ICommentNode\n     * @interface ICommentNode\n     * @property {IComment|null} [comment] CommentNode comment\n     * @property {boolean|null} [clipped] CommentNode clipped\n     * @property {Object.<string,ICommentNode>|null} [children] CommentNode children\n     */\n\n    /**\n     * Constructs a new CommentNode.\n     * @exports CommentNode\n     * @classdesc Represents a CommentNode.\n     * @implements ICommentNode\n     * @constructor\n     * @param {ICommentNode=} [properties] Properties to set\n     */\n    function CommentNode(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentNode comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentNode\n     * @instance\n     */\n    CommentNode.prototype.comment = null;\n\n    /**\n     * CommentNode clipped.\n     * @member {boolean} clipped\n     * @memberof CommentNode\n     * @instance\n     */\n    CommentNode.prototype.clipped = false;\n\n    /**\n     * CommentNode children.\n     * @member {Object.<string,ICommentNode>} children\n     * @memberof CommentNode\n     * @instance\n     */\n    CommentNode.prototype.children = $util.emptyObject;\n\n    /**\n     * Creates a new CommentNode instance using the specified properties.\n     * @function create\n     * @memberof CommentNode\n     * @static\n     * @param {ICommentNode=} [properties] Properties to set\n     * @returns {CommentNode} CommentNode instance\n     */\n    CommentNode.create = function create(properties) {\n        return new CommentNode(properties);\n    };\n\n    /**\n     * Encodes the specified CommentNode message. Does not implicitly {@link CommentNode.verify|verify} messages.\n     * @function encode\n     * @memberof CommentNode\n     * @static\n     * @param {ICommentNode} message CommentNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentNode.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.CommentNode.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.clipped != null && Object.hasOwnProperty.call(message, \"clipped\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.clipped);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentNode message, length delimited. Does not implicitly {@link CommentNode.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentNode\n     * @static\n     * @param {ICommentNode} message CommentNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentNode} CommentNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentNode(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.clipped = reader.bool();\n                break;\n            case 2:\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = null;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = $root.CommentNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.children[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentNode message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentNode} CommentNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentNode message.\n     * @function verify\n     * @memberof CommentNode\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        if (message.clipped != null && message.hasOwnProperty(\"clipped\"))\n            if (typeof message.clipped !== \"boolean\")\n                return \"clipped: boolean expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.CommentNode.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommentNode message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentNode\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentNode} CommentNode\n     */\n    CommentNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentNode)\n            return object;\n        var message = new $root.CommentNode();\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentNode.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        if (object.clipped != null)\n            message.clipped = Boolean(object.clipped);\n        if (object.children) {\n            if (typeof object.children !== \"object\")\n                throw TypeError(\".CommentNode.children: object expected\");\n            message.children = {};\n            for (var keys = Object.keys(object.children), i = 0; i < keys.length; ++i) {\n                if (typeof object.children[keys[i]] !== \"object\")\n                    throw TypeError(\".CommentNode.children: object expected\");\n                message.children[keys[i]] = $root.CommentNode.fromObject(object.children[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentNode\n     * @static\n     * @param {CommentNode} message CommentNode\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentNode.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            object.comment = null;\n            object.clipped = false;\n        }\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.CommentNode.toObject(message.children[keys2[j]], options);\n        }\n        if (message.clipped != null && message.hasOwnProperty(\"clipped\"))\n            object.clipped = message.clipped;\n        return object;\n    };\n\n    /**\n     * Converts this CommentNode to JSON.\n     * @function toJSON\n     * @memberof CommentNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentNode;\n})();\n\n$root.CommentSelectResponse = (function() {\n\n    /**\n     * Properties of a CommentSelectResponse.\n     * @exports ICommentSelectResponse\n     * @interface ICommentSelectResponse\n     * @property {Array.<IComment>|null} [data] CommentSelectResponse data\n     * @property {string|null} [token] CommentSelectResponse token\n     */\n\n    /**\n     * Constructs a new CommentSelectResponse.\n     * @exports CommentSelectResponse\n     * @classdesc Represents a CommentSelectResponse.\n     * @implements ICommentSelectResponse\n     * @constructor\n     * @param {ICommentSelectResponse=} [properties] Properties to set\n     */\n    function CommentSelectResponse(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectResponse data.\n     * @member {Array.<IComment>} data\n     * @memberof CommentSelectResponse\n     * @instance\n     */\n    CommentSelectResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * CommentSelectResponse token.\n     * @member {string} token\n     * @memberof CommentSelectResponse\n     * @instance\n     */\n    CommentSelectResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {ICommentSelectResponse=} [properties] Properties to set\n     * @returns {CommentSelectResponse} CommentSelectResponse instance\n     */\n    CommentSelectResponse.create = function create(properties) {\n        return new CommentSelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectResponse message. Does not implicitly {@link CommentSelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {ICommentSelectResponse} message CommentSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Comment.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectResponse message, length delimited. Does not implicitly {@link CommentSelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {ICommentSelectResponse} message CommentSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectResponse} CommentSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Comment.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectResponse} CommentSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectResponse message.\n     * @function verify\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Comment.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectResponse} CommentSelectResponse\n     */\n    CommentSelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectResponse)\n            return object;\n        var message = new $root.CommentSelectResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".CommentSelectResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".CommentSelectResponse.data: object expected\");\n                message.data[i] = $root.Comment.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {CommentSelectResponse} message CommentSelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Comment.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectResponse to JSON.\n     * @function toJSON\n     * @memberof CommentSelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentSelectResponse;\n})();\n\n$root.CommentSelectGraphResponse = (function() {\n\n    /**\n     * Properties of a CommentSelectGraphResponse.\n     * @exports ICommentSelectGraphResponse\n     * @interface ICommentSelectGraphResponse\n     * @property {Object.<string,ICommentNode>|null} [data] CommentSelectGraphResponse data\n     * @property {string|null} [token] CommentSelectGraphResponse token\n     */\n\n    /**\n     * Constructs a new CommentSelectGraphResponse.\n     * @exports CommentSelectGraphResponse\n     * @classdesc Represents a CommentSelectGraphResponse.\n     * @implements ICommentSelectGraphResponse\n     * @constructor\n     * @param {ICommentSelectGraphResponse=} [properties] Properties to set\n     */\n    function CommentSelectGraphResponse(properties) {\n        this.data = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectGraphResponse data.\n     * @member {Object.<string,ICommentNode>} data\n     * @memberof CommentSelectGraphResponse\n     * @instance\n     */\n    CommentSelectGraphResponse.prototype.data = $util.emptyObject;\n\n    /**\n     * CommentSelectGraphResponse token.\n     * @member {string} token\n     * @memberof CommentSelectGraphResponse\n     * @instance\n     */\n    CommentSelectGraphResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectGraphResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {ICommentSelectGraphResponse=} [properties] Properties to set\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse instance\n     */\n    CommentSelectGraphResponse.create = function create(properties) {\n        return new CommentSelectGraphResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectGraphResponse message. Does not implicitly {@link CommentSelectGraphResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {ICommentSelectGraphResponse} message CommentSelectGraphResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectGraphResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            for (var keys = Object.keys(message.data), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.CommentNode.encode(message.data[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectGraphResponse message, length delimited. Does not implicitly {@link CommentSelectGraphResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {ICommentSelectGraphResponse} message CommentSelectGraphResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectGraphResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectGraphResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectGraphResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectGraphResponse(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (message.data === $util.emptyObject)\n                    message.data = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = null;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = $root.CommentNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.data[key] = value;\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectGraphResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectGraphResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectGraphResponse message.\n     * @function verify\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectGraphResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!$util.isObject(message.data))\n                return \"data: object expected\";\n            var key = Object.keys(message.data);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.CommentNode.verify(message.data[key[i]]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectGraphResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse\n     */\n    CommentSelectGraphResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectGraphResponse)\n            return object;\n        var message = new $root.CommentSelectGraphResponse();\n        if (object.data) {\n            if (typeof object.data !== \"object\")\n                throw TypeError(\".CommentSelectGraphResponse.data: object expected\");\n            message.data = {};\n            for (var keys = Object.keys(object.data), i = 0; i < keys.length; ++i) {\n                if (typeof object.data[keys[i]] !== \"object\")\n                    throw TypeError(\".CommentSelectGraphResponse.data: object expected\");\n                message.data[keys[i]] = $root.CommentNode.fromObject(object.data[keys[i]]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectGraphResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {CommentSelectGraphResponse} message CommentSelectGraphResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectGraphResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.data = {};\n        if (options.defaults)\n            object.token = \"\";\n        var keys2;\n        if (message.data && (keys2 = Object.keys(message.data)).length) {\n            object.data = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.data[keys2[j]] = $root.CommentNode.toObject(message.data[keys2[j]], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectGraphResponse to JSON.\n     * @function toJSON\n     * @memberof CommentSelectGraphResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectGraphResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentSelectGraphResponse;\n})();\n\n$root.CommentSelectHistoryResponse = (function() {\n\n    /**\n     * Properties of a CommentSelectHistoryResponse.\n     * @exports ICommentSelectHistoryResponse\n     * @interface ICommentSelectHistoryResponse\n     * @property {Array.<IComment>|null} [data] CommentSelectHistoryResponse data\n     * @property {string|null} [token] CommentSelectHistoryResponse token\n     */\n\n    /**\n     * Constructs a new CommentSelectHistoryResponse.\n     * @exports CommentSelectHistoryResponse\n     * @classdesc Represents a CommentSelectHistoryResponse.\n     * @implements ICommentSelectHistoryResponse\n     * @constructor\n     * @param {ICommentSelectHistoryResponse=} [properties] Properties to set\n     */\n    function CommentSelectHistoryResponse(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectHistoryResponse data.\n     * @member {Array.<IComment>} data\n     * @memberof CommentSelectHistoryResponse\n     * @instance\n     */\n    CommentSelectHistoryResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * CommentSelectHistoryResponse token.\n     * @member {string} token\n     * @memberof CommentSelectHistoryResponse\n     * @instance\n     */\n    CommentSelectHistoryResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectHistoryResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {ICommentSelectHistoryResponse=} [properties] Properties to set\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse instance\n     */\n    CommentSelectHistoryResponse.create = function create(properties) {\n        return new CommentSelectHistoryResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectHistoryResponse message. Does not implicitly {@link CommentSelectHistoryResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {ICommentSelectHistoryResponse} message CommentSelectHistoryResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectHistoryResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Comment.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectHistoryResponse message, length delimited. Does not implicitly {@link CommentSelectHistoryResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {ICommentSelectHistoryResponse} message CommentSelectHistoryResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectHistoryResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectHistoryResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectHistoryResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectHistoryResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Comment.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectHistoryResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectHistoryResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectHistoryResponse message.\n     * @function verify\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectHistoryResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Comment.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectHistoryResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse\n     */\n    CommentSelectHistoryResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectHistoryResponse)\n            return object;\n        var message = new $root.CommentSelectHistoryResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".CommentSelectHistoryResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".CommentSelectHistoryResponse.data: object expected\");\n                message.data[i] = $root.Comment.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectHistoryResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {CommentSelectHistoryResponse} message CommentSelectHistoryResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectHistoryResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Comment.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectHistoryResponse to JSON.\n     * @function toJSON\n     * @memberof CommentSelectHistoryResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectHistoryResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentSelectHistoryResponse;\n})();\n\n$root.Comment = (function() {\n\n    /**\n     * Properties of a Comment.\n     * @exports IComment\n     * @interface IComment\n     * @property {string|null} [uId] Comment uId\n     * @property {string|null} [parentId] Comment parentId\n     * @property {ICommunityUserRef|null} [user] Comment user\n     * @property {string|null} [content] Comment content\n     * @property {number|null} [createdAt] Comment createdAt\n     * @property {Array.<IComment>|null} [commentEdits] Comment commentEdits\n     * @property {Array.<IBanInfo>|null} [mod] Comment mod\n     * @property {Object.<string,number>|null} [votes] Comment votes\n     * @property {ICommentActionedContext|null} [me] Comment me\n     * @property {number|null} [unhandledReports] Comment unhandledReports\n     * @property {number|null} [reports] Comment reports\n     * @property {number|null} [depth] Comment depth\n     * @property {number|null} [children] Comment children\n     */\n\n    /**\n     * Constructs a new Comment.\n     * @exports Comment\n     * @classdesc Represents a Comment.\n     * @implements IComment\n     * @constructor\n     * @param {IComment=} [properties] Properties to set\n     */\n    function Comment(properties) {\n        this.commentEdits = [];\n        this.mod = [];\n        this.votes = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Comment uId.\n     * @member {string} uId\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.uId = \"\";\n\n    /**\n     * Comment parentId.\n     * @member {string} parentId\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.parentId = \"\";\n\n    /**\n     * Comment user.\n     * @member {ICommunityUserRef|null|undefined} user\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.user = null;\n\n    /**\n     * Comment content.\n     * @member {string} content\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.content = \"\";\n\n    /**\n     * Comment createdAt.\n     * @member {number} createdAt\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Comment commentEdits.\n     * @member {Array.<IComment>} commentEdits\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.commentEdits = $util.emptyArray;\n\n    /**\n     * Comment mod.\n     * @member {Array.<IBanInfo>} mod\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.mod = $util.emptyArray;\n\n    /**\n     * Comment votes.\n     * @member {Object.<string,number>} votes\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.votes = $util.emptyObject;\n\n    /**\n     * Comment me.\n     * @member {ICommentActionedContext|null|undefined} me\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.me = null;\n\n    /**\n     * Comment unhandledReports.\n     * @member {number} unhandledReports\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.unhandledReports = 0;\n\n    /**\n     * Comment reports.\n     * @member {number} reports\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.reports = 0;\n\n    /**\n     * Comment depth.\n     * @member {number} depth\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.depth = 0;\n\n    /**\n     * Comment children.\n     * @member {number} children\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.children = 0;\n\n    /**\n     * Creates a new Comment instance using the specified properties.\n     * @function create\n     * @memberof Comment\n     * @static\n     * @param {IComment=} [properties] Properties to set\n     * @returns {Comment} Comment instance\n     */\n    Comment.create = function create(properties) {\n        return new Comment(properties);\n    };\n\n    /**\n     * Encodes the specified Comment message. Does not implicitly {@link Comment.verify|verify} messages.\n     * @function encode\n     * @memberof Comment\n     * @static\n     * @param {IComment} message Comment message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Comment.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uId);\n        if (message.parentId != null && Object.hasOwnProperty.call(message, \"parentId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.parentId);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.CommunityUserRef.encode(message.user, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createdAt);\n        if (message.commentEdits != null && message.commentEdits.length)\n            for (var i = 0; i < message.commentEdits.length; ++i)\n                $root.Comment.encode(message.commentEdits[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.mod != null && message.mod.length)\n            for (var i = 0; i < message.mod.length; ++i)\n                $root.BanInfo.encode(message.mod[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            for (var keys = Object.keys(message.votes), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.votes[keys[i]]).ldelim();\n        if (message.me != null && Object.hasOwnProperty.call(message, \"me\"))\n            $root.CommentActionedContext.encode(message.me, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.unhandledReports != null && Object.hasOwnProperty.call(message, \"unhandledReports\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.unhandledReports);\n        if (message.reports != null && Object.hasOwnProperty.call(message, \"reports\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.reports);\n        if (message.depth != null && Object.hasOwnProperty.call(message, \"depth\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.depth);\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.children);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Comment message, length delimited. Does not implicitly {@link Comment.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Comment\n     * @static\n     * @param {IComment} message Comment message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Comment.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Comment message from the specified reader or buffer.\n     * @function decode\n     * @memberof Comment\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Comment} Comment\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Comment.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Comment(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uId = reader.string();\n                break;\n            case 2:\n                message.parentId = reader.string();\n                break;\n            case 3:\n                message.user = $root.CommunityUserRef.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.content = reader.string();\n                break;\n            case 5:\n                message.createdAt = reader.int64();\n                break;\n            case 6:\n                if (!(message.commentEdits && message.commentEdits.length))\n                    message.commentEdits = [];\n                message.commentEdits.push($root.Comment.decode(reader, reader.uint32()));\n                break;\n            case 7:\n                if (!(message.mod && message.mod.length))\n                    message.mod = [];\n                message.mod.push($root.BanInfo.decode(reader, reader.uint32()));\n                break;\n            case 8:\n                if (message.votes === $util.emptyObject)\n                    message.votes = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.votes[key] = value;\n                break;\n            case 9:\n                message.me = $root.CommentActionedContext.decode(reader, reader.uint32());\n                break;\n            case 10:\n                message.unhandledReports = reader.int32();\n                break;\n            case 11:\n                message.reports = reader.int32();\n                break;\n            case 12:\n                message.depth = reader.int32();\n                break;\n            case 13:\n                message.children = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Comment message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Comment\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Comment} Comment\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Comment.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Comment message.\n     * @function verify\n     * @memberof Comment\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Comment.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            if (!$util.isString(message.parentId))\n                return \"parentId: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.CommunityUserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.commentEdits != null && message.hasOwnProperty(\"commentEdits\")) {\n            if (!Array.isArray(message.commentEdits))\n                return \"commentEdits: array expected\";\n            for (var i = 0; i < message.commentEdits.length; ++i) {\n                var error = $root.Comment.verify(message.commentEdits[i]);\n                if (error)\n                    return \"commentEdits.\" + error;\n            }\n        }\n        if (message.mod != null && message.hasOwnProperty(\"mod\")) {\n            if (!Array.isArray(message.mod))\n                return \"mod: array expected\";\n            for (var i = 0; i < message.mod.length; ++i) {\n                var error = $root.BanInfo.verify(message.mod[i]);\n                if (error)\n                    return \"mod.\" + error;\n            }\n        }\n        if (message.votes != null && message.hasOwnProperty(\"votes\")) {\n            if (!$util.isObject(message.votes))\n                return \"votes: object expected\";\n            var key = Object.keys(message.votes);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.votes[key[i]]))\n                    return \"votes: integer{k:string} expected\";\n        }\n        if (message.me != null && message.hasOwnProperty(\"me\")) {\n            var error = $root.CommentActionedContext.verify(message.me);\n            if (error)\n                return \"me.\" + error;\n        }\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            if (!$util.isInteger(message.unhandledReports))\n                return \"unhandledReports: integer expected\";\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            if (!$util.isInteger(message.reports))\n                return \"reports: integer expected\";\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            if (!$util.isInteger(message.depth))\n                return \"depth: integer expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\"))\n            if (!$util.isInteger(message.children))\n                return \"children: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Comment message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Comment\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Comment} Comment\n     */\n    Comment.fromObject = function fromObject(object) {\n        if (object instanceof $root.Comment)\n            return object;\n        var message = new $root.Comment();\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.parentId != null)\n            message.parentId = String(object.parentId);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".Comment.user: object expected\");\n            message.user = $root.CommunityUserRef.fromObject(object.user);\n        }\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.commentEdits) {\n            if (!Array.isArray(object.commentEdits))\n                throw TypeError(\".Comment.commentEdits: array expected\");\n            message.commentEdits = [];\n            for (var i = 0; i < object.commentEdits.length; ++i) {\n                if (typeof object.commentEdits[i] !== \"object\")\n                    throw TypeError(\".Comment.commentEdits: object expected\");\n                message.commentEdits[i] = $root.Comment.fromObject(object.commentEdits[i]);\n            }\n        }\n        if (object.mod) {\n            if (!Array.isArray(object.mod))\n                throw TypeError(\".Comment.mod: array expected\");\n            message.mod = [];\n            for (var i = 0; i < object.mod.length; ++i) {\n                if (typeof object.mod[i] !== \"object\")\n                    throw TypeError(\".Comment.mod: object expected\");\n                message.mod[i] = $root.BanInfo.fromObject(object.mod[i]);\n            }\n        }\n        if (object.votes) {\n            if (typeof object.votes !== \"object\")\n                throw TypeError(\".Comment.votes: object expected\");\n            message.votes = {};\n            for (var keys = Object.keys(object.votes), i = 0; i < keys.length; ++i)\n                message.votes[keys[i]] = object.votes[keys[i]] | 0;\n        }\n        if (object.me != null) {\n            if (typeof object.me !== \"object\")\n                throw TypeError(\".Comment.me: object expected\");\n            message.me = $root.CommentActionedContext.fromObject(object.me);\n        }\n        if (object.unhandledReports != null)\n            message.unhandledReports = object.unhandledReports | 0;\n        if (object.reports != null)\n            message.reports = object.reports | 0;\n        if (object.depth != null)\n            message.depth = object.depth | 0;\n        if (object.children != null)\n            message.children = object.children >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Comment message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Comment\n     * @static\n     * @param {Comment} message Comment\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Comment.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.commentEdits = [];\n            object.mod = [];\n        }\n        if (options.objects || options.defaults)\n            object.votes = {};\n        if (options.defaults) {\n            object.uId = \"\";\n            object.parentId = \"\";\n            object.user = null;\n            object.content = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.me = null;\n            object.unhandledReports = 0;\n            object.reports = 0;\n            object.depth = 0;\n            object.children = 0;\n        }\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            object.parentId = message.parentId;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.CommunityUserRef.toObject(message.user, options);\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.commentEdits && message.commentEdits.length) {\n            object.commentEdits = [];\n            for (var j = 0; j < message.commentEdits.length; ++j)\n                object.commentEdits[j] = $root.Comment.toObject(message.commentEdits[j], options);\n        }\n        if (message.mod && message.mod.length) {\n            object.mod = [];\n            for (var j = 0; j < message.mod.length; ++j)\n                object.mod[j] = $root.BanInfo.toObject(message.mod[j], options);\n        }\n        var keys2;\n        if (message.votes && (keys2 = Object.keys(message.votes)).length) {\n            object.votes = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.votes[keys2[j]] = message.votes[keys2[j]];\n        }\n        if (message.me != null && message.hasOwnProperty(\"me\"))\n            object.me = $root.CommentActionedContext.toObject(message.me, options);\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            object.unhandledReports = message.unhandledReports;\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            object.reports = message.reports;\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            object.depth = message.depth;\n        if (message.children != null && message.hasOwnProperty(\"children\"))\n            object.children = message.children;\n        return object;\n    };\n\n    /**\n     * Converts this Comment to JSON.\n     * @function toJSON\n     * @memberof Comment\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Comment.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Comment;\n})();\n\n$root.CommentSelectFilters = (function() {\n\n    /**\n     * Properties of a CommentSelectFilters.\n     * @exports ICommentSelectFilters\n     * @interface ICommentSelectFilters\n     * @property {CommentSelectFilters.Method|null} [rankMethod] CommentSelectFilters rankMethod\n     * @property {CommentSelectFilters.SortDirection|null} [sortDirection] CommentSelectFilters sortDirection\n     * @property {string|null} [parentId] CommentSelectFilters parentId\n     * @property {string|null} [token] CommentSelectFilters token\n     */\n\n    /**\n     * Constructs a new CommentSelectFilters.\n     * @exports CommentSelectFilters\n     * @classdesc Represents a CommentSelectFilters.\n     * @implements ICommentSelectFilters\n     * @constructor\n     * @param {ICommentSelectFilters=} [properties] Properties to set\n     */\n    function CommentSelectFilters(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectFilters rankMethod.\n     * @member {CommentSelectFilters.Method} rankMethod\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.rankMethod = 0;\n\n    /**\n     * CommentSelectFilters sortDirection.\n     * @member {CommentSelectFilters.SortDirection} sortDirection\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.sortDirection = 0;\n\n    /**\n     * CommentSelectFilters parentId.\n     * @member {string} parentId\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.parentId = \"\";\n\n    /**\n     * CommentSelectFilters token.\n     * @member {string} token\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectFilters instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {ICommentSelectFilters=} [properties] Properties to set\n     * @returns {CommentSelectFilters} CommentSelectFilters instance\n     */\n    CommentSelectFilters.create = function create(properties) {\n        return new CommentSelectFilters(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectFilters message. Does not implicitly {@link CommentSelectFilters.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {ICommentSelectFilters} message CommentSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectFilters.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rankMethod != null && Object.hasOwnProperty.call(message, \"rankMethod\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rankMethod);\n        if (message.sortDirection != null && Object.hasOwnProperty.call(message, \"sortDirection\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sortDirection);\n        if (message.parentId != null && Object.hasOwnProperty.call(message, \"parentId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.parentId);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectFilters message, length delimited. Does not implicitly {@link CommentSelectFilters.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {ICommentSelectFilters} message CommentSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectFilters.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectFilters message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectFilters} CommentSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectFilters.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectFilters();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rankMethod = reader.int32();\n                break;\n            case 2:\n                message.sortDirection = reader.int32();\n                break;\n            case 3:\n                message.parentId = reader.string();\n                break;\n            case 4:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectFilters message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectFilters} CommentSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectFilters.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectFilters message.\n     * @function verify\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectFilters.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            switch (message.rankMethod) {\n            default:\n                return \"rankMethod: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n                break;\n            }\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            switch (message.sortDirection) {\n            default:\n                return \"sortDirection: enum value expected\";\n            case 0:\n            case 1:\n                break;\n            }\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            if (!$util.isString(message.parentId))\n                return \"parentId: string expected\";\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectFilters message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectFilters} CommentSelectFilters\n     */\n    CommentSelectFilters.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectFilters)\n            return object;\n        var message = new $root.CommentSelectFilters();\n        switch (object.rankMethod) {\n        case \"BEST\":\n        case 0:\n            message.rankMethod = 0;\n            break;\n        case \"CONTROVERSIAL\":\n        case 1:\n            message.rankMethod = 1;\n            break;\n        case \"DATE\":\n        case 2:\n            message.rankMethod = 2;\n            break;\n        }\n        switch (object.sortDirection) {\n        case \"DESC\":\n        case 0:\n            message.sortDirection = 0;\n            break;\n        case \"ASC\":\n        case 1:\n            message.sortDirection = 1;\n            break;\n        }\n        if (object.parentId != null)\n            message.parentId = String(object.parentId);\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectFilters message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {CommentSelectFilters} message CommentSelectFilters\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectFilters.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.rankMethod = options.enums === String ? \"BEST\" : 0;\n            object.sortDirection = options.enums === String ? \"DESC\" : 0;\n            object.parentId = \"\";\n            object.token = \"\";\n        }\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            object.rankMethod = options.enums === String ? $root.CommentSelectFilters.Method[message.rankMethod] : message.rankMethod;\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            object.sortDirection = options.enums === String ? $root.CommentSelectFilters.SortDirection[message.sortDirection] : message.sortDirection;\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            object.parentId = message.parentId;\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectFilters to JSON.\n     * @function toJSON\n     * @memberof CommentSelectFilters\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectFilters.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Method enum.\n     * @name CommentSelectFilters.Method\n     * @enum {number}\n     * @property {number} BEST=0 BEST value\n     * @property {number} CONTROVERSIAL=1 CONTROVERSIAL value\n     * @property {number} DATE=2 DATE value\n     */\n    CommentSelectFilters.Method = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"BEST\"] = 0;\n        values[valuesById[1] = \"CONTROVERSIAL\"] = 1;\n        values[valuesById[2] = \"DATE\"] = 2;\n        return values;\n    })();\n\n    /**\n     * SortDirection enum.\n     * @name CommentSelectFilters.SortDirection\n     * @enum {number}\n     * @property {number} DESC=0 DESC value\n     * @property {number} ASC=1 ASC value\n     */\n    CommentSelectFilters.SortDirection = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"DESC\"] = 0;\n        values[valuesById[1] = \"ASC\"] = 1;\n        return values;\n    })();\n\n    return CommentSelectFilters;\n})();\n\n$root.ReportsSelectResponse = (function() {\n\n    /**\n     * Properties of a ReportsSelectResponse.\n     * @exports IReportsSelectResponse\n     * @interface IReportsSelectResponse\n     * @property {Array.<IReportInfo>|null} [reports] ReportsSelectResponse reports\n     * @property {string|null} [token] ReportsSelectResponse token\n     */\n\n    /**\n     * Constructs a new ReportsSelectResponse.\n     * @exports ReportsSelectResponse\n     * @classdesc Represents a ReportsSelectResponse.\n     * @implements IReportsSelectResponse\n     * @constructor\n     * @param {IReportsSelectResponse=} [properties] Properties to set\n     */\n    function ReportsSelectResponse(properties) {\n        this.reports = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportsSelectResponse reports.\n     * @member {Array.<IReportInfo>} reports\n     * @memberof ReportsSelectResponse\n     * @instance\n     */\n    ReportsSelectResponse.prototype.reports = $util.emptyArray;\n\n    /**\n     * ReportsSelectResponse token.\n     * @member {string} token\n     * @memberof ReportsSelectResponse\n     * @instance\n     */\n    ReportsSelectResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new ReportsSelectResponse instance using the specified properties.\n     * @function create\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {IReportsSelectResponse=} [properties] Properties to set\n     * @returns {ReportsSelectResponse} ReportsSelectResponse instance\n     */\n    ReportsSelectResponse.create = function create(properties) {\n        return new ReportsSelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified ReportsSelectResponse message. Does not implicitly {@link ReportsSelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {IReportsSelectResponse} message ReportsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportsSelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.reports != null && message.reports.length)\n            for (var i = 0; i < message.reports.length; ++i)\n                $root.ReportInfo.encode(message.reports[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportsSelectResponse message, length delimited. Does not implicitly {@link ReportsSelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {IReportsSelectResponse} message ReportsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportsSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportsSelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportsSelectResponse} ReportsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportsSelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportsSelectResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.reports && message.reports.length))\n                    message.reports = [];\n                message.reports.push($root.ReportInfo.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportsSelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportsSelectResponse} ReportsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportsSelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportsSelectResponse message.\n     * @function verify\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportsSelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.reports != null && message.hasOwnProperty(\"reports\")) {\n            if (!Array.isArray(message.reports))\n                return \"reports: array expected\";\n            for (var i = 0; i < message.reports.length; ++i) {\n                var error = $root.ReportInfo.verify(message.reports[i]);\n                if (error)\n                    return \"reports.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReportsSelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReportsSelectResponse} ReportsSelectResponse\n     */\n    ReportsSelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReportsSelectResponse)\n            return object;\n        var message = new $root.ReportsSelectResponse();\n        if (object.reports) {\n            if (!Array.isArray(object.reports))\n                throw TypeError(\".ReportsSelectResponse.reports: array expected\");\n            message.reports = [];\n            for (var i = 0; i < object.reports.length; ++i) {\n                if (typeof object.reports[i] !== \"object\")\n                    throw TypeError(\".ReportsSelectResponse.reports: object expected\");\n                message.reports[i] = $root.ReportInfo.fromObject(object.reports[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReportsSelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {ReportsSelectResponse} message ReportsSelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportsSelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.reports = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.reports && message.reports.length) {\n            object.reports = [];\n            for (var j = 0; j < message.reports.length; ++j)\n                object.reports[j] = $root.ReportInfo.toObject(message.reports[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this ReportsSelectResponse to JSON.\n     * @function toJSON\n     * @memberof ReportsSelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportsSelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportsSelectResponse;\n})();\n\n$root.CommunitySelectRequest = (function() {\n\n    /**\n     * Properties of a CommunitySelectRequest.\n     * @exports ICommunitySelectRequest\n     * @interface ICommunitySelectRequest\n     * @property {string|null} [query] CommunitySelectRequest query\n     * @property {number|null} [limit] CommunitySelectRequest limit\n     */\n\n    /**\n     * Constructs a new CommunitySelectRequest.\n     * @exports CommunitySelectRequest\n     * @classdesc Represents a CommunitySelectRequest.\n     * @implements ICommunitySelectRequest\n     * @constructor\n     * @param {ICommunitySelectRequest=} [properties] Properties to set\n     */\n    function CommunitySelectRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunitySelectRequest query.\n     * @member {string} query\n     * @memberof CommunitySelectRequest\n     * @instance\n     */\n    CommunitySelectRequest.prototype.query = \"\";\n\n    /**\n     * CommunitySelectRequest limit.\n     * @member {number} limit\n     * @memberof CommunitySelectRequest\n     * @instance\n     */\n    CommunitySelectRequest.prototype.limit = 0;\n\n    /**\n     * Creates a new CommunitySelectRequest instance using the specified properties.\n     * @function create\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {ICommunitySelectRequest=} [properties] Properties to set\n     * @returns {CommunitySelectRequest} CommunitySelectRequest instance\n     */\n    CommunitySelectRequest.create = function create(properties) {\n        return new CommunitySelectRequest(properties);\n    };\n\n    /**\n     * Encodes the specified CommunitySelectRequest message. Does not implicitly {@link CommunitySelectRequest.verify|verify} messages.\n     * @function encode\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {ICommunitySelectRequest} message CommunitySelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.query != null && Object.hasOwnProperty.call(message, \"query\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.query);\n        if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.limit);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunitySelectRequest message, length delimited. Does not implicitly {@link CommunitySelectRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {ICommunitySelectRequest} message CommunitySelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunitySelectRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunitySelectRequest} CommunitySelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunitySelectRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.query = reader.string();\n                break;\n            case 2:\n                message.limit = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunitySelectRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunitySelectRequest} CommunitySelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunitySelectRequest message.\n     * @function verify\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunitySelectRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            if (!$util.isString(message.query))\n                return \"query: string expected\";\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            if (!$util.isInteger(message.limit))\n                return \"limit: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommunitySelectRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunitySelectRequest} CommunitySelectRequest\n     */\n    CommunitySelectRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunitySelectRequest)\n            return object;\n        var message = new $root.CommunitySelectRequest();\n        if (object.query != null)\n            message.query = String(object.query);\n        if (object.limit != null)\n            message.limit = object.limit >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunitySelectRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {CommunitySelectRequest} message CommunitySelectRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunitySelectRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.query = \"\";\n            object.limit = 0;\n        }\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            object.query = message.query;\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            object.limit = message.limit;\n        return object;\n    };\n\n    /**\n     * Converts this CommunitySelectRequest to JSON.\n     * @function toJSON\n     * @memberof CommunitySelectRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunitySelectRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunitySelectRequest;\n})();\n\n$root.CommunitySelectResponse = (function() {\n\n    /**\n     * Properties of a CommunitySelectResponse.\n     * @exports ICommunitySelectResponse\n     * @interface ICommunitySelectResponse\n     * @property {Array.<IBoard>|null} [data] CommunitySelectResponse data\n     * @property {string|null} [token] CommunitySelectResponse token\n     */\n\n    /**\n     * Constructs a new CommunitySelectResponse.\n     * @exports CommunitySelectResponse\n     * @classdesc Represents a CommunitySelectResponse.\n     * @implements ICommunitySelectResponse\n     * @constructor\n     * @param {ICommunitySelectResponse=} [properties] Properties to set\n     */\n    function CommunitySelectResponse(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunitySelectResponse data.\n     * @member {Array.<IBoard>} data\n     * @memberof CommunitySelectResponse\n     * @instance\n     */\n    CommunitySelectResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * CommunitySelectResponse token.\n     * @member {string} token\n     * @memberof CommunitySelectResponse\n     * @instance\n     */\n    CommunitySelectResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommunitySelectResponse instance using the specified properties.\n     * @function create\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {ICommunitySelectResponse=} [properties] Properties to set\n     * @returns {CommunitySelectResponse} CommunitySelectResponse instance\n     */\n    CommunitySelectResponse.create = function create(properties) {\n        return new CommunitySelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommunitySelectResponse message. Does not implicitly {@link CommunitySelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {ICommunitySelectResponse} message CommunitySelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Board.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunitySelectResponse message, length delimited. Does not implicitly {@link CommunitySelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {ICommunitySelectResponse} message CommunitySelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunitySelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunitySelectResponse} CommunitySelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunitySelectResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Board.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunitySelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunitySelectResponse} CommunitySelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunitySelectResponse message.\n     * @function verify\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunitySelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Board.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommunitySelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunitySelectResponse} CommunitySelectResponse\n     */\n    CommunitySelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunitySelectResponse)\n            return object;\n        var message = new $root.CommunitySelectResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".CommunitySelectResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".CommunitySelectResponse.data: object expected\");\n                message.data[i] = $root.Board.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunitySelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {CommunitySelectResponse} message CommunitySelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunitySelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Board.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommunitySelectResponse to JSON.\n     * @function toJSON\n     * @memberof CommunitySelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunitySelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunitySelectResponse;\n})();\n\n$root.BoardSubscription = (function() {\n\n    /**\n     * Properties of a BoardSubscription.\n     * @exports IBoardSubscription\n     * @interface IBoardSubscription\n     * @property {string|null} [boardId] BoardSubscription boardId\n     * @property {boolean|null} [isMod] BoardSubscription isMod\n     * @property {boolean|null} [isOwner] BoardSubscription isOwner\n     * @property {string|null} [isBanned] BoardSubscription isBanned\n     * @property {number|null} [members] BoardSubscription members\n     * @property {string|null} [icon] BoardSubscription icon\n     * @property {number|null} [createdAt] BoardSubscription createdAt\n     */\n\n    /**\n     * Constructs a new BoardSubscription.\n     * @exports BoardSubscription\n     * @classdesc Represents a BoardSubscription.\n     * @implements IBoardSubscription\n     * @constructor\n     * @param {IBoardSubscription=} [properties] Properties to set\n     */\n    function BoardSubscription(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardSubscription boardId.\n     * @member {string} boardId\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.boardId = \"\";\n\n    /**\n     * BoardSubscription isMod.\n     * @member {boolean} isMod\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.isMod = false;\n\n    /**\n     * BoardSubscription isOwner.\n     * @member {boolean} isOwner\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.isOwner = false;\n\n    /**\n     * BoardSubscription isBanned.\n     * @member {string} isBanned\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.isBanned = \"\";\n\n    /**\n     * BoardSubscription members.\n     * @member {number} members\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.members = 0;\n\n    /**\n     * BoardSubscription icon.\n     * @member {string} icon\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.icon = \"\";\n\n    /**\n     * BoardSubscription createdAt.\n     * @member {number} createdAt\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new BoardSubscription instance using the specified properties.\n     * @function create\n     * @memberof BoardSubscription\n     * @static\n     * @param {IBoardSubscription=} [properties] Properties to set\n     * @returns {BoardSubscription} BoardSubscription instance\n     */\n    BoardSubscription.create = function create(properties) {\n        return new BoardSubscription(properties);\n    };\n\n    /**\n     * Encodes the specified BoardSubscription message. Does not implicitly {@link BoardSubscription.verify|verify} messages.\n     * @function encode\n     * @memberof BoardSubscription\n     * @static\n     * @param {IBoardSubscription} message BoardSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardSubscription.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.boardId);\n        if (message.isMod != null && Object.hasOwnProperty.call(message, \"isMod\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isMod);\n        if (message.isBanned != null && Object.hasOwnProperty.call(message, \"isBanned\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.isBanned);\n        if (message.members != null && Object.hasOwnProperty.call(message, \"members\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.members);\n        if (message.icon != null && Object.hasOwnProperty.call(message, \"icon\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createdAt);\n        if (message.isOwner != null && Object.hasOwnProperty.call(message, \"isOwner\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isOwner);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardSubscription message, length delimited. Does not implicitly {@link BoardSubscription.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardSubscription\n     * @static\n     * @param {IBoardSubscription} message BoardSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardSubscription.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardSubscription message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardSubscription} BoardSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardSubscription.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardSubscription();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.boardId = reader.string();\n                break;\n            case 2:\n                message.isMod = reader.bool();\n                break;\n            case 7:\n                message.isOwner = reader.bool();\n                break;\n            case 3:\n                message.isBanned = reader.string();\n                break;\n            case 4:\n                message.members = reader.uint32();\n                break;\n            case 5:\n                message.icon = reader.string();\n                break;\n            case 6:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardSubscription message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardSubscription} BoardSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardSubscription.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardSubscription message.\n     * @function verify\n     * @memberof BoardSubscription\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardSubscription.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            if (typeof message.isMod !== \"boolean\")\n                return \"isMod: boolean expected\";\n        if (message.isOwner != null && message.hasOwnProperty(\"isOwner\"))\n            if (typeof message.isOwner !== \"boolean\")\n                return \"isOwner: boolean expected\";\n        if (message.isBanned != null && message.hasOwnProperty(\"isBanned\"))\n            if (!$util.isString(message.isBanned))\n                return \"isBanned: string expected\";\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            if (!$util.isInteger(message.members))\n                return \"members: integer expected\";\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            if (!$util.isString(message.icon))\n                return \"icon: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardSubscription message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardSubscription\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardSubscription} BoardSubscription\n     */\n    BoardSubscription.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardSubscription)\n            return object;\n        var message = new $root.BoardSubscription();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.isMod != null)\n            message.isMod = Boolean(object.isMod);\n        if (object.isOwner != null)\n            message.isOwner = Boolean(object.isOwner);\n        if (object.isBanned != null)\n            message.isBanned = String(object.isBanned);\n        if (object.members != null)\n            message.members = object.members >>> 0;\n        if (object.icon != null)\n            message.icon = String(object.icon);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardSubscription message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardSubscription\n     * @static\n     * @param {BoardSubscription} message BoardSubscription\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardSubscription.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.boardId = \"\";\n            object.isMod = false;\n            object.isBanned = \"\";\n            object.members = 0;\n            object.icon = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.isOwner = false;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            object.isMod = message.isMod;\n        if (message.isBanned != null && message.hasOwnProperty(\"isBanned\"))\n            object.isBanned = message.isBanned;\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            object.members = message.members;\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            object.icon = message.icon;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.isOwner != null && message.hasOwnProperty(\"isOwner\"))\n            object.isOwner = message.isOwner;\n        return object;\n    };\n\n    /**\n     * Converts this BoardSubscription to JSON.\n     * @function toJSON\n     * @memberof BoardSubscription\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardSubscription.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardSubscription;\n})();\n\n$root.Board = (function() {\n\n    /**\n     * Properties of a Board.\n     * @exports IBoard\n     * @interface IBoard\n     * @property {string|null} [uId] Board uId\n     * @property {string|null} [title] Board title\n     * @property {string|null} [description] Board description\n     * @property {string|null} [icon] Board icon\n     * @property {string|null} [banner] Board banner\n     * @property {number|null} [members] Board members\n     * @property {number|null} [posts] Board posts\n     * @property {number|null} [moderators] Board moderators\n     * @property {Array.<ICommunityUserRef>|null} [preview] Board preview\n     * @property {number|null} [votes] Board votes\n     * @property {string|null} [rules] Board rules\n     * @property {number|null} [createdAt] Board createdAt\n     * @property {boolean|null} [isModerator] Board isModerator\n     * @property {boolean|null} [isMember] Board isMember\n     * @property {number|null} [lockType] Board lockType\n     */\n\n    /**\n     * Constructs a new Board.\n     * @exports Board\n     * @classdesc Represents a Board.\n     * @implements IBoard\n     * @constructor\n     * @param {IBoard=} [properties] Properties to set\n     */\n    function Board(properties) {\n        this.preview = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Board uId.\n     * @member {string} uId\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.uId = \"\";\n\n    /**\n     * Board title.\n     * @member {string} title\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.title = \"\";\n\n    /**\n     * Board description.\n     * @member {string} description\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.description = \"\";\n\n    /**\n     * Board icon.\n     * @member {string} icon\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.icon = \"\";\n\n    /**\n     * Board banner.\n     * @member {string} banner\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.banner = \"\";\n\n    /**\n     * Board members.\n     * @member {number} members\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.members = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board posts.\n     * @member {number} posts\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.posts = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board moderators.\n     * @member {number} moderators\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.moderators = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board preview.\n     * @member {Array.<ICommunityUserRef>} preview\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.preview = $util.emptyArray;\n\n    /**\n     * Board votes.\n     * @member {number} votes\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.votes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board rules.\n     * @member {string} rules\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.rules = \"\";\n\n    /**\n     * Board createdAt.\n     * @member {number} createdAt\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board isModerator.\n     * @member {boolean} isModerator\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.isModerator = false;\n\n    /**\n     * Board isMember.\n     * @member {boolean} isMember\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.isMember = false;\n\n    /**\n     * Board lockType.\n     * @member {number} lockType\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.lockType = 0;\n\n    /**\n     * Creates a new Board instance using the specified properties.\n     * @function create\n     * @memberof Board\n     * @static\n     * @param {IBoard=} [properties] Properties to set\n     * @returns {Board} Board instance\n     */\n    Board.create = function create(properties) {\n        return new Board(properties);\n    };\n\n    /**\n     * Encodes the specified Board message. Does not implicitly {@link Board.verify|verify} messages.\n     * @function encode\n     * @memberof Board\n     * @static\n     * @param {IBoard} message Board message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Board.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uId);\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);\n        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);\n        if (message.members != null && Object.hasOwnProperty.call(message, \"members\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.members);\n        if (message.posts != null && Object.hasOwnProperty.call(message, \"posts\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.posts);\n        if (message.moderators != null && Object.hasOwnProperty.call(message, \"moderators\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.moderators);\n        if (message.preview != null && message.preview.length)\n            for (var i = 0; i < message.preview.length; ++i)\n                $root.CommunityUserRef.encode(message.preview[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.votes);\n        if (message.rules != null && Object.hasOwnProperty.call(message, \"rules\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.rules);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.createdAt);\n        if (message.isModerator != null && Object.hasOwnProperty.call(message, \"isModerator\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isModerator);\n        if (message.isMember != null && Object.hasOwnProperty.call(message, \"isMember\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.isMember);\n        if (message.lockType != null && Object.hasOwnProperty.call(message, \"lockType\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.lockType);\n        if (message.icon != null && Object.hasOwnProperty.call(message, \"icon\"))\n            writer.uint32(/* id 99, wireType 2 =*/794).string(message.icon);\n        if (message.banner != null && Object.hasOwnProperty.call(message, \"banner\"))\n            writer.uint32(/* id 100, wireType 2 =*/802).string(message.banner);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Board message, length delimited. Does not implicitly {@link Board.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Board\n     * @static\n     * @param {IBoard} message Board message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Board.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Board message from the specified reader or buffer.\n     * @function decode\n     * @memberof Board\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Board} Board\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Board.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Board();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uId = reader.string();\n                break;\n            case 2:\n                message.title = reader.string();\n                break;\n            case 3:\n                message.description = reader.string();\n                break;\n            case 99:\n                message.icon = reader.string();\n                break;\n            case 100:\n                message.banner = reader.string();\n                break;\n            case 4:\n                message.members = reader.int64();\n                break;\n            case 5:\n                message.posts = reader.int64();\n                break;\n            case 6:\n                message.moderators = reader.int64();\n                break;\n            case 7:\n                if (!(message.preview && message.preview.length))\n                    message.preview = [];\n                message.preview.push($root.CommunityUserRef.decode(reader, reader.uint32()));\n                break;\n            case 8:\n                message.votes = reader.int64();\n                break;\n            case 9:\n                message.rules = reader.string();\n                break;\n            case 10:\n                message.createdAt = reader.int64();\n                break;\n            case 11:\n                message.isModerator = reader.bool();\n                break;\n            case 12:\n                message.isMember = reader.bool();\n                break;\n            case 13:\n                message.lockType = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Board message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Board\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Board} Board\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Board.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Board message.\n     * @function verify\n     * @memberof Board\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Board.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.description != null && message.hasOwnProperty(\"description\"))\n            if (!$util.isString(message.description))\n                return \"description: string expected\";\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            if (!$util.isString(message.icon))\n                return \"icon: string expected\";\n        if (message.banner != null && message.hasOwnProperty(\"banner\"))\n            if (!$util.isString(message.banner))\n                return \"banner: string expected\";\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            if (!$util.isInteger(message.members) && !(message.members && $util.isInteger(message.members.low) && $util.isInteger(message.members.high)))\n                return \"members: integer|Long expected\";\n        if (message.posts != null && message.hasOwnProperty(\"posts\"))\n            if (!$util.isInteger(message.posts) && !(message.posts && $util.isInteger(message.posts.low) && $util.isInteger(message.posts.high)))\n                return \"posts: integer|Long expected\";\n        if (message.moderators != null && message.hasOwnProperty(\"moderators\"))\n            if (!$util.isInteger(message.moderators) && !(message.moderators && $util.isInteger(message.moderators.low) && $util.isInteger(message.moderators.high)))\n                return \"moderators: integer|Long expected\";\n        if (message.preview != null && message.hasOwnProperty(\"preview\")) {\n            if (!Array.isArray(message.preview))\n                return \"preview: array expected\";\n            for (var i = 0; i < message.preview.length; ++i) {\n                var error = $root.CommunityUserRef.verify(message.preview[i]);\n                if (error)\n                    return \"preview.\" + error;\n            }\n        }\n        if (message.votes != null && message.hasOwnProperty(\"votes\"))\n            if (!$util.isInteger(message.votes) && !(message.votes && $util.isInteger(message.votes.low) && $util.isInteger(message.votes.high)))\n                return \"votes: integer|Long expected\";\n        if (message.rules != null && message.hasOwnProperty(\"rules\"))\n            if (!$util.isString(message.rules))\n                return \"rules: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            if (typeof message.isModerator !== \"boolean\")\n                return \"isModerator: boolean expected\";\n        if (message.isMember != null && message.hasOwnProperty(\"isMember\"))\n            if (typeof message.isMember !== \"boolean\")\n                return \"isMember: boolean expected\";\n        if (message.lockType != null && message.hasOwnProperty(\"lockType\"))\n            if (!$util.isInteger(message.lockType))\n                return \"lockType: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Board message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Board\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Board} Board\n     */\n    Board.fromObject = function fromObject(object) {\n        if (object instanceof $root.Board)\n            return object;\n        var message = new $root.Board();\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.description != null)\n            message.description = String(object.description);\n        if (object.icon != null)\n            message.icon = String(object.icon);\n        if (object.banner != null)\n            message.banner = String(object.banner);\n        if (object.members != null)\n            if ($util.Long)\n                (message.members = $util.Long.fromValue(object.members)).unsigned = false;\n            else if (typeof object.members === \"string\")\n                message.members = parseInt(object.members, 10);\n            else if (typeof object.members === \"number\")\n                message.members = object.members;\n            else if (typeof object.members === \"object\")\n                message.members = new $util.LongBits(object.members.low >>> 0, object.members.high >>> 0).toNumber();\n        if (object.posts != null)\n            if ($util.Long)\n                (message.posts = $util.Long.fromValue(object.posts)).unsigned = false;\n            else if (typeof object.posts === \"string\")\n                message.posts = parseInt(object.posts, 10);\n            else if (typeof object.posts === \"number\")\n                message.posts = object.posts;\n            else if (typeof object.posts === \"object\")\n                message.posts = new $util.LongBits(object.posts.low >>> 0, object.posts.high >>> 0).toNumber();\n        if (object.moderators != null)\n            if ($util.Long)\n                (message.moderators = $util.Long.fromValue(object.moderators)).unsigned = false;\n            else if (typeof object.moderators === \"string\")\n                message.moderators = parseInt(object.moderators, 10);\n            else if (typeof object.moderators === \"number\")\n                message.moderators = object.moderators;\n            else if (typeof object.moderators === \"object\")\n                message.moderators = new $util.LongBits(object.moderators.low >>> 0, object.moderators.high >>> 0).toNumber();\n        if (object.preview) {\n            if (!Array.isArray(object.preview))\n                throw TypeError(\".Board.preview: array expected\");\n            message.preview = [];\n            for (var i = 0; i < object.preview.length; ++i) {\n                if (typeof object.preview[i] !== \"object\")\n                    throw TypeError(\".Board.preview: object expected\");\n                message.preview[i] = $root.CommunityUserRef.fromObject(object.preview[i]);\n            }\n        }\n        if (object.votes != null)\n            if ($util.Long)\n                (message.votes = $util.Long.fromValue(object.votes)).unsigned = false;\n            else if (typeof object.votes === \"string\")\n                message.votes = parseInt(object.votes, 10);\n            else if (typeof object.votes === \"number\")\n                message.votes = object.votes;\n            else if (typeof object.votes === \"object\")\n                message.votes = new $util.LongBits(object.votes.low >>> 0, object.votes.high >>> 0).toNumber();\n        if (object.rules != null)\n            message.rules = String(object.rules);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.isModerator != null)\n            message.isModerator = Boolean(object.isModerator);\n        if (object.isMember != null)\n            message.isMember = Boolean(object.isMember);\n        if (object.lockType != null)\n            message.lockType = object.lockType | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Board message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Board\n     * @static\n     * @param {Board} message Board\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Board.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.preview = [];\n        if (options.defaults) {\n            object.uId = \"\";\n            object.title = \"\";\n            object.description = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.members = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.members = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.posts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.posts = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.moderators = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.moderators = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.votes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.votes = options.longs === String ? \"0\" : 0;\n            object.rules = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.isModerator = false;\n            object.isMember = false;\n            object.lockType = 0;\n            object.icon = \"\";\n            object.banner = \"\";\n        }\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.description != null && message.hasOwnProperty(\"description\"))\n            object.description = message.description;\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            if (typeof message.members === \"number\")\n                object.members = options.longs === String ? String(message.members) : message.members;\n            else\n                object.members = options.longs === String ? $util.Long.prototype.toString.call(message.members) : options.longs === Number ? new $util.LongBits(message.members.low >>> 0, message.members.high >>> 0).toNumber() : message.members;\n        if (message.posts != null && message.hasOwnProperty(\"posts\"))\n            if (typeof message.posts === \"number\")\n                object.posts = options.longs === String ? String(message.posts) : message.posts;\n            else\n                object.posts = options.longs === String ? $util.Long.prototype.toString.call(message.posts) : options.longs === Number ? new $util.LongBits(message.posts.low >>> 0, message.posts.high >>> 0).toNumber() : message.posts;\n        if (message.moderators != null && message.hasOwnProperty(\"moderators\"))\n            if (typeof message.moderators === \"number\")\n                object.moderators = options.longs === String ? String(message.moderators) : message.moderators;\n            else\n                object.moderators = options.longs === String ? $util.Long.prototype.toString.call(message.moderators) : options.longs === Number ? new $util.LongBits(message.moderators.low >>> 0, message.moderators.high >>> 0).toNumber() : message.moderators;\n        if (message.preview && message.preview.length) {\n            object.preview = [];\n            for (var j = 0; j < message.preview.length; ++j)\n                object.preview[j] = $root.CommunityUserRef.toObject(message.preview[j], options);\n        }\n        if (message.votes != null && message.hasOwnProperty(\"votes\"))\n            if (typeof message.votes === \"number\")\n                object.votes = options.longs === String ? String(message.votes) : message.votes;\n            else\n                object.votes = options.longs === String ? $util.Long.prototype.toString.call(message.votes) : options.longs === Number ? new $util.LongBits(message.votes.low >>> 0, message.votes.high >>> 0).toNumber() : message.votes;\n        if (message.rules != null && message.hasOwnProperty(\"rules\"))\n            object.rules = message.rules;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            object.isModerator = message.isModerator;\n        if (message.isMember != null && message.hasOwnProperty(\"isMember\"))\n            object.isMember = message.isMember;\n        if (message.lockType != null && message.hasOwnProperty(\"lockType\"))\n            object.lockType = message.lockType;\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            object.icon = message.icon;\n        if (message.banner != null && message.hasOwnProperty(\"banner\"))\n            object.banner = message.banner;\n        return object;\n    };\n\n    /**\n     * Converts this Board to JSON.\n     * @function toJSON\n     * @memberof Board\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Board.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Board;\n})();\n\n$root.CommunityUserRef = (function() {\n\n    /**\n     * Properties of a CommunityUserRef.\n     * @exports ICommunityUserRef\n     * @interface ICommunityUserRef\n     * @property {string|null} [username] CommunityUserRef username\n     * @property {string|null} [avatar] CommunityUserRef avatar\n     * @property {boolean|null} [isAdmin] CommunityUserRef isAdmin\n     * @property {boolean|null} [isMod] CommunityUserRef isMod\n     * @property {string|null} [flair] CommunityUserRef flair\n     * @property {Object.<string,number>|null} [awards] CommunityUserRef awards\n     */\n\n    /**\n     * Constructs a new CommunityUserRef.\n     * @exports CommunityUserRef\n     * @classdesc Represents a CommunityUserRef.\n     * @implements ICommunityUserRef\n     * @constructor\n     * @param {ICommunityUserRef=} [properties] Properties to set\n     */\n    function CommunityUserRef(properties) {\n        this.awards = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunityUserRef username.\n     * @member {string} username\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.username = \"\";\n\n    /**\n     * CommunityUserRef avatar.\n     * @member {string} avatar\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.avatar = \"\";\n\n    /**\n     * CommunityUserRef isAdmin.\n     * @member {boolean} isAdmin\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.isAdmin = false;\n\n    /**\n     * CommunityUserRef isMod.\n     * @member {boolean} isMod\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.isMod = false;\n\n    /**\n     * CommunityUserRef flair.\n     * @member {string} flair\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.flair = \"\";\n\n    /**\n     * CommunityUserRef awards.\n     * @member {Object.<string,number>} awards\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.awards = $util.emptyObject;\n\n    /**\n     * Creates a new CommunityUserRef instance using the specified properties.\n     * @function create\n     * @memberof CommunityUserRef\n     * @static\n     * @param {ICommunityUserRef=} [properties] Properties to set\n     * @returns {CommunityUserRef} CommunityUserRef instance\n     */\n    CommunityUserRef.create = function create(properties) {\n        return new CommunityUserRef(properties);\n    };\n\n    /**\n     * Encodes the specified CommunityUserRef message. Does not implicitly {@link CommunityUserRef.verify|verify} messages.\n     * @function encode\n     * @memberof CommunityUserRef\n     * @static\n     * @param {ICommunityUserRef} message CommunityUserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunityUserRef.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n        if (message.avatar != null && Object.hasOwnProperty.call(message, \"avatar\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);\n        if (message.isAdmin != null && Object.hasOwnProperty.call(message, \"isAdmin\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isAdmin);\n        if (message.isMod != null && Object.hasOwnProperty.call(message, \"isMod\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isMod);\n        if (message.flair != null && Object.hasOwnProperty.call(message, \"flair\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.flair);\n        if (message.awards != null && Object.hasOwnProperty.call(message, \"awards\"))\n            for (var keys = Object.keys(message.awards), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.awards[keys[i]]).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunityUserRef message, length delimited. Does not implicitly {@link CommunityUserRef.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunityUserRef\n     * @static\n     * @param {ICommunityUserRef} message CommunityUserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunityUserRef.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunityUserRef message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunityUserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunityUserRef} CommunityUserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunityUserRef.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunityUserRef(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.username = reader.string();\n                break;\n            case 6:\n                message.avatar = reader.string();\n                break;\n            case 7:\n                message.isAdmin = reader.bool();\n                break;\n            case 8:\n                message.isMod = reader.bool();\n                break;\n            case 9:\n                message.flair = reader.string();\n                break;\n            case 10:\n                if (message.awards === $util.emptyObject)\n                    message.awards = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.awards[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunityUserRef message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunityUserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunityUserRef} CommunityUserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunityUserRef.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunityUserRef message.\n     * @function verify\n     * @memberof CommunityUserRef\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunityUserRef.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            if (!$util.isString(message.avatar))\n                return \"avatar: string expected\";\n        if (message.isAdmin != null && message.hasOwnProperty(\"isAdmin\"))\n            if (typeof message.isAdmin !== \"boolean\")\n                return \"isAdmin: boolean expected\";\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            if (typeof message.isMod !== \"boolean\")\n                return \"isMod: boolean expected\";\n        if (message.flair != null && message.hasOwnProperty(\"flair\"))\n            if (!$util.isString(message.flair))\n                return \"flair: string expected\";\n        if (message.awards != null && message.hasOwnProperty(\"awards\")) {\n            if (!$util.isObject(message.awards))\n                return \"awards: object expected\";\n            var key = Object.keys(message.awards);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.awards[key[i]]))\n                    return \"awards: integer{k:string} expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommunityUserRef message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunityUserRef\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunityUserRef} CommunityUserRef\n     */\n    CommunityUserRef.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunityUserRef)\n            return object;\n        var message = new $root.CommunityUserRef();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.avatar != null)\n            message.avatar = String(object.avatar);\n        if (object.isAdmin != null)\n            message.isAdmin = Boolean(object.isAdmin);\n        if (object.isMod != null)\n            message.isMod = Boolean(object.isMod);\n        if (object.flair != null)\n            message.flair = String(object.flair);\n        if (object.awards) {\n            if (typeof object.awards !== \"object\")\n                throw TypeError(\".CommunityUserRef.awards: object expected\");\n            message.awards = {};\n            for (var keys = Object.keys(object.awards), i = 0; i < keys.length; ++i)\n                message.awards[keys[i]] = object.awards[keys[i]] >>> 0;\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunityUserRef message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunityUserRef\n     * @static\n     * @param {CommunityUserRef} message CommunityUserRef\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunityUserRef.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.awards = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.avatar = \"\";\n            object.isAdmin = false;\n            object.isMod = false;\n            object.flair = \"\";\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            object.avatar = message.avatar;\n        if (message.isAdmin != null && message.hasOwnProperty(\"isAdmin\"))\n            object.isAdmin = message.isAdmin;\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            object.isMod = message.isMod;\n        if (message.flair != null && message.hasOwnProperty(\"flair\"))\n            object.flair = message.flair;\n        var keys2;\n        if (message.awards && (keys2 = Object.keys(message.awards)).length) {\n            object.awards = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.awards[keys2[j]] = message.awards[keys2[j]];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this CommunityUserRef to JSON.\n     * @function toJSON\n     * @memberof CommunityUserRef\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunityUserRef.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunityUserRef;\n})();\n\n$root.Thread = (function() {\n\n    /**\n     * Properties of a Thread.\n     * @exports IThread\n     * @interface IThread\n     * @property {string|null} [uId] Thread uId\n     * @property {string|null} [url] Thread url\n     * @property {number|null} [type] Thread type\n     * @property {string|null} [title] Thread title\n     * @property {string|null} [link] Thread link\n     * @property {string|null} [linkType] Thread linkType\n     * @property {string|null} [content] Thread content\n     * @property {string|null} [thumb] Thread thumb\n     * @property {ICommunityUserRef|null} [user] Thread user\n     * @property {number|null} [createdAt] Thread createdAt\n     * @property {string|null} [boardId] Thread boardId\n     * @property {boolean|null} [isKicked] Thread isKicked\n     * @property {boolean|null} [isLocked] Thread isLocked\n     * @property {boolean|null} [isArchived] Thread isArchived\n     * @property {number|null} [thumbAspectRatio] Thread thumbAspectRatio\n     * @property {string|null} [location] Thread location\n     * @property {number|null} [numComments] Thread numComments\n     * @property {number|null} [numCrossposts] Thread numCrossposts\n     * @property {number|null} [lastCommentAt] Thread lastCommentAt\n     * @property {Object.<string,number>|null} [votes] Thread votes\n     * @property {Array.<string>|null} [acceptedVotes] Thread acceptedVotes\n     * @property {Array.<string>|null} [acceptedCommentVotes] Thread acceptedCommentVotes\n     * @property {Array.<IBanInfo>|null} [mod] Thread mod\n     * @property {number|null} [unhandledReports] Thread unhandledReports\n     * @property {number|null} [reports] Thread reports\n     * @property {IThreadActionedContext|null} [me] Thread me\n     */\n\n    /**\n     * Constructs a new Thread.\n     * @exports Thread\n     * @classdesc Represents a Thread.\n     * @implements IThread\n     * @constructor\n     * @param {IThread=} [properties] Properties to set\n     */\n    function Thread(properties) {\n        this.votes = {};\n        this.acceptedVotes = [];\n        this.acceptedCommentVotes = [];\n        this.mod = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Thread uId.\n     * @member {string} uId\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.uId = \"\";\n\n    /**\n     * Thread url.\n     * @member {string} url\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.url = \"\";\n\n    /**\n     * Thread type.\n     * @member {number} type\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.type = 0;\n\n    /**\n     * Thread title.\n     * @member {string} title\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.title = \"\";\n\n    /**\n     * Thread link.\n     * @member {string} link\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.link = \"\";\n\n    /**\n     * Thread linkType.\n     * @member {string} linkType\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.linkType = \"\";\n\n    /**\n     * Thread content.\n     * @member {string} content\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.content = \"\";\n\n    /**\n     * Thread thumb.\n     * @member {string} thumb\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.thumb = \"\";\n\n    /**\n     * Thread user.\n     * @member {ICommunityUserRef|null|undefined} user\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.user = null;\n\n    /**\n     * Thread createdAt.\n     * @member {number} createdAt\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread boardId.\n     * @member {string} boardId\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.boardId = \"\";\n\n    /**\n     * Thread isKicked.\n     * @member {boolean} isKicked\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.isKicked = false;\n\n    /**\n     * Thread isLocked.\n     * @member {boolean} isLocked\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.isLocked = false;\n\n    /**\n     * Thread isArchived.\n     * @member {boolean} isArchived\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.isArchived = false;\n\n    /**\n     * Thread thumbAspectRatio.\n     * @member {number} thumbAspectRatio\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.thumbAspectRatio = 0;\n\n    /**\n     * Thread location.\n     * @member {string} location\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.location = \"\";\n\n    /**\n     * Thread numComments.\n     * @member {number} numComments\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.numComments = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread numCrossposts.\n     * @member {number} numCrossposts\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.numCrossposts = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread lastCommentAt.\n     * @member {number} lastCommentAt\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.lastCommentAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread votes.\n     * @member {Object.<string,number>} votes\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.votes = $util.emptyObject;\n\n    /**\n     * Thread acceptedVotes.\n     * @member {Array.<string>} acceptedVotes\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.acceptedVotes = $util.emptyArray;\n\n    /**\n     * Thread acceptedCommentVotes.\n     * @member {Array.<string>} acceptedCommentVotes\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.acceptedCommentVotes = $util.emptyArray;\n\n    /**\n     * Thread mod.\n     * @member {Array.<IBanInfo>} mod\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.mod = $util.emptyArray;\n\n    /**\n     * Thread unhandledReports.\n     * @member {number} unhandledReports\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.unhandledReports = 0;\n\n    /**\n     * Thread reports.\n     * @member {number} reports\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.reports = 0;\n\n    /**\n     * Thread me.\n     * @member {IThreadActionedContext|null|undefined} me\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.me = null;\n\n    /**\n     * Creates a new Thread instance using the specified properties.\n     * @function create\n     * @memberof Thread\n     * @static\n     * @param {IThread=} [properties] Properties to set\n     * @returns {Thread} Thread instance\n     */\n    Thread.create = function create(properties) {\n        return new Thread(properties);\n    };\n\n    /**\n     * Encodes the specified Thread message. Does not implicitly {@link Thread.verify|verify} messages.\n     * @function encode\n     * @memberof Thread\n     * @static\n     * @param {IThread} message Thread message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Thread.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uId);\n        if (message.url != null && Object.hasOwnProperty.call(message, \"url\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.title);\n        if (message.link != null && Object.hasOwnProperty.call(message, \"link\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.link);\n        if (message.linkType != null && Object.hasOwnProperty.call(message, \"linkType\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.linkType);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.content);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.CommunityUserRef.encode(message.user, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.createdAt);\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 10, wireType 2 =*/82).string(message.boardId);\n        if (message.isKicked != null && Object.hasOwnProperty.call(message, \"isKicked\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isKicked);\n        if (message.isLocked != null && Object.hasOwnProperty.call(message, \"isLocked\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.isLocked);\n        if (message.isArchived != null && Object.hasOwnProperty.call(message, \"isArchived\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isArchived);\n        if (message.thumbAspectRatio != null && Object.hasOwnProperty.call(message, \"thumbAspectRatio\"))\n            writer.uint32(/* id 14, wireType 5 =*/117).float(message.thumbAspectRatio);\n        if (message.location != null && Object.hasOwnProperty.call(message, \"location\"))\n            writer.uint32(/* id 15, wireType 2 =*/122).string(message.location);\n        if (message.numComments != null && Object.hasOwnProperty.call(message, \"numComments\"))\n            writer.uint32(/* id 16, wireType 0 =*/128).int64(message.numComments);\n        if (message.lastCommentAt != null && Object.hasOwnProperty.call(message, \"lastCommentAt\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).int64(message.lastCommentAt);\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            for (var keys = Object.keys(message.votes), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 18, wireType 2 =*/146).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.votes[keys[i]]).ldelim();\n        if (message.acceptedVotes != null && message.acceptedVotes.length)\n            for (var i = 0; i < message.acceptedVotes.length; ++i)\n                writer.uint32(/* id 19, wireType 2 =*/154).string(message.acceptedVotes[i]);\n        if (message.acceptedCommentVotes != null && message.acceptedCommentVotes.length)\n            for (var i = 0; i < message.acceptedCommentVotes.length; ++i)\n                writer.uint32(/* id 20, wireType 2 =*/162).string(message.acceptedCommentVotes[i]);\n        if (message.mod != null && message.mod.length)\n            for (var i = 0; i < message.mod.length; ++i)\n                $root.BanInfo.encode(message.mod[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n        if (message.me != null && Object.hasOwnProperty.call(message, \"me\"))\n            $root.ThreadActionedContext.encode(message.me, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n        if (message.unhandledReports != null && Object.hasOwnProperty.call(message, \"unhandledReports\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).int32(message.unhandledReports);\n        if (message.reports != null && Object.hasOwnProperty.call(message, \"reports\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.reports);\n        if (message.numCrossposts != null && Object.hasOwnProperty.call(message, \"numCrossposts\"))\n            writer.uint32(/* id 28, wireType 0 =*/224).int64(message.numCrossposts);\n        if (message.thumb != null && Object.hasOwnProperty.call(message, \"thumb\"))\n            writer.uint32(/* id 30, wireType 2 =*/242).string(message.thumb);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Thread message, length delimited. Does not implicitly {@link Thread.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Thread\n     * @static\n     * @param {IThread} message Thread message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Thread.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Thread message from the specified reader or buffer.\n     * @function decode\n     * @memberof Thread\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Thread} Thread\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Thread.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Thread(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uId = reader.string();\n                break;\n            case 2:\n                message.url = reader.string();\n                break;\n            case 3:\n                message.type = reader.uint32();\n                break;\n            case 4:\n                message.title = reader.string();\n                break;\n            case 5:\n                message.link = reader.string();\n                break;\n            case 6:\n                message.linkType = reader.string();\n                break;\n            case 7:\n                message.content = reader.string();\n                break;\n            case 30:\n                message.thumb = reader.string();\n                break;\n            case 8:\n                message.user = $root.CommunityUserRef.decode(reader, reader.uint32());\n                break;\n            case 9:\n                message.createdAt = reader.int64();\n                break;\n            case 10:\n                message.boardId = reader.string();\n                break;\n            case 11:\n                message.isKicked = reader.bool();\n                break;\n            case 12:\n                message.isLocked = reader.bool();\n                break;\n            case 13:\n                message.isArchived = reader.bool();\n                break;\n            case 14:\n                message.thumbAspectRatio = reader.float();\n                break;\n            case 15:\n                message.location = reader.string();\n                break;\n            case 16:\n                message.numComments = reader.int64();\n                break;\n            case 28:\n                message.numCrossposts = reader.int64();\n                break;\n            case 17:\n                message.lastCommentAt = reader.int64();\n                break;\n            case 18:\n                if (message.votes === $util.emptyObject)\n                    message.votes = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.votes[key] = value;\n                break;\n            case 19:\n                if (!(message.acceptedVotes && message.acceptedVotes.length))\n                    message.acceptedVotes = [];\n                message.acceptedVotes.push(reader.string());\n                break;\n            case 20:\n                if (!(message.acceptedCommentVotes && message.acceptedCommentVotes.length))\n                    message.acceptedCommentVotes = [];\n                message.acceptedCommentVotes.push(reader.string());\n                break;\n            case 21:\n                if (!(message.mod && message.mod.length))\n                    message.mod = [];\n                message.mod.push($root.BanInfo.decode(reader, reader.uint32()));\n                break;\n            case 24:\n                message.unhandledReports = reader.int32();\n                break;\n            case 25:\n                message.reports = reader.int32();\n                break;\n            case 23:\n                message.me = $root.ThreadActionedContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Thread message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Thread\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Thread} Thread\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Thread.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Thread message.\n     * @function verify\n     * @memberof Thread\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Thread.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.url != null && message.hasOwnProperty(\"url\"))\n            if (!$util.isString(message.url))\n                return \"url: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isInteger(message.type))\n                return \"type: integer expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            if (!$util.isString(message.link))\n                return \"link: string expected\";\n        if (message.linkType != null && message.hasOwnProperty(\"linkType\"))\n            if (!$util.isString(message.linkType))\n                return \"linkType: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.thumb != null && message.hasOwnProperty(\"thumb\"))\n            if (!$util.isString(message.thumb))\n                return \"thumb: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.CommunityUserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.isKicked != null && message.hasOwnProperty(\"isKicked\"))\n            if (typeof message.isKicked !== \"boolean\")\n                return \"isKicked: boolean expected\";\n        if (message.isLocked != null && message.hasOwnProperty(\"isLocked\"))\n            if (typeof message.isLocked !== \"boolean\")\n                return \"isLocked: boolean expected\";\n        if (message.isArchived != null && message.hasOwnProperty(\"isArchived\"))\n            if (typeof message.isArchived !== \"boolean\")\n                return \"isArchived: boolean expected\";\n        if (message.thumbAspectRatio != null && message.hasOwnProperty(\"thumbAspectRatio\"))\n            if (typeof message.thumbAspectRatio !== \"number\")\n                return \"thumbAspectRatio: number expected\";\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            if (!$util.isString(message.location))\n                return \"location: string expected\";\n        if (message.numComments != null && message.hasOwnProperty(\"numComments\"))\n            if (!$util.isInteger(message.numComments) && !(message.numComments && $util.isInteger(message.numComments.low) && $util.isInteger(message.numComments.high)))\n                return \"numComments: integer|Long expected\";\n        if (message.numCrossposts != null && message.hasOwnProperty(\"numCrossposts\"))\n            if (!$util.isInteger(message.numCrossposts) && !(message.numCrossposts && $util.isInteger(message.numCrossposts.low) && $util.isInteger(message.numCrossposts.high)))\n                return \"numCrossposts: integer|Long expected\";\n        if (message.lastCommentAt != null && message.hasOwnProperty(\"lastCommentAt\"))\n            if (!$util.isInteger(message.lastCommentAt) && !(message.lastCommentAt && $util.isInteger(message.lastCommentAt.low) && $util.isInteger(message.lastCommentAt.high)))\n                return \"lastCommentAt: integer|Long expected\";\n        if (message.votes != null && message.hasOwnProperty(\"votes\")) {\n            if (!$util.isObject(message.votes))\n                return \"votes: object expected\";\n            var key = Object.keys(message.votes);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.votes[key[i]]))\n                    return \"votes: integer{k:string} expected\";\n        }\n        if (message.acceptedVotes != null && message.hasOwnProperty(\"acceptedVotes\")) {\n            if (!Array.isArray(message.acceptedVotes))\n                return \"acceptedVotes: array expected\";\n            for (var i = 0; i < message.acceptedVotes.length; ++i)\n                if (!$util.isString(message.acceptedVotes[i]))\n                    return \"acceptedVotes: string[] expected\";\n        }\n        if (message.acceptedCommentVotes != null && message.hasOwnProperty(\"acceptedCommentVotes\")) {\n            if (!Array.isArray(message.acceptedCommentVotes))\n                return \"acceptedCommentVotes: array expected\";\n            for (var i = 0; i < message.acceptedCommentVotes.length; ++i)\n                if (!$util.isString(message.acceptedCommentVotes[i]))\n                    return \"acceptedCommentVotes: string[] expected\";\n        }\n        if (message.mod != null && message.hasOwnProperty(\"mod\")) {\n            if (!Array.isArray(message.mod))\n                return \"mod: array expected\";\n            for (var i = 0; i < message.mod.length; ++i) {\n                var error = $root.BanInfo.verify(message.mod[i]);\n                if (error)\n                    return \"mod.\" + error;\n            }\n        }\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            if (!$util.isInteger(message.unhandledReports))\n                return \"unhandledReports: integer expected\";\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            if (!$util.isInteger(message.reports))\n                return \"reports: integer expected\";\n        if (message.me != null && message.hasOwnProperty(\"me\")) {\n            var error = $root.ThreadActionedContext.verify(message.me);\n            if (error)\n                return \"me.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Thread message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Thread\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Thread} Thread\n     */\n    Thread.fromObject = function fromObject(object) {\n        if (object instanceof $root.Thread)\n            return object;\n        var message = new $root.Thread();\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.url != null)\n            message.url = String(object.url);\n        if (object.type != null)\n            message.type = object.type >>> 0;\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.link != null)\n            message.link = String(object.link);\n        if (object.linkType != null)\n            message.linkType = String(object.linkType);\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.thumb != null)\n            message.thumb = String(object.thumb);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".Thread.user: object expected\");\n            message.user = $root.CommunityUserRef.fromObject(object.user);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.isKicked != null)\n            message.isKicked = Boolean(object.isKicked);\n        if (object.isLocked != null)\n            message.isLocked = Boolean(object.isLocked);\n        if (object.isArchived != null)\n            message.isArchived = Boolean(object.isArchived);\n        if (object.thumbAspectRatio != null)\n            message.thumbAspectRatio = Number(object.thumbAspectRatio);\n        if (object.location != null)\n            message.location = String(object.location);\n        if (object.numComments != null)\n            if ($util.Long)\n                (message.numComments = $util.Long.fromValue(object.numComments)).unsigned = false;\n            else if (typeof object.numComments === \"string\")\n                message.numComments = parseInt(object.numComments, 10);\n            else if (typeof object.numComments === \"number\")\n                message.numComments = object.numComments;\n            else if (typeof object.numComments === \"object\")\n                message.numComments = new $util.LongBits(object.numComments.low >>> 0, object.numComments.high >>> 0).toNumber();\n        if (object.numCrossposts != null)\n            if ($util.Long)\n                (message.numCrossposts = $util.Long.fromValue(object.numCrossposts)).unsigned = false;\n            else if (typeof object.numCrossposts === \"string\")\n                message.numCrossposts = parseInt(object.numCrossposts, 10);\n            else if (typeof object.numCrossposts === \"number\")\n                message.numCrossposts = object.numCrossposts;\n            else if (typeof object.numCrossposts === \"object\")\n                message.numCrossposts = new $util.LongBits(object.numCrossposts.low >>> 0, object.numCrossposts.high >>> 0).toNumber();\n        if (object.lastCommentAt != null)\n            if ($util.Long)\n                (message.lastCommentAt = $util.Long.fromValue(object.lastCommentAt)).unsigned = false;\n            else if (typeof object.lastCommentAt === \"string\")\n                message.lastCommentAt = parseInt(object.lastCommentAt, 10);\n            else if (typeof object.lastCommentAt === \"number\")\n                message.lastCommentAt = object.lastCommentAt;\n            else if (typeof object.lastCommentAt === \"object\")\n                message.lastCommentAt = new $util.LongBits(object.lastCommentAt.low >>> 0, object.lastCommentAt.high >>> 0).toNumber();\n        if (object.votes) {\n            if (typeof object.votes !== \"object\")\n                throw TypeError(\".Thread.votes: object expected\");\n            message.votes = {};\n            for (var keys = Object.keys(object.votes), i = 0; i < keys.length; ++i)\n                message.votes[keys[i]] = object.votes[keys[i]] | 0;\n        }\n        if (object.acceptedVotes) {\n            if (!Array.isArray(object.acceptedVotes))\n                throw TypeError(\".Thread.acceptedVotes: array expected\");\n            message.acceptedVotes = [];\n            for (var i = 0; i < object.acceptedVotes.length; ++i)\n                message.acceptedVotes[i] = String(object.acceptedVotes[i]);\n        }\n        if (object.acceptedCommentVotes) {\n            if (!Array.isArray(object.acceptedCommentVotes))\n                throw TypeError(\".Thread.acceptedCommentVotes: array expected\");\n            message.acceptedCommentVotes = [];\n            for (var i = 0; i < object.acceptedCommentVotes.length; ++i)\n                message.acceptedCommentVotes[i] = String(object.acceptedCommentVotes[i]);\n        }\n        if (object.mod) {\n            if (!Array.isArray(object.mod))\n                throw TypeError(\".Thread.mod: array expected\");\n            message.mod = [];\n            for (var i = 0; i < object.mod.length; ++i) {\n                if (typeof object.mod[i] !== \"object\")\n                    throw TypeError(\".Thread.mod: object expected\");\n                message.mod[i] = $root.BanInfo.fromObject(object.mod[i]);\n            }\n        }\n        if (object.unhandledReports != null)\n            message.unhandledReports = object.unhandledReports | 0;\n        if (object.reports != null)\n            message.reports = object.reports | 0;\n        if (object.me != null) {\n            if (typeof object.me !== \"object\")\n                throw TypeError(\".Thread.me: object expected\");\n            message.me = $root.ThreadActionedContext.fromObject(object.me);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Thread message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Thread\n     * @static\n     * @param {Thread} message Thread\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Thread.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.acceptedVotes = [];\n            object.acceptedCommentVotes = [];\n            object.mod = [];\n        }\n        if (options.objects || options.defaults)\n            object.votes = {};\n        if (options.defaults) {\n            object.uId = \"\";\n            object.url = \"\";\n            object.type = 0;\n            object.title = \"\";\n            object.link = \"\";\n            object.linkType = \"\";\n            object.content = \"\";\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.boardId = \"\";\n            object.isKicked = false;\n            object.isLocked = false;\n            object.isArchived = false;\n            object.thumbAspectRatio = 0;\n            object.location = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.numComments = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.numComments = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.lastCommentAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.lastCommentAt = options.longs === String ? \"0\" : 0;\n            object.me = null;\n            object.unhandledReports = 0;\n            object.reports = 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.numCrossposts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.numCrossposts = options.longs === String ? \"0\" : 0;\n            object.thumb = \"\";\n        }\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.url != null && message.hasOwnProperty(\"url\"))\n            object.url = message.url;\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            object.link = message.link;\n        if (message.linkType != null && message.hasOwnProperty(\"linkType\"))\n            object.linkType = message.linkType;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.CommunityUserRef.toObject(message.user, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.isKicked != null && message.hasOwnProperty(\"isKicked\"))\n            object.isKicked = message.isKicked;\n        if (message.isLocked != null && message.hasOwnProperty(\"isLocked\"))\n            object.isLocked = message.isLocked;\n        if (message.isArchived != null && message.hasOwnProperty(\"isArchived\"))\n            object.isArchived = message.isArchived;\n        if (message.thumbAspectRatio != null && message.hasOwnProperty(\"thumbAspectRatio\"))\n            object.thumbAspectRatio = options.json && !isFinite(message.thumbAspectRatio) ? String(message.thumbAspectRatio) : message.thumbAspectRatio;\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            object.location = message.location;\n        if (message.numComments != null && message.hasOwnProperty(\"numComments\"))\n            if (typeof message.numComments === \"number\")\n                object.numComments = options.longs === String ? String(message.numComments) : message.numComments;\n            else\n                object.numComments = options.longs === String ? $util.Long.prototype.toString.call(message.numComments) : options.longs === Number ? new $util.LongBits(message.numComments.low >>> 0, message.numComments.high >>> 0).toNumber() : message.numComments;\n        if (message.lastCommentAt != null && message.hasOwnProperty(\"lastCommentAt\"))\n            if (typeof message.lastCommentAt === \"number\")\n                object.lastCommentAt = options.longs === String ? String(message.lastCommentAt) : message.lastCommentAt;\n            else\n                object.lastCommentAt = options.longs === String ? $util.Long.prototype.toString.call(message.lastCommentAt) : options.longs === Number ? new $util.LongBits(message.lastCommentAt.low >>> 0, message.lastCommentAt.high >>> 0).toNumber() : message.lastCommentAt;\n        var keys2;\n        if (message.votes && (keys2 = Object.keys(message.votes)).length) {\n            object.votes = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.votes[keys2[j]] = message.votes[keys2[j]];\n        }\n        if (message.acceptedVotes && message.acceptedVotes.length) {\n            object.acceptedVotes = [];\n            for (var j = 0; j < message.acceptedVotes.length; ++j)\n                object.acceptedVotes[j] = message.acceptedVotes[j];\n        }\n        if (message.acceptedCommentVotes && message.acceptedCommentVotes.length) {\n            object.acceptedCommentVotes = [];\n            for (var j = 0; j < message.acceptedCommentVotes.length; ++j)\n                object.acceptedCommentVotes[j] = message.acceptedCommentVotes[j];\n        }\n        if (message.mod && message.mod.length) {\n            object.mod = [];\n            for (var j = 0; j < message.mod.length; ++j)\n                object.mod[j] = $root.BanInfo.toObject(message.mod[j], options);\n        }\n        if (message.me != null && message.hasOwnProperty(\"me\"))\n            object.me = $root.ThreadActionedContext.toObject(message.me, options);\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            object.unhandledReports = message.unhandledReports;\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            object.reports = message.reports;\n        if (message.numCrossposts != null && message.hasOwnProperty(\"numCrossposts\"))\n            if (typeof message.numCrossposts === \"number\")\n                object.numCrossposts = options.longs === String ? String(message.numCrossposts) : message.numCrossposts;\n            else\n                object.numCrossposts = options.longs === String ? $util.Long.prototype.toString.call(message.numCrossposts) : options.longs === Number ? new $util.LongBits(message.numCrossposts.low >>> 0, message.numCrossposts.high >>> 0).toNumber() : message.numCrossposts;\n        if (message.thumb != null && message.hasOwnProperty(\"thumb\"))\n            object.thumb = message.thumb;\n        return object;\n    };\n\n    /**\n     * Converts this Thread to JSON.\n     * @function toJSON\n     * @memberof Thread\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Thread.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Thread;\n})();\n\n$root.EntityVoteRequest = (function() {\n\n    /**\n     * Properties of an EntityVoteRequest.\n     * @exports IEntityVoteRequest\n     * @interface IEntityVoteRequest\n     * @property {string|null} [type] EntityVoteRequest type\n     * @property {string|null} [entityId] EntityVoteRequest entityId\n     * @property {IVote|null} [vote] EntityVoteRequest vote\n     */\n\n    /**\n     * Constructs a new EntityVoteRequest.\n     * @exports EntityVoteRequest\n     * @classdesc Represents an EntityVoteRequest.\n     * @implements IEntityVoteRequest\n     * @constructor\n     * @param {IEntityVoteRequest=} [properties] Properties to set\n     */\n    function EntityVoteRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EntityVoteRequest type.\n     * @member {string} type\n     * @memberof EntityVoteRequest\n     * @instance\n     */\n    EntityVoteRequest.prototype.type = \"\";\n\n    /**\n     * EntityVoteRequest entityId.\n     * @member {string} entityId\n     * @memberof EntityVoteRequest\n     * @instance\n     */\n    EntityVoteRequest.prototype.entityId = \"\";\n\n    /**\n     * EntityVoteRequest vote.\n     * @member {IVote|null|undefined} vote\n     * @memberof EntityVoteRequest\n     * @instance\n     */\n    EntityVoteRequest.prototype.vote = null;\n\n    /**\n     * Creates a new EntityVoteRequest instance using the specified properties.\n     * @function create\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {IEntityVoteRequest=} [properties] Properties to set\n     * @returns {EntityVoteRequest} EntityVoteRequest instance\n     */\n    EntityVoteRequest.create = function create(properties) {\n        return new EntityVoteRequest(properties);\n    };\n\n    /**\n     * Encodes the specified EntityVoteRequest message. Does not implicitly {@link EntityVoteRequest.verify|verify} messages.\n     * @function encode\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {IEntityVoteRequest} message EntityVoteRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EntityVoteRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n        if (message.entityId != null && Object.hasOwnProperty.call(message, \"entityId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);\n        if (message.vote != null && Object.hasOwnProperty.call(message, \"vote\"))\n            $root.Vote.encode(message.vote, writer.uint32(/* id 99, wireType 2 =*/794).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EntityVoteRequest message, length delimited. Does not implicitly {@link EntityVoteRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {IEntityVoteRequest} message EntityVoteRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EntityVoteRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EntityVoteRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EntityVoteRequest} EntityVoteRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EntityVoteRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EntityVoteRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.string();\n                break;\n            case 2:\n                message.entityId = reader.string();\n                break;\n            case 99:\n                message.vote = $root.Vote.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EntityVoteRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EntityVoteRequest} EntityVoteRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EntityVoteRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EntityVoteRequest message.\n     * @function verify\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EntityVoteRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.entityId != null && message.hasOwnProperty(\"entityId\"))\n            if (!$util.isString(message.entityId))\n                return \"entityId: string expected\";\n        if (message.vote != null && message.hasOwnProperty(\"vote\")) {\n            var error = $root.Vote.verify(message.vote);\n            if (error)\n                return \"vote.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates an EntityVoteRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EntityVoteRequest} EntityVoteRequest\n     */\n    EntityVoteRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.EntityVoteRequest)\n            return object;\n        var message = new $root.EntityVoteRequest();\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.entityId != null)\n            message.entityId = String(object.entityId);\n        if (object.vote != null) {\n            if (typeof object.vote !== \"object\")\n                throw TypeError(\".EntityVoteRequest.vote: object expected\");\n            message.vote = $root.Vote.fromObject(object.vote);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EntityVoteRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {EntityVoteRequest} message EntityVoteRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EntityVoteRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = \"\";\n            object.entityId = \"\";\n            object.vote = null;\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.entityId != null && message.hasOwnProperty(\"entityId\"))\n            object.entityId = message.entityId;\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            object.vote = $root.Vote.toObject(message.vote, options);\n        return object;\n    };\n\n    /**\n     * Converts this EntityVoteRequest to JSON.\n     * @function toJSON\n     * @memberof EntityVoteRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EntityVoteRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EntityVoteRequest;\n})();\n\n$root.ThreadSelectFilters = (function() {\n\n    /**\n     * Properties of a ThreadSelectFilters.\n     * @exports IThreadSelectFilters\n     * @interface IThreadSelectFilters\n     * @property {ThreadSelectFilters.Method|null} [rankMethod] ThreadSelectFilters rankMethod\n     * @property {ThreadSelectFilters.SortDirection|null} [sortDirection] ThreadSelectFilters sortDirection\n     * @property {number|null} [limit] ThreadSelectFilters limit\n     * @property {string|null} [query] ThreadSelectFilters query\n     * @property {number|null} [page] ThreadSelectFilters page\n     * @property {boolean|null} [useBoolean] ThreadSelectFilters useBoolean\n     * @property {number|null} [createdStart] ThreadSelectFilters createdStart\n     * @property {number|null} [createdEnd] ThreadSelectFilters createdEnd\n     */\n\n    /**\n     * Constructs a new ThreadSelectFilters.\n     * @exports ThreadSelectFilters\n     * @classdesc Represents a ThreadSelectFilters.\n     * @implements IThreadSelectFilters\n     * @constructor\n     * @param {IThreadSelectFilters=} [properties] Properties to set\n     */\n    function ThreadSelectFilters(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadSelectFilters rankMethod.\n     * @member {ThreadSelectFilters.Method} rankMethod\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.rankMethod = 0;\n\n    /**\n     * ThreadSelectFilters sortDirection.\n     * @member {ThreadSelectFilters.SortDirection} sortDirection\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.sortDirection = 0;\n\n    /**\n     * ThreadSelectFilters limit.\n     * @member {number} limit\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.limit = 0;\n\n    /**\n     * ThreadSelectFilters query.\n     * @member {string} query\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.query = \"\";\n\n    /**\n     * ThreadSelectFilters page.\n     * @member {number} page\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.page = 0;\n\n    /**\n     * ThreadSelectFilters useBoolean.\n     * @member {boolean} useBoolean\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.useBoolean = false;\n\n    /**\n     * ThreadSelectFilters createdStart.\n     * @member {number} createdStart\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.createdStart = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * ThreadSelectFilters createdEnd.\n     * @member {number} createdEnd\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.createdEnd = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ThreadSelectFilters instance using the specified properties.\n     * @function create\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {IThreadSelectFilters=} [properties] Properties to set\n     * @returns {ThreadSelectFilters} ThreadSelectFilters instance\n     */\n    ThreadSelectFilters.create = function create(properties) {\n        return new ThreadSelectFilters(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadSelectFilters message. Does not implicitly {@link ThreadSelectFilters.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {IThreadSelectFilters} message ThreadSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectFilters.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rankMethod != null && Object.hasOwnProperty.call(message, \"rankMethod\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rankMethod);\n        if (message.sortDirection != null && Object.hasOwnProperty.call(message, \"sortDirection\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sortDirection);\n        if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.limit);\n        if (message.query != null && Object.hasOwnProperty.call(message, \"query\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.query);\n        if (message.createdStart != null && Object.hasOwnProperty.call(message, \"createdStart\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createdStart);\n        if (message.createdEnd != null && Object.hasOwnProperty.call(message, \"createdEnd\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createdEnd);\n        if (message.page != null && Object.hasOwnProperty.call(message, \"page\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.page);\n        if (message.useBoolean != null && Object.hasOwnProperty.call(message, \"useBoolean\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.useBoolean);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadSelectFilters message, length delimited. Does not implicitly {@link ThreadSelectFilters.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {IThreadSelectFilters} message ThreadSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectFilters.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadSelectFilters message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadSelectFilters} ThreadSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectFilters.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadSelectFilters();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rankMethod = reader.int32();\n                break;\n            case 2:\n                message.sortDirection = reader.int32();\n                break;\n            case 3:\n                message.limit = reader.uint32();\n                break;\n            case 4:\n                message.query = reader.string();\n                break;\n            case 7:\n                message.page = reader.uint32();\n                break;\n            case 8:\n                message.useBoolean = reader.bool();\n                break;\n            case 5:\n                message.createdStart = reader.int64();\n                break;\n            case 6:\n                message.createdEnd = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadSelectFilters message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadSelectFilters} ThreadSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectFilters.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadSelectFilters message.\n     * @function verify\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadSelectFilters.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            switch (message.rankMethod) {\n            default:\n                return \"rankMethod: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n                break;\n            }\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            switch (message.sortDirection) {\n            default:\n                return \"sortDirection: enum value expected\";\n            case 0:\n            case 1:\n                break;\n            }\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            if (!$util.isInteger(message.limit))\n                return \"limit: integer expected\";\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            if (!$util.isString(message.query))\n                return \"query: string expected\";\n        if (message.page != null && message.hasOwnProperty(\"page\"))\n            if (!$util.isInteger(message.page))\n                return \"page: integer expected\";\n        if (message.useBoolean != null && message.hasOwnProperty(\"useBoolean\"))\n            if (typeof message.useBoolean !== \"boolean\")\n                return \"useBoolean: boolean expected\";\n        if (message.createdStart != null && message.hasOwnProperty(\"createdStart\"))\n            if (!$util.isInteger(message.createdStart) && !(message.createdStart && $util.isInteger(message.createdStart.low) && $util.isInteger(message.createdStart.high)))\n                return \"createdStart: integer|Long expected\";\n        if (message.createdEnd != null && message.hasOwnProperty(\"createdEnd\"))\n            if (!$util.isInteger(message.createdEnd) && !(message.createdEnd && $util.isInteger(message.createdEnd.low) && $util.isInteger(message.createdEnd.high)))\n                return \"createdEnd: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadSelectFilters message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadSelectFilters} ThreadSelectFilters\n     */\n    ThreadSelectFilters.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadSelectFilters)\n            return object;\n        var message = new $root.ThreadSelectFilters();\n        switch (object.rankMethod) {\n        case \"HOT\":\n        case 0:\n            message.rankMethod = 0;\n            break;\n        case \"TOP\":\n        case 1:\n            message.rankMethod = 1;\n            break;\n        case \"CONTROVERSIAL\":\n        case 2:\n            message.rankMethod = 2;\n            break;\n        }\n        switch (object.sortDirection) {\n        case \"DESC\":\n        case 0:\n            message.sortDirection = 0;\n            break;\n        case \"ASC\":\n        case 1:\n            message.sortDirection = 1;\n            break;\n        }\n        if (object.limit != null)\n            message.limit = object.limit >>> 0;\n        if (object.query != null)\n            message.query = String(object.query);\n        if (object.page != null)\n            message.page = object.page >>> 0;\n        if (object.useBoolean != null)\n            message.useBoolean = Boolean(object.useBoolean);\n        if (object.createdStart != null)\n            if ($util.Long)\n                (message.createdStart = $util.Long.fromValue(object.createdStart)).unsigned = false;\n            else if (typeof object.createdStart === \"string\")\n                message.createdStart = parseInt(object.createdStart, 10);\n            else if (typeof object.createdStart === \"number\")\n                message.createdStart = object.createdStart;\n            else if (typeof object.createdStart === \"object\")\n                message.createdStart = new $util.LongBits(object.createdStart.low >>> 0, object.createdStart.high >>> 0).toNumber();\n        if (object.createdEnd != null)\n            if ($util.Long)\n                (message.createdEnd = $util.Long.fromValue(object.createdEnd)).unsigned = false;\n            else if (typeof object.createdEnd === \"string\")\n                message.createdEnd = parseInt(object.createdEnd, 10);\n            else if (typeof object.createdEnd === \"number\")\n                message.createdEnd = object.createdEnd;\n            else if (typeof object.createdEnd === \"object\")\n                message.createdEnd = new $util.LongBits(object.createdEnd.low >>> 0, object.createdEnd.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadSelectFilters message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {ThreadSelectFilters} message ThreadSelectFilters\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadSelectFilters.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.rankMethod = options.enums === String ? \"HOT\" : 0;\n            object.sortDirection = options.enums === String ? \"DESC\" : 0;\n            object.limit = 0;\n            object.query = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdStart = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdEnd = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdEnd = options.longs === String ? \"0\" : 0;\n            object.page = 0;\n            object.useBoolean = false;\n        }\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            object.rankMethod = options.enums === String ? $root.ThreadSelectFilters.Method[message.rankMethod] : message.rankMethod;\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            object.sortDirection = options.enums === String ? $root.ThreadSelectFilters.SortDirection[message.sortDirection] : message.sortDirection;\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            object.limit = message.limit;\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            object.query = message.query;\n        if (message.createdStart != null && message.hasOwnProperty(\"createdStart\"))\n            if (typeof message.createdStart === \"number\")\n                object.createdStart = options.longs === String ? String(message.createdStart) : message.createdStart;\n            else\n                object.createdStart = options.longs === String ? $util.Long.prototype.toString.call(message.createdStart) : options.longs === Number ? new $util.LongBits(message.createdStart.low >>> 0, message.createdStart.high >>> 0).toNumber() : message.createdStart;\n        if (message.createdEnd != null && message.hasOwnProperty(\"createdEnd\"))\n            if (typeof message.createdEnd === \"number\")\n                object.createdEnd = options.longs === String ? String(message.createdEnd) : message.createdEnd;\n            else\n                object.createdEnd = options.longs === String ? $util.Long.prototype.toString.call(message.createdEnd) : options.longs === Number ? new $util.LongBits(message.createdEnd.low >>> 0, message.createdEnd.high >>> 0).toNumber() : message.createdEnd;\n        if (message.page != null && message.hasOwnProperty(\"page\"))\n            object.page = message.page;\n        if (message.useBoolean != null && message.hasOwnProperty(\"useBoolean\"))\n            object.useBoolean = message.useBoolean;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadSelectFilters to JSON.\n     * @function toJSON\n     * @memberof ThreadSelectFilters\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadSelectFilters.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * ThreadContentFilter enum.\n     * @name ThreadSelectFilters.ThreadContentFilter\n     * @enum {number}\n     * @property {number} TITLE=0 TITLE value\n     * @property {number} CONTENT=1 CONTENT value\n     * @property {number} FLAIR=2 FLAIR value\n     */\n    ThreadSelectFilters.ThreadContentFilter = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"TITLE\"] = 0;\n        values[valuesById[1] = \"CONTENT\"] = 1;\n        values[valuesById[2] = \"FLAIR\"] = 2;\n        return values;\n    })();\n\n    /**\n     * SortDirection enum.\n     * @name ThreadSelectFilters.SortDirection\n     * @enum {number}\n     * @property {number} DESC=0 DESC value\n     * @property {number} ASC=1 ASC value\n     */\n    ThreadSelectFilters.SortDirection = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"DESC\"] = 0;\n        values[valuesById[1] = \"ASC\"] = 1;\n        return values;\n    })();\n\n    /**\n     * ContentWarning enum.\n     * @name ThreadSelectFilters.ContentWarning\n     * @enum {number}\n     * @property {number} NORMAL=0 NORMAL value\n     * @property {number} NSFW=1 NSFW value\n     * @property {number} NSFL=2 NSFL value\n     */\n    ThreadSelectFilters.ContentWarning = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NORMAL\"] = 0;\n        values[valuesById[1] = \"NSFW\"] = 1;\n        values[valuesById[2] = \"NSFL\"] = 2;\n        return values;\n    })();\n\n    /**\n     * Method enum.\n     * @name ThreadSelectFilters.Method\n     * @enum {number}\n     * @property {number} HOT=0 HOT value\n     * @property {number} TOP=1 TOP value\n     * @property {number} CONTROVERSIAL=2 CONTROVERSIAL value\n     */\n    ThreadSelectFilters.Method = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"HOT\"] = 0;\n        values[valuesById[1] = \"TOP\"] = 1;\n        values[valuesById[2] = \"CONTROVERSIAL\"] = 2;\n        return values;\n    })();\n\n    return ThreadSelectFilters;\n})();\n\n$root.ThreadSelectRequest = (function() {\n\n    /**\n     * Properties of a ThreadSelectRequest.\n     * @exports IThreadSelectRequest\n     * @interface IThreadSelectRequest\n     * @property {IThreadSelectFilters|null} [filters] ThreadSelectRequest filters\n     * @property {string|null} [boardId] ThreadSelectRequest boardId\n     * @property {string|null} [token] ThreadSelectRequest token\n     * @property {boolean|null} [withContext] ThreadSelectRequest withContext\n     */\n\n    /**\n     * Constructs a new ThreadSelectRequest.\n     * @exports ThreadSelectRequest\n     * @classdesc Represents a ThreadSelectRequest.\n     * @implements IThreadSelectRequest\n     * @constructor\n     * @param {IThreadSelectRequest=} [properties] Properties to set\n     */\n    function ThreadSelectRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadSelectRequest filters.\n     * @member {IThreadSelectFilters|null|undefined} filters\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.filters = null;\n\n    /**\n     * ThreadSelectRequest boardId.\n     * @member {string} boardId\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.boardId = \"\";\n\n    /**\n     * ThreadSelectRequest token.\n     * @member {string} token\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.token = \"\";\n\n    /**\n     * ThreadSelectRequest withContext.\n     * @member {boolean} withContext\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.withContext = false;\n\n    /**\n     * Creates a new ThreadSelectRequest instance using the specified properties.\n     * @function create\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {IThreadSelectRequest=} [properties] Properties to set\n     * @returns {ThreadSelectRequest} ThreadSelectRequest instance\n     */\n    ThreadSelectRequest.create = function create(properties) {\n        return new ThreadSelectRequest(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadSelectRequest message. Does not implicitly {@link ThreadSelectRequest.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {IThreadSelectRequest} message ThreadSelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.filters != null && Object.hasOwnProperty.call(message, \"filters\"))\n            $root.ThreadSelectFilters.encode(message.filters, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.boardId);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);\n        if (message.withContext != null && Object.hasOwnProperty.call(message, \"withContext\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.withContext);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadSelectRequest message, length delimited. Does not implicitly {@link ThreadSelectRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {IThreadSelectRequest} message ThreadSelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadSelectRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadSelectRequest} ThreadSelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadSelectRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.filters = $root.ThreadSelectFilters.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.boardId = reader.string();\n                break;\n            case 3:\n                message.token = reader.string();\n                break;\n            case 4:\n                message.withContext = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadSelectRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadSelectRequest} ThreadSelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadSelectRequest message.\n     * @function verify\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadSelectRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.filters != null && message.hasOwnProperty(\"filters\")) {\n            var error = $root.ThreadSelectFilters.verify(message.filters);\n            if (error)\n                return \"filters.\" + error;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        if (message.withContext != null && message.hasOwnProperty(\"withContext\"))\n            if (typeof message.withContext !== \"boolean\")\n                return \"withContext: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadSelectRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadSelectRequest} ThreadSelectRequest\n     */\n    ThreadSelectRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadSelectRequest)\n            return object;\n        var message = new $root.ThreadSelectRequest();\n        if (object.filters != null) {\n            if (typeof object.filters !== \"object\")\n                throw TypeError(\".ThreadSelectRequest.filters: object expected\");\n            message.filters = $root.ThreadSelectFilters.fromObject(object.filters);\n        }\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.token != null)\n            message.token = String(object.token);\n        if (object.withContext != null)\n            message.withContext = Boolean(object.withContext);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadSelectRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {ThreadSelectRequest} message ThreadSelectRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadSelectRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.filters = null;\n            object.boardId = \"\";\n            object.token = \"\";\n            object.withContext = false;\n        }\n        if (message.filters != null && message.hasOwnProperty(\"filters\"))\n            object.filters = $root.ThreadSelectFilters.toObject(message.filters, options);\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        if (message.withContext != null && message.hasOwnProperty(\"withContext\"))\n            object.withContext = message.withContext;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadSelectRequest to JSON.\n     * @function toJSON\n     * @memberof ThreadSelectRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadSelectRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadSelectRequest;\n})();\n\n$root.ThreadsSelectResponse = (function() {\n\n    /**\n     * Properties of a ThreadsSelectResponse.\n     * @exports IThreadsSelectResponse\n     * @interface IThreadsSelectResponse\n     * @property {Array.<IThread>|null} [data] ThreadsSelectResponse data\n     * @property {string|null} [token] ThreadsSelectResponse token\n     * @property {Object.<string,ICommunityUserRef>|null} [users] ThreadsSelectResponse users\n     */\n\n    /**\n     * Constructs a new ThreadsSelectResponse.\n     * @exports ThreadsSelectResponse\n     * @classdesc Represents a ThreadsSelectResponse.\n     * @implements IThreadsSelectResponse\n     * @constructor\n     * @param {IThreadsSelectResponse=} [properties] Properties to set\n     */\n    function ThreadsSelectResponse(properties) {\n        this.data = [];\n        this.users = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadsSelectResponse data.\n     * @member {Array.<IThread>} data\n     * @memberof ThreadsSelectResponse\n     * @instance\n     */\n    ThreadsSelectResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * ThreadsSelectResponse token.\n     * @member {string} token\n     * @memberof ThreadsSelectResponse\n     * @instance\n     */\n    ThreadsSelectResponse.prototype.token = \"\";\n\n    /**\n     * ThreadsSelectResponse users.\n     * @member {Object.<string,ICommunityUserRef>} users\n     * @memberof ThreadsSelectResponse\n     * @instance\n     */\n    ThreadsSelectResponse.prototype.users = $util.emptyObject;\n\n    /**\n     * Creates a new ThreadsSelectResponse instance using the specified properties.\n     * @function create\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {IThreadsSelectResponse=} [properties] Properties to set\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse instance\n     */\n    ThreadsSelectResponse.create = function create(properties) {\n        return new ThreadsSelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponse message. Does not implicitly {@link ThreadsSelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {IThreadsSelectResponse} message ThreadsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Thread.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        if (message.users != null && Object.hasOwnProperty.call(message, \"users\"))\n            for (var keys = Object.keys(message.users), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.CommunityUserRef.encode(message.users[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponse message, length delimited. Does not implicitly {@link ThreadsSelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {IThreadsSelectResponse} message ThreadsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadsSelectResponse(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Thread.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            case 3:\n                if (message.users === $util.emptyObject)\n                    message.users = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = null;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = $root.CommunityUserRef.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.users[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadsSelectResponse message.\n     * @function verify\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadsSelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Thread.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        if (message.users != null && message.hasOwnProperty(\"users\")) {\n            if (!$util.isObject(message.users))\n                return \"users: object expected\";\n            var key = Object.keys(message.users);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.CommunityUserRef.verify(message.users[key[i]]);\n                if (error)\n                    return \"users.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadsSelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse\n     */\n    ThreadsSelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadsSelectResponse)\n            return object;\n        var message = new $root.ThreadsSelectResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".ThreadsSelectResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".ThreadsSelectResponse.data: object expected\");\n                message.data[i] = $root.Thread.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        if (object.users) {\n            if (typeof object.users !== \"object\")\n                throw TypeError(\".ThreadsSelectResponse.users: object expected\");\n            message.users = {};\n            for (var keys = Object.keys(object.users), i = 0; i < keys.length; ++i) {\n                if (typeof object.users[keys[i]] !== \"object\")\n                    throw TypeError(\".ThreadsSelectResponse.users: object expected\");\n                message.users[keys[i]] = $root.CommunityUserRef.fromObject(object.users[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadsSelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {ThreadsSelectResponse} message ThreadsSelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadsSelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.objects || options.defaults)\n            object.users = {};\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Thread.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        var keys2;\n        if (message.users && (keys2 = Object.keys(message.users)).length) {\n            object.users = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.users[keys2[j]] = $root.CommunityUserRef.toObject(message.users[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ThreadsSelectResponse to JSON.\n     * @function toJSON\n     * @memberof ThreadsSelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadsSelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadsSelectResponse;\n})();\n\n$root.ThreadsSelectResponseWithBoardContext = (function() {\n\n    /**\n     * Properties of a ThreadsSelectResponseWithBoardContext.\n     * @exports IThreadsSelectResponseWithBoardContext\n     * @interface IThreadsSelectResponseWithBoardContext\n     * @property {IThreadsSelectResponse|null} [threads] ThreadsSelectResponseWithBoardContext threads\n     * @property {IBoard|null} [board] ThreadsSelectResponseWithBoardContext board\n     */\n\n    /**\n     * Constructs a new ThreadsSelectResponseWithBoardContext.\n     * @exports ThreadsSelectResponseWithBoardContext\n     * @classdesc Represents a ThreadsSelectResponseWithBoardContext.\n     * @implements IThreadsSelectResponseWithBoardContext\n     * @constructor\n     * @param {IThreadsSelectResponseWithBoardContext=} [properties] Properties to set\n     */\n    function ThreadsSelectResponseWithBoardContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadsSelectResponseWithBoardContext threads.\n     * @member {IThreadsSelectResponse|null|undefined} threads\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @instance\n     */\n    ThreadsSelectResponseWithBoardContext.prototype.threads = null;\n\n    /**\n     * ThreadsSelectResponseWithBoardContext board.\n     * @member {IBoard|null|undefined} board\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @instance\n     */\n    ThreadsSelectResponseWithBoardContext.prototype.board = null;\n\n    /**\n     * Creates a new ThreadsSelectResponseWithBoardContext instance using the specified properties.\n     * @function create\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {IThreadsSelectResponseWithBoardContext=} [properties] Properties to set\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext instance\n     */\n    ThreadsSelectResponseWithBoardContext.create = function create(properties) {\n        return new ThreadsSelectResponseWithBoardContext(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponseWithBoardContext message. Does not implicitly {@link ThreadsSelectResponseWithBoardContext.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {IThreadsSelectResponseWithBoardContext} message ThreadsSelectResponseWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponseWithBoardContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threads != null && Object.hasOwnProperty.call(message, \"threads\"))\n            $root.ThreadsSelectResponse.encode(message.threads, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n            $root.Board.encode(message.board, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponseWithBoardContext message, length delimited. Does not implicitly {@link ThreadsSelectResponseWithBoardContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {IThreadsSelectResponseWithBoardContext} message ThreadsSelectResponseWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponseWithBoardContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponseWithBoardContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponseWithBoardContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadsSelectResponseWithBoardContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threads = $root.ThreadsSelectResponse.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.board = $root.Board.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponseWithBoardContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponseWithBoardContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadsSelectResponseWithBoardContext message.\n     * @function verify\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadsSelectResponseWithBoardContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threads != null && message.hasOwnProperty(\"threads\")) {\n            var error = $root.ThreadsSelectResponse.verify(message.threads);\n            if (error)\n                return \"threads.\" + error;\n        }\n        if (message.board != null && message.hasOwnProperty(\"board\")) {\n            var error = $root.Board.verify(message.board);\n            if (error)\n                return \"board.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadsSelectResponseWithBoardContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext\n     */\n    ThreadsSelectResponseWithBoardContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadsSelectResponseWithBoardContext)\n            return object;\n        var message = new $root.ThreadsSelectResponseWithBoardContext();\n        if (object.threads != null) {\n            if (typeof object.threads !== \"object\")\n                throw TypeError(\".ThreadsSelectResponseWithBoardContext.threads: object expected\");\n            message.threads = $root.ThreadsSelectResponse.fromObject(object.threads);\n        }\n        if (object.board != null) {\n            if (typeof object.board !== \"object\")\n                throw TypeError(\".ThreadsSelectResponseWithBoardContext.board: object expected\");\n            message.board = $root.Board.fromObject(object.board);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadsSelectResponseWithBoardContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {ThreadsSelectResponseWithBoardContext} message ThreadsSelectResponseWithBoardContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadsSelectResponseWithBoardContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.threads = null;\n            object.board = null;\n        }\n        if (message.threads != null && message.hasOwnProperty(\"threads\"))\n            object.threads = $root.ThreadsSelectResponse.toObject(message.threads, options);\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            object.board = $root.Board.toObject(message.board, options);\n        return object;\n    };\n\n    /**\n     * Converts this ThreadsSelectResponseWithBoardContext to JSON.\n     * @function toJSON\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadsSelectResponseWithBoardContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadsSelectResponseWithBoardContext;\n})();\n\n$root.UserCreate = (function() {\n\n    /**\n     * Properties of a UserCreate.\n     * @exports IUserCreate\n     * @interface IUserCreate\n     * @property {string|null} [username] UserCreate username\n     * @property {string|null} [email] UserCreate email\n     * @property {string|null} [key] UserCreate key\n     * @property {boolean|null} [acceptEmail] UserCreate acceptEmail\n     * @property {boolean|null} [subscribeNewsletter] UserCreate subscribeNewsletter\n     */\n\n    /**\n     * Constructs a new UserCreate.\n     * @exports UserCreate\n     * @classdesc Represents a UserCreate.\n     * @implements IUserCreate\n     * @constructor\n     * @param {IUserCreate=} [properties] Properties to set\n     */\n    function UserCreate(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserCreate username.\n     * @member {string} username\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.username = \"\";\n\n    /**\n     * UserCreate email.\n     * @member {string} email\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.email = \"\";\n\n    /**\n     * UserCreate key.\n     * @member {string} key\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.key = \"\";\n\n    /**\n     * UserCreate acceptEmail.\n     * @member {boolean} acceptEmail\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.acceptEmail = false;\n\n    /**\n     * UserCreate subscribeNewsletter.\n     * @member {boolean} subscribeNewsletter\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.subscribeNewsletter = false;\n\n    /**\n     * Creates a new UserCreate instance using the specified properties.\n     * @function create\n     * @memberof UserCreate\n     * @static\n     * @param {IUserCreate=} [properties] Properties to set\n     * @returns {UserCreate} UserCreate instance\n     */\n    UserCreate.create = function create(properties) {\n        return new UserCreate(properties);\n    };\n\n    /**\n     * Encodes the specified UserCreate message. Does not implicitly {@link UserCreate.verify|verify} messages.\n     * @function encode\n     * @memberof UserCreate\n     * @static\n     * @param {IUserCreate} message UserCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserCreate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);\n        if (message.email != null && Object.hasOwnProperty.call(message, \"email\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);\n        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.key);\n        if (message.acceptEmail != null && Object.hasOwnProperty.call(message, \"acceptEmail\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.acceptEmail);\n        if (message.subscribeNewsletter != null && Object.hasOwnProperty.call(message, \"subscribeNewsletter\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.subscribeNewsletter);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserCreate message, length delimited. Does not implicitly {@link UserCreate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserCreate\n     * @static\n     * @param {IUserCreate} message UserCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserCreate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserCreate message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserCreate} UserCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserCreate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserCreate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.username = reader.string();\n                break;\n            case 2:\n                message.email = reader.string();\n                break;\n            case 3:\n                message.key = reader.string();\n                break;\n            case 4:\n                message.acceptEmail = reader.bool();\n                break;\n            case 5:\n                message.subscribeNewsletter = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserCreate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserCreate} UserCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserCreate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserCreate message.\n     * @function verify\n     * @memberof UserCreate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserCreate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            if (!$util.isString(message.email))\n                return \"email: string expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            if (!$util.isString(message.key))\n                return \"key: string expected\";\n        if (message.acceptEmail != null && message.hasOwnProperty(\"acceptEmail\"))\n            if (typeof message.acceptEmail !== \"boolean\")\n                return \"acceptEmail: boolean expected\";\n        if (message.subscribeNewsletter != null && message.hasOwnProperty(\"subscribeNewsletter\"))\n            if (typeof message.subscribeNewsletter !== \"boolean\")\n                return \"subscribeNewsletter: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserCreate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserCreate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserCreate} UserCreate\n     */\n    UserCreate.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserCreate)\n            return object;\n        var message = new $root.UserCreate();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.email != null)\n            message.email = String(object.email);\n        if (object.key != null)\n            message.key = String(object.key);\n        if (object.acceptEmail != null)\n            message.acceptEmail = Boolean(object.acceptEmail);\n        if (object.subscribeNewsletter != null)\n            message.subscribeNewsletter = Boolean(object.subscribeNewsletter);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserCreate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserCreate\n     * @static\n     * @param {UserCreate} message UserCreate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserCreate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.email = \"\";\n            object.key = \"\";\n            object.acceptEmail = false;\n            object.subscribeNewsletter = false;\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            object.email = message.email;\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = message.key;\n        if (message.acceptEmail != null && message.hasOwnProperty(\"acceptEmail\"))\n            object.acceptEmail = message.acceptEmail;\n        if (message.subscribeNewsletter != null && message.hasOwnProperty(\"subscribeNewsletter\"))\n            object.subscribeNewsletter = message.subscribeNewsletter;\n        return object;\n    };\n\n    /**\n     * Converts this UserCreate to JSON.\n     * @function toJSON\n     * @memberof UserCreate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserCreate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserCreate;\n})();\n\n$root.UserSubscribedRequest = (function() {\n\n    /**\n     * Properties of a UserSubscribedRequest.\n     * @exports IUserSubscribedRequest\n     * @interface IUserSubscribedRequest\n     */\n\n    /**\n     * Constructs a new UserSubscribedRequest.\n     * @exports UserSubscribedRequest\n     * @classdesc Represents a UserSubscribedRequest.\n     * @implements IUserSubscribedRequest\n     * @constructor\n     * @param {IUserSubscribedRequest=} [properties] Properties to set\n     */\n    function UserSubscribedRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new UserSubscribedRequest instance using the specified properties.\n     * @function create\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {IUserSubscribedRequest=} [properties] Properties to set\n     * @returns {UserSubscribedRequest} UserSubscribedRequest instance\n     */\n    UserSubscribedRequest.create = function create(properties) {\n        return new UserSubscribedRequest(properties);\n    };\n\n    /**\n     * Encodes the specified UserSubscribedRequest message. Does not implicitly {@link UserSubscribedRequest.verify|verify} messages.\n     * @function encode\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {IUserSubscribedRequest} message UserSubscribedRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserSubscribedRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserSubscribedRequest message, length delimited. Does not implicitly {@link UserSubscribedRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {IUserSubscribedRequest} message UserSubscribedRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserSubscribedRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserSubscribedRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserSubscribedRequest} UserSubscribedRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserSubscribedRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserSubscribedRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserSubscribedRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserSubscribedRequest} UserSubscribedRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserSubscribedRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserSubscribedRequest message.\n     * @function verify\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserSubscribedRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserSubscribedRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserSubscribedRequest} UserSubscribedRequest\n     */\n    UserSubscribedRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserSubscribedRequest)\n            return object;\n        return new $root.UserSubscribedRequest();\n    };\n\n    /**\n     * Creates a plain object from a UserSubscribedRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {UserSubscribedRequest} message UserSubscribedRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserSubscribedRequest.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this UserSubscribedRequest to JSON.\n     * @function toJSON\n     * @memberof UserSubscribedRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserSubscribedRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserSubscribedRequest;\n})();\n\n$root.BlogSubscription = (function() {\n\n    /**\n     * Properties of a BlogSubscription.\n     * @exports IBlogSubscription\n     * @interface IBlogSubscription\n     */\n\n    /**\n     * Constructs a new BlogSubscription.\n     * @exports BlogSubscription\n     * @classdesc Represents a BlogSubscription.\n     * @implements IBlogSubscription\n     * @constructor\n     * @param {IBlogSubscription=} [properties] Properties to set\n     */\n    function BlogSubscription(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new BlogSubscription instance using the specified properties.\n     * @function create\n     * @memberof BlogSubscription\n     * @static\n     * @param {IBlogSubscription=} [properties] Properties to set\n     * @returns {BlogSubscription} BlogSubscription instance\n     */\n    BlogSubscription.create = function create(properties) {\n        return new BlogSubscription(properties);\n    };\n\n    /**\n     * Encodes the specified BlogSubscription message. Does not implicitly {@link BlogSubscription.verify|verify} messages.\n     * @function encode\n     * @memberof BlogSubscription\n     * @static\n     * @param {IBlogSubscription} message BlogSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BlogSubscription.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BlogSubscription message, length delimited. Does not implicitly {@link BlogSubscription.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BlogSubscription\n     * @static\n     * @param {IBlogSubscription} message BlogSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BlogSubscription.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BlogSubscription message from the specified reader or buffer.\n     * @function decode\n     * @memberof BlogSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BlogSubscription} BlogSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BlogSubscription.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BlogSubscription();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BlogSubscription message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BlogSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BlogSubscription} BlogSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BlogSubscription.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BlogSubscription message.\n     * @function verify\n     * @memberof BlogSubscription\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BlogSubscription.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BlogSubscription message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BlogSubscription\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BlogSubscription} BlogSubscription\n     */\n    BlogSubscription.fromObject = function fromObject(object) {\n        if (object instanceof $root.BlogSubscription)\n            return object;\n        return new $root.BlogSubscription();\n    };\n\n    /**\n     * Creates a plain object from a BlogSubscription message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BlogSubscription\n     * @static\n     * @param {BlogSubscription} message BlogSubscription\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BlogSubscription.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this BlogSubscription to JSON.\n     * @function toJSON\n     * @memberof BlogSubscription\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BlogSubscription.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BlogSubscription;\n})();\n\n$root.UserMod = (function() {\n\n    /**\n     * Properties of a UserMod.\n     * @exports IUserMod\n     * @interface IUserMod\n     * @property {string|null} [boardId] UserMod boardId\n     * @property {number|null} [createdAt] UserMod createdAt\n     */\n\n    /**\n     * Constructs a new UserMod.\n     * @exports UserMod\n     * @classdesc Represents a UserMod.\n     * @implements IUserMod\n     * @constructor\n     * @param {IUserMod=} [properties] Properties to set\n     */\n    function UserMod(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserMod boardId.\n     * @member {string} boardId\n     * @memberof UserMod\n     * @instance\n     */\n    UserMod.prototype.boardId = \"\";\n\n    /**\n     * UserMod createdAt.\n     * @member {number} createdAt\n     * @memberof UserMod\n     * @instance\n     */\n    UserMod.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new UserMod instance using the specified properties.\n     * @function create\n     * @memberof UserMod\n     * @static\n     * @param {IUserMod=} [properties] Properties to set\n     * @returns {UserMod} UserMod instance\n     */\n    UserMod.create = function create(properties) {\n        return new UserMod(properties);\n    };\n\n    /**\n     * Encodes the specified UserMod message. Does not implicitly {@link UserMod.verify|verify} messages.\n     * @function encode\n     * @memberof UserMod\n     * @static\n     * @param {IUserMod} message UserMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMod.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.boardId);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserMod message, length delimited. Does not implicitly {@link UserMod.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserMod\n     * @static\n     * @param {IUserMod} message UserMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMod.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserMod message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserMod} UserMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMod.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserMod();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.boardId = reader.string();\n                break;\n            case 2:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserMod message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserMod} UserMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMod.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserMod message.\n     * @function verify\n     * @memberof UserMod\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserMod.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserMod message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserMod\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserMod} UserMod\n     */\n    UserMod.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserMod)\n            return object;\n        var message = new $root.UserMod();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserMod message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserMod\n     * @static\n     * @param {UserMod} message UserMod\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserMod.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.boardId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this UserMod to JSON.\n     * @function toJSON\n     * @memberof UserMod\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserMod.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserMod;\n})();\n\n$root.BoardMod = (function() {\n\n    /**\n     * Properties of a BoardMod.\n     * @exports IBoardMod\n     * @interface IBoardMod\n     * @property {string|null} [userId] BoardMod userId\n     * @property {number|null} [createdAt] BoardMod createdAt\n     */\n\n    /**\n     * Constructs a new BoardMod.\n     * @exports BoardMod\n     * @classdesc Represents a BoardMod.\n     * @implements IBoardMod\n     * @constructor\n     * @param {IBoardMod=} [properties] Properties to set\n     */\n    function BoardMod(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardMod userId.\n     * @member {string} userId\n     * @memberof BoardMod\n     * @instance\n     */\n    BoardMod.prototype.userId = \"\";\n\n    /**\n     * BoardMod createdAt.\n     * @member {number} createdAt\n     * @memberof BoardMod\n     * @instance\n     */\n    BoardMod.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new BoardMod instance using the specified properties.\n     * @function create\n     * @memberof BoardMod\n     * @static\n     * @param {IBoardMod=} [properties] Properties to set\n     * @returns {BoardMod} BoardMod instance\n     */\n    BoardMod.create = function create(properties) {\n        return new BoardMod(properties);\n    };\n\n    /**\n     * Encodes the specified BoardMod message. Does not implicitly {@link BoardMod.verify|verify} messages.\n     * @function encode\n     * @memberof BoardMod\n     * @static\n     * @param {IBoardMod} message BoardMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardMod.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardMod message, length delimited. Does not implicitly {@link BoardMod.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardMod\n     * @static\n     * @param {IBoardMod} message BoardMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardMod.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardMod message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardMod} BoardMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardMod.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardMod();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardMod message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardMod} BoardMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardMod.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardMod message.\n     * @function verify\n     * @memberof BoardMod\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardMod.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardMod message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardMod\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardMod} BoardMod\n     */\n    BoardMod.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardMod)\n            return object;\n        var message = new $root.BoardMod();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardMod message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardMod\n     * @static\n     * @param {BoardMod} message BoardMod\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardMod.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this BoardMod to JSON.\n     * @function toJSON\n     * @memberof BoardMod\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardMod.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardMod;\n})();\n\n$root.BoardCreate = (function() {\n\n    /**\n     * Properties of a BoardCreate.\n     * @exports IBoardCreate\n     * @interface IBoardCreate\n     * @property {string|null} [name] BoardCreate name\n     */\n\n    /**\n     * Constructs a new BoardCreate.\n     * @exports BoardCreate\n     * @classdesc Represents a BoardCreate.\n     * @implements IBoardCreate\n     * @constructor\n     * @param {IBoardCreate=} [properties] Properties to set\n     */\n    function BoardCreate(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardCreate name.\n     * @member {string} name\n     * @memberof BoardCreate\n     * @instance\n     */\n    BoardCreate.prototype.name = \"\";\n\n    /**\n     * Creates a new BoardCreate instance using the specified properties.\n     * @function create\n     * @memberof BoardCreate\n     * @static\n     * @param {IBoardCreate=} [properties] Properties to set\n     * @returns {BoardCreate} BoardCreate instance\n     */\n    BoardCreate.create = function create(properties) {\n        return new BoardCreate(properties);\n    };\n\n    /**\n     * Encodes the specified BoardCreate message. Does not implicitly {@link BoardCreate.verify|verify} messages.\n     * @function encode\n     * @memberof BoardCreate\n     * @static\n     * @param {IBoardCreate} message BoardCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardCreate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardCreate message, length delimited. Does not implicitly {@link BoardCreate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardCreate\n     * @static\n     * @param {IBoardCreate} message BoardCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardCreate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardCreate message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardCreate} BoardCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardCreate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardCreate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardCreate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardCreate} BoardCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardCreate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardCreate message.\n     * @function verify\n     * @memberof BoardCreate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardCreate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardCreate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardCreate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardCreate} BoardCreate\n     */\n    BoardCreate.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardCreate)\n            return object;\n        var message = new $root.BoardCreate();\n        if (object.name != null)\n            message.name = String(object.name);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardCreate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardCreate\n     * @static\n     * @param {BoardCreate} message BoardCreate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardCreate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        return object;\n    };\n\n    /**\n     * Converts this BoardCreate to JSON.\n     * @function toJSON\n     * @memberof BoardCreate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardCreate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardCreate;\n})();\n\n$root.UserModerationAction = (function() {\n\n    /**\n     * Properties of a UserModerationAction.\n     * @exports IUserModerationAction\n     * @interface IUserModerationAction\n     * @property {number|null} [endsAt] UserModerationAction endsAt\n     */\n\n    /**\n     * Constructs a new UserModerationAction.\n     * @exports UserModerationAction\n     * @classdesc Represents a UserModerationAction.\n     * @implements IUserModerationAction\n     * @constructor\n     * @param {IUserModerationAction=} [properties] Properties to set\n     */\n    function UserModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserModerationAction endsAt.\n     * @member {number} endsAt\n     * @memberof UserModerationAction\n     * @instance\n     */\n    UserModerationAction.prototype.endsAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new UserModerationAction instance using the specified properties.\n     * @function create\n     * @memberof UserModerationAction\n     * @static\n     * @param {IUserModerationAction=} [properties] Properties to set\n     * @returns {UserModerationAction} UserModerationAction instance\n     */\n    UserModerationAction.create = function create(properties) {\n        return new UserModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified UserModerationAction message. Does not implicitly {@link UserModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof UserModerationAction\n     * @static\n     * @param {IUserModerationAction} message UserModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endsAt != null && Object.hasOwnProperty.call(message, \"endsAt\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.endsAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserModerationAction message, length delimited. Does not implicitly {@link UserModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserModerationAction\n     * @static\n     * @param {IUserModerationAction} message UserModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserModerationAction} UserModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.endsAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserModerationAction} UserModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserModerationAction message.\n     * @function verify\n     * @memberof UserModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (!$util.isInteger(message.endsAt) && !(message.endsAt && $util.isInteger(message.endsAt.low) && $util.isInteger(message.endsAt.high)))\n                return \"endsAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserModerationAction} UserModerationAction\n     */\n    UserModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserModerationAction)\n            return object;\n        var message = new $root.UserModerationAction();\n        if (object.endsAt != null)\n            if ($util.Long)\n                (message.endsAt = $util.Long.fromValue(object.endsAt)).unsigned = false;\n            else if (typeof object.endsAt === \"string\")\n                message.endsAt = parseInt(object.endsAt, 10);\n            else if (typeof object.endsAt === \"number\")\n                message.endsAt = object.endsAt;\n            else if (typeof object.endsAt === \"object\")\n                message.endsAt = new $util.LongBits(object.endsAt.low >>> 0, object.endsAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserModerationAction\n     * @static\n     * @param {UserModerationAction} message UserModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.endsAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.endsAt = options.longs === String ? \"0\" : 0;\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (typeof message.endsAt === \"number\")\n                object.endsAt = options.longs === String ? String(message.endsAt) : message.endsAt;\n            else\n                object.endsAt = options.longs === String ? $util.Long.prototype.toString.call(message.endsAt) : options.longs === Number ? new $util.LongBits(message.endsAt.low >>> 0, message.endsAt.high >>> 0).toNumber() : message.endsAt;\n        return object;\n    };\n\n    /**\n     * Converts this UserModerationAction to JSON.\n     * @function toJSON\n     * @memberof UserModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserModerationAction;\n})();\n\n$root.ModerationAction = (function() {\n\n    /**\n     * Properties of a ModerationAction.\n     * @exports IModerationAction\n     * @interface IModerationAction\n     * @property {string|null} [action] ModerationAction action\n     * @property {number|null} [category] ModerationAction category\n     * @property {string|null} [reason] ModerationAction reason\n     * @property {IUserModerationAction|null} [user] ModerationAction user\n     * @property {number|null} [endsAt] ModerationAction endsAt\n     */\n\n    /**\n     * Constructs a new ModerationAction.\n     * @exports ModerationAction\n     * @classdesc Represents a ModerationAction.\n     * @implements IModerationAction\n     * @constructor\n     * @param {IModerationAction=} [properties] Properties to set\n     */\n    function ModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ModerationAction action.\n     * @member {string} action\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.action = \"\";\n\n    /**\n     * ModerationAction category.\n     * @member {number} category\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.category = 0;\n\n    /**\n     * ModerationAction reason.\n     * @member {string} reason\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.reason = \"\";\n\n    /**\n     * ModerationAction user.\n     * @member {IUserModerationAction|null|undefined} user\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.user = null;\n\n    /**\n     * ModerationAction endsAt.\n     * @member {number} endsAt\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.endsAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ModerationAction instance using the specified properties.\n     * @function create\n     * @memberof ModerationAction\n     * @static\n     * @param {IModerationAction=} [properties] Properties to set\n     * @returns {ModerationAction} ModerationAction instance\n     */\n    ModerationAction.create = function create(properties) {\n        return new ModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified ModerationAction message. Does not implicitly {@link ModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof ModerationAction\n     * @static\n     * @param {IModerationAction} message ModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.action);\n        if (message.category != null && Object.hasOwnProperty.call(message, \"category\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.category);\n        if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.UserModerationAction.encode(message.user, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.endsAt != null && Object.hasOwnProperty.call(message, \"endsAt\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.endsAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ModerationAction message, length delimited. Does not implicitly {@link ModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ModerationAction\n     * @static\n     * @param {IModerationAction} message ModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof ModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ModerationAction} ModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.string();\n                break;\n            case 2:\n                message.category = reader.int32();\n                break;\n            case 3:\n                message.reason = reader.string();\n                break;\n            case 4:\n                message.user = $root.UserModerationAction.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.endsAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ModerationAction} ModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ModerationAction message.\n     * @function verify\n     * @memberof ModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            if (!$util.isString(message.action))\n                return \"action: string expected\";\n        if (message.category != null && message.hasOwnProperty(\"category\"))\n            if (!$util.isInteger(message.category))\n                return \"category: integer expected\";\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            if (!$util.isString(message.reason))\n                return \"reason: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.UserModerationAction.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (!$util.isInteger(message.endsAt) && !(message.endsAt && $util.isInteger(message.endsAt.low) && $util.isInteger(message.endsAt.high)))\n                return \"endsAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ModerationAction} ModerationAction\n     */\n    ModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.ModerationAction)\n            return object;\n        var message = new $root.ModerationAction();\n        if (object.action != null)\n            message.action = String(object.action);\n        if (object.category != null)\n            message.category = object.category | 0;\n        if (object.reason != null)\n            message.reason = String(object.reason);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".ModerationAction.user: object expected\");\n            message.user = $root.UserModerationAction.fromObject(object.user);\n        }\n        if (object.endsAt != null)\n            if ($util.Long)\n                (message.endsAt = $util.Long.fromValue(object.endsAt)).unsigned = false;\n            else if (typeof object.endsAt === \"string\")\n                message.endsAt = parseInt(object.endsAt, 10);\n            else if (typeof object.endsAt === \"number\")\n                message.endsAt = object.endsAt;\n            else if (typeof object.endsAt === \"object\")\n                message.endsAt = new $util.LongBits(object.endsAt.low >>> 0, object.endsAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ModerationAction\n     * @static\n     * @param {ModerationAction} message ModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = \"\";\n            object.category = 0;\n            object.reason = \"\";\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.endsAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.endsAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = message.action;\n        if (message.category != null && message.hasOwnProperty(\"category\"))\n            object.category = message.category;\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            object.reason = message.reason;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.UserModerationAction.toObject(message.user, options);\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (typeof message.endsAt === \"number\")\n                object.endsAt = options.longs === String ? String(message.endsAt) : message.endsAt;\n            else\n                object.endsAt = options.longs === String ? $util.Long.prototype.toString.call(message.endsAt) : options.longs === Number ? new $util.LongBits(message.endsAt.low >>> 0, message.endsAt.high >>> 0).toNumber() : message.endsAt;\n        return object;\n    };\n\n    /**\n     * Converts this ModerationAction to JSON.\n     * @function toJSON\n     * @memberof ModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ModerationAction;\n})();\n\n$root.ThreadModerationAction = (function() {\n\n    /**\n     * Properties of a ThreadModerationAction.\n     * @exports IThreadModerationAction\n     * @interface IThreadModerationAction\n     * @property {IModerationAction|null} [action] ThreadModerationAction action\n     * @property {string|null} [threadId] ThreadModerationAction threadId\n     */\n\n    /**\n     * Constructs a new ThreadModerationAction.\n     * @exports ThreadModerationAction\n     * @classdesc Represents a ThreadModerationAction.\n     * @implements IThreadModerationAction\n     * @constructor\n     * @param {IThreadModerationAction=} [properties] Properties to set\n     */\n    function ThreadModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadModerationAction action.\n     * @member {IModerationAction|null|undefined} action\n     * @memberof ThreadModerationAction\n     * @instance\n     */\n    ThreadModerationAction.prototype.action = null;\n\n    /**\n     * ThreadModerationAction threadId.\n     * @member {string} threadId\n     * @memberof ThreadModerationAction\n     * @instance\n     */\n    ThreadModerationAction.prototype.threadId = \"\";\n\n    /**\n     * Creates a new ThreadModerationAction instance using the specified properties.\n     * @function create\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {IThreadModerationAction=} [properties] Properties to set\n     * @returns {ThreadModerationAction} ThreadModerationAction instance\n     */\n    ThreadModerationAction.create = function create(properties) {\n        return new ThreadModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadModerationAction message. Does not implicitly {@link ThreadModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {IThreadModerationAction} message ThreadModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            $root.ModerationAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.threadId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadModerationAction message, length delimited. Does not implicitly {@link ThreadModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {IThreadModerationAction} message ThreadModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadModerationAction} ThreadModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = $root.ModerationAction.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.threadId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadModerationAction} ThreadModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadModerationAction message.\n     * @function verify\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\")) {\n            var error = $root.ModerationAction.verify(message.action);\n            if (error)\n                return \"action.\" + error;\n        }\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadModerationAction} ThreadModerationAction\n     */\n    ThreadModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadModerationAction)\n            return object;\n        var message = new $root.ThreadModerationAction();\n        if (object.action != null) {\n            if (typeof object.action !== \"object\")\n                throw TypeError(\".ThreadModerationAction.action: object expected\");\n            message.action = $root.ModerationAction.fromObject(object.action);\n        }\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {ThreadModerationAction} message ThreadModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = null;\n            object.threadId = \"\";\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = $root.ModerationAction.toObject(message.action, options);\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadModerationAction to JSON.\n     * @function toJSON\n     * @memberof ThreadModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadModerationAction;\n})();\n\n$root.CommentModerationAction = (function() {\n\n    /**\n     * Properties of a CommentModerationAction.\n     * @exports ICommentModerationAction\n     * @interface ICommentModerationAction\n     * @property {IModerationAction|null} [action] CommentModerationAction action\n     * @property {string|null} [commentId] CommentModerationAction commentId\n     */\n\n    /**\n     * Constructs a new CommentModerationAction.\n     * @exports CommentModerationAction\n     * @classdesc Represents a CommentModerationAction.\n     * @implements ICommentModerationAction\n     * @constructor\n     * @param {ICommentModerationAction=} [properties] Properties to set\n     */\n    function CommentModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentModerationAction action.\n     * @member {IModerationAction|null|undefined} action\n     * @memberof CommentModerationAction\n     * @instance\n     */\n    CommentModerationAction.prototype.action = null;\n\n    /**\n     * CommentModerationAction commentId.\n     * @member {string} commentId\n     * @memberof CommentModerationAction\n     * @instance\n     */\n    CommentModerationAction.prototype.commentId = \"\";\n\n    /**\n     * Creates a new CommentModerationAction instance using the specified properties.\n     * @function create\n     * @memberof CommentModerationAction\n     * @static\n     * @param {ICommentModerationAction=} [properties] Properties to set\n     * @returns {CommentModerationAction} CommentModerationAction instance\n     */\n    CommentModerationAction.create = function create(properties) {\n        return new CommentModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified CommentModerationAction message. Does not implicitly {@link CommentModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof CommentModerationAction\n     * @static\n     * @param {ICommentModerationAction} message CommentModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            $root.ModerationAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.commentId != null && Object.hasOwnProperty.call(message, \"commentId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.commentId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentModerationAction message, length delimited. Does not implicitly {@link CommentModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentModerationAction\n     * @static\n     * @param {ICommentModerationAction} message CommentModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentModerationAction} CommentModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = $root.ModerationAction.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.commentId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentModerationAction} CommentModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentModerationAction message.\n     * @function verify\n     * @memberof CommentModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\")) {\n            var error = $root.ModerationAction.verify(message.action);\n            if (error)\n                return \"action.\" + error;\n        }\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            if (!$util.isString(message.commentId))\n                return \"commentId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentModerationAction} CommentModerationAction\n     */\n    CommentModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentModerationAction)\n            return object;\n        var message = new $root.CommentModerationAction();\n        if (object.action != null) {\n            if (typeof object.action !== \"object\")\n                throw TypeError(\".CommentModerationAction.action: object expected\");\n            message.action = $root.ModerationAction.fromObject(object.action);\n        }\n        if (object.commentId != null)\n            message.commentId = String(object.commentId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentModerationAction\n     * @static\n     * @param {CommentModerationAction} message CommentModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = null;\n            object.commentId = \"\";\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = $root.ModerationAction.toObject(message.action, options);\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            object.commentId = message.commentId;\n        return object;\n    };\n\n    /**\n     * Converts this CommentModerationAction to JSON.\n     * @function toJSON\n     * @memberof CommentModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentModerationAction;\n})();\n\n$root.BoardModerationAction = (function() {\n\n    /**\n     * Properties of a BoardModerationAction.\n     * @exports IBoardModerationAction\n     * @interface IBoardModerationAction\n     * @property {IModerationAction|null} [action] BoardModerationAction action\n     * @property {string|null} [boardId] BoardModerationAction boardId\n     */\n\n    /**\n     * Constructs a new BoardModerationAction.\n     * @exports BoardModerationAction\n     * @classdesc Represents a BoardModerationAction.\n     * @implements IBoardModerationAction\n     * @constructor\n     * @param {IBoardModerationAction=} [properties] Properties to set\n     */\n    function BoardModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardModerationAction action.\n     * @member {IModerationAction|null|undefined} action\n     * @memberof BoardModerationAction\n     * @instance\n     */\n    BoardModerationAction.prototype.action = null;\n\n    /**\n     * BoardModerationAction boardId.\n     * @member {string} boardId\n     * @memberof BoardModerationAction\n     * @instance\n     */\n    BoardModerationAction.prototype.boardId = \"\";\n\n    /**\n     * Creates a new BoardModerationAction instance using the specified properties.\n     * @function create\n     * @memberof BoardModerationAction\n     * @static\n     * @param {IBoardModerationAction=} [properties] Properties to set\n     * @returns {BoardModerationAction} BoardModerationAction instance\n     */\n    BoardModerationAction.create = function create(properties) {\n        return new BoardModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified BoardModerationAction message. Does not implicitly {@link BoardModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof BoardModerationAction\n     * @static\n     * @param {IBoardModerationAction} message BoardModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            $root.ModerationAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.boardId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardModerationAction message, length delimited. Does not implicitly {@link BoardModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardModerationAction\n     * @static\n     * @param {IBoardModerationAction} message BoardModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardModerationAction} BoardModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = $root.ModerationAction.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.boardId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardModerationAction} BoardModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardModerationAction message.\n     * @function verify\n     * @memberof BoardModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\")) {\n            var error = $root.ModerationAction.verify(message.action);\n            if (error)\n                return \"action.\" + error;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardModerationAction} BoardModerationAction\n     */\n    BoardModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardModerationAction)\n            return object;\n        var message = new $root.BoardModerationAction();\n        if (object.action != null) {\n            if (typeof object.action !== \"object\")\n                throw TypeError(\".BoardModerationAction.action: object expected\");\n            message.action = $root.ModerationAction.fromObject(object.action);\n        }\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardModerationAction\n     * @static\n     * @param {BoardModerationAction} message BoardModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = null;\n            object.boardId = \"\";\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = $root.ModerationAction.toObject(message.action, options);\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        return object;\n    };\n\n    /**\n     * Converts this BoardModerationAction to JSON.\n     * @function toJSON\n     * @memberof BoardModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardModerationAction;\n})();\n\n$root.UserInBoardContext = (function() {\n\n    /**\n     * Properties of a UserInBoardContext.\n     * @exports IUserInBoardContext\n     * @interface IUserInBoardContext\n     * @property {ICommunityUserRef|null} [user] UserInBoardContext user\n     * @property {number|null} [communityOpinion] UserInBoardContext communityOpinion\n     * @property {number|null} [theirUpvotes] UserInBoardContext theirUpvotes\n     * @property {number|null} [theirDownvotes] UserInBoardContext theirDownvotes\n     */\n\n    /**\n     * Constructs a new UserInBoardContext.\n     * @exports UserInBoardContext\n     * @classdesc Represents a UserInBoardContext.\n     * @implements IUserInBoardContext\n     * @constructor\n     * @param {IUserInBoardContext=} [properties] Properties to set\n     */\n    function UserInBoardContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserInBoardContext user.\n     * @member {ICommunityUserRef|null|undefined} user\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.user = null;\n\n    /**\n     * UserInBoardContext communityOpinion.\n     * @member {number} communityOpinion\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.communityOpinion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UserInBoardContext theirUpvotes.\n     * @member {number} theirUpvotes\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.theirUpvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UserInBoardContext theirDownvotes.\n     * @member {number} theirDownvotes\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.theirDownvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new UserInBoardContext instance using the specified properties.\n     * @function create\n     * @memberof UserInBoardContext\n     * @static\n     * @param {IUserInBoardContext=} [properties] Properties to set\n     * @returns {UserInBoardContext} UserInBoardContext instance\n     */\n    UserInBoardContext.create = function create(properties) {\n        return new UserInBoardContext(properties);\n    };\n\n    /**\n     * Encodes the specified UserInBoardContext message. Does not implicitly {@link UserInBoardContext.verify|verify} messages.\n     * @function encode\n     * @memberof UserInBoardContext\n     * @static\n     * @param {IUserInBoardContext} message UserInBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserInBoardContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.CommunityUserRef.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.communityOpinion != null && Object.hasOwnProperty.call(message, \"communityOpinion\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.communityOpinion);\n        if (message.theirUpvotes != null && Object.hasOwnProperty.call(message, \"theirUpvotes\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.theirUpvotes);\n        if (message.theirDownvotes != null && Object.hasOwnProperty.call(message, \"theirDownvotes\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.theirDownvotes);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserInBoardContext message, length delimited. Does not implicitly {@link UserInBoardContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserInBoardContext\n     * @static\n     * @param {IUserInBoardContext} message UserInBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserInBoardContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserInBoardContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserInBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserInBoardContext} UserInBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserInBoardContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserInBoardContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.user = $root.CommunityUserRef.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.communityOpinion = reader.int64();\n                break;\n            case 3:\n                message.theirUpvotes = reader.int64();\n                break;\n            case 4:\n                message.theirDownvotes = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserInBoardContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserInBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserInBoardContext} UserInBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserInBoardContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserInBoardContext message.\n     * @function verify\n     * @memberof UserInBoardContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserInBoardContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.CommunityUserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.communityOpinion != null && message.hasOwnProperty(\"communityOpinion\"))\n            if (!$util.isInteger(message.communityOpinion) && !(message.communityOpinion && $util.isInteger(message.communityOpinion.low) && $util.isInteger(message.communityOpinion.high)))\n                return \"communityOpinion: integer|Long expected\";\n        if (message.theirUpvotes != null && message.hasOwnProperty(\"theirUpvotes\"))\n            if (!$util.isInteger(message.theirUpvotes) && !(message.theirUpvotes && $util.isInteger(message.theirUpvotes.low) && $util.isInteger(message.theirUpvotes.high)))\n                return \"theirUpvotes: integer|Long expected\";\n        if (message.theirDownvotes != null && message.hasOwnProperty(\"theirDownvotes\"))\n            if (!$util.isInteger(message.theirDownvotes) && !(message.theirDownvotes && $util.isInteger(message.theirDownvotes.low) && $util.isInteger(message.theirDownvotes.high)))\n                return \"theirDownvotes: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserInBoardContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserInBoardContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserInBoardContext} UserInBoardContext\n     */\n    UserInBoardContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserInBoardContext)\n            return object;\n        var message = new $root.UserInBoardContext();\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".UserInBoardContext.user: object expected\");\n            message.user = $root.CommunityUserRef.fromObject(object.user);\n        }\n        if (object.communityOpinion != null)\n            if ($util.Long)\n                (message.communityOpinion = $util.Long.fromValue(object.communityOpinion)).unsigned = false;\n            else if (typeof object.communityOpinion === \"string\")\n                message.communityOpinion = parseInt(object.communityOpinion, 10);\n            else if (typeof object.communityOpinion === \"number\")\n                message.communityOpinion = object.communityOpinion;\n            else if (typeof object.communityOpinion === \"object\")\n                message.communityOpinion = new $util.LongBits(object.communityOpinion.low >>> 0, object.communityOpinion.high >>> 0).toNumber();\n        if (object.theirUpvotes != null)\n            if ($util.Long)\n                (message.theirUpvotes = $util.Long.fromValue(object.theirUpvotes)).unsigned = false;\n            else if (typeof object.theirUpvotes === \"string\")\n                message.theirUpvotes = parseInt(object.theirUpvotes, 10);\n            else if (typeof object.theirUpvotes === \"number\")\n                message.theirUpvotes = object.theirUpvotes;\n            else if (typeof object.theirUpvotes === \"object\")\n                message.theirUpvotes = new $util.LongBits(object.theirUpvotes.low >>> 0, object.theirUpvotes.high >>> 0).toNumber();\n        if (object.theirDownvotes != null)\n            if ($util.Long)\n                (message.theirDownvotes = $util.Long.fromValue(object.theirDownvotes)).unsigned = false;\n            else if (typeof object.theirDownvotes === \"string\")\n                message.theirDownvotes = parseInt(object.theirDownvotes, 10);\n            else if (typeof object.theirDownvotes === \"number\")\n                message.theirDownvotes = object.theirDownvotes;\n            else if (typeof object.theirDownvotes === \"object\")\n                message.theirDownvotes = new $util.LongBits(object.theirDownvotes.low >>> 0, object.theirDownvotes.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserInBoardContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserInBoardContext\n     * @static\n     * @param {UserInBoardContext} message UserInBoardContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserInBoardContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.communityOpinion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.communityOpinion = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.theirUpvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.theirUpvotes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.theirDownvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.theirDownvotes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.CommunityUserRef.toObject(message.user, options);\n        if (message.communityOpinion != null && message.hasOwnProperty(\"communityOpinion\"))\n            if (typeof message.communityOpinion === \"number\")\n                object.communityOpinion = options.longs === String ? String(message.communityOpinion) : message.communityOpinion;\n            else\n                object.communityOpinion = options.longs === String ? $util.Long.prototype.toString.call(message.communityOpinion) : options.longs === Number ? new $util.LongBits(message.communityOpinion.low >>> 0, message.communityOpinion.high >>> 0).toNumber() : message.communityOpinion;\n        if (message.theirUpvotes != null && message.hasOwnProperty(\"theirUpvotes\"))\n            if (typeof message.theirUpvotes === \"number\")\n                object.theirUpvotes = options.longs === String ? String(message.theirUpvotes) : message.theirUpvotes;\n            else\n                object.theirUpvotes = options.longs === String ? $util.Long.prototype.toString.call(message.theirUpvotes) : options.longs === Number ? new $util.LongBits(message.theirUpvotes.low >>> 0, message.theirUpvotes.high >>> 0).toNumber() : message.theirUpvotes;\n        if (message.theirDownvotes != null && message.hasOwnProperty(\"theirDownvotes\"))\n            if (typeof message.theirDownvotes === \"number\")\n                object.theirDownvotes = options.longs === String ? String(message.theirDownvotes) : message.theirDownvotes;\n            else\n                object.theirDownvotes = options.longs === String ? $util.Long.prototype.toString.call(message.theirDownvotes) : options.longs === Number ? new $util.LongBits(message.theirDownvotes.low >>> 0, message.theirDownvotes.high >>> 0).toNumber() : message.theirDownvotes;\n        return object;\n    };\n\n    /**\n     * Converts this UserInBoardContext to JSON.\n     * @function toJSON\n     * @memberof UserInBoardContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserInBoardContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserInBoardContext;\n})();\n\n$root.Image = (function() {\n\n    /**\n     * Properties of an Image.\n     * @exports IImage\n     * @interface IImage\n     * @property {string|null} [userId] Image userId\n     * @property {string|null} [uId] Image uId\n     * @property {string|null} [format] Image format\n     * @property {number|null} [height] Image height\n     * @property {number|null} [width] Image width\n     * @property {number|null} [size] Image size\n     * @property {number|null} [length] Image length\n     * @property {number|null} [createdAt] Image createdAt\n     */\n\n    /**\n     * Constructs a new Image.\n     * @exports Image\n     * @classdesc Represents an Image.\n     * @implements IImage\n     * @constructor\n     * @param {IImage=} [properties] Properties to set\n     */\n    function Image(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Image userId.\n     * @member {string} userId\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.userId = \"\";\n\n    /**\n     * Image uId.\n     * @member {string} uId\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.uId = \"\";\n\n    /**\n     * Image format.\n     * @member {string} format\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.format = \"\";\n\n    /**\n     * Image height.\n     * @member {number} height\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image width.\n     * @member {number} width\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.width = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image size.\n     * @member {number} size\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image length.\n     * @member {number} length\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.length = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image createdAt.\n     * @member {number} createdAt\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new Image instance using the specified properties.\n     * @function create\n     * @memberof Image\n     * @static\n     * @param {IImage=} [properties] Properties to set\n     * @returns {Image} Image instance\n     */\n    Image.create = function create(properties) {\n        return new Image(properties);\n    };\n\n    /**\n     * Encodes the specified Image message. Does not implicitly {@link Image.verify|verify} messages.\n     * @function encode\n     * @memberof Image\n     * @static\n     * @param {IImage} message Image message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Image.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uId);\n        if (message.format != null && Object.hasOwnProperty.call(message, \"format\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.format);\n        if (message.height != null && Object.hasOwnProperty.call(message, \"height\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.height);\n        if (message.width != null && Object.hasOwnProperty.call(message, \"width\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.width);\n        if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.size);\n        if (message.length != null && Object.hasOwnProperty.call(message, \"length\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.length);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Image message, length delimited. Does not implicitly {@link Image.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Image\n     * @static\n     * @param {IImage} message Image message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Image.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Image message from the specified reader or buffer.\n     * @function decode\n     * @memberof Image\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Image} Image\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Image.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Image();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.uId = reader.string();\n                break;\n            case 3:\n                message.format = reader.string();\n                break;\n            case 4:\n                message.height = reader.int64();\n                break;\n            case 5:\n                message.width = reader.int64();\n                break;\n            case 6:\n                message.size = reader.int64();\n                break;\n            case 7:\n                message.length = reader.int64();\n                break;\n            case 8:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Image message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Image\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Image} Image\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Image.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Image message.\n     * @function verify\n     * @memberof Image\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Image.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.format != null && message.hasOwnProperty(\"format\"))\n            if (!$util.isString(message.format))\n                return \"format: string expected\";\n        if (message.height != null && message.hasOwnProperty(\"height\"))\n            if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))\n                return \"height: integer|Long expected\";\n        if (message.width != null && message.hasOwnProperty(\"width\"))\n            if (!$util.isInteger(message.width) && !(message.width && $util.isInteger(message.width.low) && $util.isInteger(message.width.high)))\n                return \"width: integer|Long expected\";\n        if (message.size != null && message.hasOwnProperty(\"size\"))\n            if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                return \"size: integer|Long expected\";\n        if (message.length != null && message.hasOwnProperty(\"length\"))\n            if (!$util.isInteger(message.length) && !(message.length && $util.isInteger(message.length.low) && $util.isInteger(message.length.high)))\n                return \"length: integer|Long expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Image message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Image\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Image} Image\n     */\n    Image.fromObject = function fromObject(object) {\n        if (object instanceof $root.Image)\n            return object;\n        var message = new $root.Image();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.format != null)\n            message.format = String(object.format);\n        if (object.height != null)\n            if ($util.Long)\n                (message.height = $util.Long.fromValue(object.height)).unsigned = false;\n            else if (typeof object.height === \"string\")\n                message.height = parseInt(object.height, 10);\n            else if (typeof object.height === \"number\")\n                message.height = object.height;\n            else if (typeof object.height === \"object\")\n                message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();\n        if (object.width != null)\n            if ($util.Long)\n                (message.width = $util.Long.fromValue(object.width)).unsigned = false;\n            else if (typeof object.width === \"string\")\n                message.width = parseInt(object.width, 10);\n            else if (typeof object.width === \"number\")\n                message.width = object.width;\n            else if (typeof object.width === \"object\")\n                message.width = new $util.LongBits(object.width.low >>> 0, object.width.high >>> 0).toNumber();\n        if (object.size != null)\n            if ($util.Long)\n                (message.size = $util.Long.fromValue(object.size)).unsigned = false;\n            else if (typeof object.size === \"string\")\n                message.size = parseInt(object.size, 10);\n            else if (typeof object.size === \"number\")\n                message.size = object.size;\n            else if (typeof object.size === \"object\")\n                message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();\n        if (object.length != null)\n            if ($util.Long)\n                (message.length = $util.Long.fromValue(object.length)).unsigned = false;\n            else if (typeof object.length === \"string\")\n                message.length = parseInt(object.length, 10);\n            else if (typeof object.length === \"number\")\n                message.length = object.length;\n            else if (typeof object.length === \"object\")\n                message.length = new $util.LongBits(object.length.low >>> 0, object.length.high >>> 0).toNumber();\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Image message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Image\n     * @static\n     * @param {Image} message Image\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Image.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.uId = \"\";\n            object.format = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.height = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.width = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.width = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.size = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.length = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.length = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.format != null && message.hasOwnProperty(\"format\"))\n            object.format = message.format;\n        if (message.height != null && message.hasOwnProperty(\"height\"))\n            if (typeof message.height === \"number\")\n                object.height = options.longs === String ? String(message.height) : message.height;\n            else\n                object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;\n        if (message.width != null && message.hasOwnProperty(\"width\"))\n            if (typeof message.width === \"number\")\n                object.width = options.longs === String ? String(message.width) : message.width;\n            else\n                object.width = options.longs === String ? $util.Long.prototype.toString.call(message.width) : options.longs === Number ? new $util.LongBits(message.width.low >>> 0, message.width.high >>> 0).toNumber() : message.width;\n        if (message.size != null && message.hasOwnProperty(\"size\"))\n            if (typeof message.size === \"number\")\n                object.size = options.longs === String ? String(message.size) : message.size;\n            else\n                object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;\n        if (message.length != null && message.hasOwnProperty(\"length\"))\n            if (typeof message.length === \"number\")\n                object.length = options.longs === String ? String(message.length) : message.length;\n            else\n                object.length = options.longs === String ? $util.Long.prototype.toString.call(message.length) : options.longs === Number ? new $util.LongBits(message.length.low >>> 0, message.length.high >>> 0).toNumber() : message.length;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this Image to JSON.\n     * @function toJSON\n     * @memberof Image\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Image.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Image;\n})();\n\n$root.ImageModifyRequest = (function() {\n\n    /**\n     * Properties of an ImageModifyRequest.\n     * @exports IImageModifyRequest\n     * @interface IImageModifyRequest\n     * @property {string|null} [item] ImageModifyRequest item\n     * @property {string|null} [action] ImageModifyRequest action\n     * @property {string|null} [file] ImageModifyRequest file\n     */\n\n    /**\n     * Constructs a new ImageModifyRequest.\n     * @exports ImageModifyRequest\n     * @classdesc Represents an ImageModifyRequest.\n     * @implements IImageModifyRequest\n     * @constructor\n     * @param {IImageModifyRequest=} [properties] Properties to set\n     */\n    function ImageModifyRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ImageModifyRequest item.\n     * @member {string} item\n     * @memberof ImageModifyRequest\n     * @instance\n     */\n    ImageModifyRequest.prototype.item = \"\";\n\n    /**\n     * ImageModifyRequest action.\n     * @member {string} action\n     * @memberof ImageModifyRequest\n     * @instance\n     */\n    ImageModifyRequest.prototype.action = \"\";\n\n    /**\n     * ImageModifyRequest file.\n     * @member {string} file\n     * @memberof ImageModifyRequest\n     * @instance\n     */\n    ImageModifyRequest.prototype.file = \"\";\n\n    /**\n     * Creates a new ImageModifyRequest instance using the specified properties.\n     * @function create\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {IImageModifyRequest=} [properties] Properties to set\n     * @returns {ImageModifyRequest} ImageModifyRequest instance\n     */\n    ImageModifyRequest.create = function create(properties) {\n        return new ImageModifyRequest(properties);\n    };\n\n    /**\n     * Encodes the specified ImageModifyRequest message. Does not implicitly {@link ImageModifyRequest.verify|verify} messages.\n     * @function encode\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {IImageModifyRequest} message ImageModifyRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ImageModifyRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.item != null && Object.hasOwnProperty.call(message, \"item\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.item);\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.action);\n        if (message.file != null && Object.hasOwnProperty.call(message, \"file\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.file);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ImageModifyRequest message, length delimited. Does not implicitly {@link ImageModifyRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {IImageModifyRequest} message ImageModifyRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ImageModifyRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an ImageModifyRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ImageModifyRequest} ImageModifyRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ImageModifyRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ImageModifyRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.item = reader.string();\n                break;\n            case 2:\n                message.action = reader.string();\n                break;\n            case 3:\n                message.file = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an ImageModifyRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ImageModifyRequest} ImageModifyRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ImageModifyRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an ImageModifyRequest message.\n     * @function verify\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ImageModifyRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.item != null && message.hasOwnProperty(\"item\"))\n            if (!$util.isString(message.item))\n                return \"item: string expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            if (!$util.isString(message.action))\n                return \"action: string expected\";\n        if (message.file != null && message.hasOwnProperty(\"file\"))\n            if (!$util.isString(message.file))\n                return \"file: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an ImageModifyRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ImageModifyRequest} ImageModifyRequest\n     */\n    ImageModifyRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.ImageModifyRequest)\n            return object;\n        var message = new $root.ImageModifyRequest();\n        if (object.item != null)\n            message.item = String(object.item);\n        if (object.action != null)\n            message.action = String(object.action);\n        if (object.file != null)\n            message.file = String(object.file);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an ImageModifyRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {ImageModifyRequest} message ImageModifyRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ImageModifyRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.item = \"\";\n            object.action = \"\";\n            object.file = \"\";\n        }\n        if (message.item != null && message.hasOwnProperty(\"item\"))\n            object.item = message.item;\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = message.action;\n        if (message.file != null && message.hasOwnProperty(\"file\"))\n            object.file = message.file;\n        return object;\n    };\n\n    /**\n     * Converts this ImageModifyRequest to JSON.\n     * @function toJSON\n     * @memberof ImageModifyRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ImageModifyRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ImageModifyRequest;\n})();\n\n$root.DraftJsBlock = (function() {\n\n    /**\n     * Properties of a DraftJsBlock.\n     * @exports IDraftJsBlock\n     * @interface IDraftJsBlock\n     * @property {string|null} [key] DraftJsBlock key\n     * @property {string|null} [text] DraftJsBlock text\n     * @property {string|null} [type] DraftJsBlock type\n     * @property {number|null} [depth] DraftJsBlock depth\n     * @property {Array.<number>|null} [inlineStyleRanges] DraftJsBlock inlineStyleRanges\n     * @property {Array.<string>|null} [entityRanges] DraftJsBlock entityRanges\n     */\n\n    /**\n     * Constructs a new DraftJsBlock.\n     * @exports DraftJsBlock\n     * @classdesc Represents a DraftJsBlock.\n     * @implements IDraftJsBlock\n     * @constructor\n     * @param {IDraftJsBlock=} [properties] Properties to set\n     */\n    function DraftJsBlock(properties) {\n        this.inlineStyleRanges = [];\n        this.entityRanges = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DraftJsBlock key.\n     * @member {string} key\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.key = \"\";\n\n    /**\n     * DraftJsBlock text.\n     * @member {string} text\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.text = \"\";\n\n    /**\n     * DraftJsBlock type.\n     * @member {string} type\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.type = \"\";\n\n    /**\n     * DraftJsBlock depth.\n     * @member {number} depth\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.depth = 0;\n\n    /**\n     * DraftJsBlock inlineStyleRanges.\n     * @member {Array.<number>} inlineStyleRanges\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.inlineStyleRanges = $util.emptyArray;\n\n    /**\n     * DraftJsBlock entityRanges.\n     * @member {Array.<string>} entityRanges\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.entityRanges = $util.emptyArray;\n\n    /**\n     * Creates a new DraftJsBlock instance using the specified properties.\n     * @function create\n     * @memberof DraftJsBlock\n     * @static\n     * @param {IDraftJsBlock=} [properties] Properties to set\n     * @returns {DraftJsBlock} DraftJsBlock instance\n     */\n    DraftJsBlock.create = function create(properties) {\n        return new DraftJsBlock(properties);\n    };\n\n    /**\n     * Encodes the specified DraftJsBlock message. Does not implicitly {@link DraftJsBlock.verify|verify} messages.\n     * @function encode\n     * @memberof DraftJsBlock\n     * @static\n     * @param {IDraftJsBlock} message DraftJsBlock message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsBlock.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n        if (message.text != null && Object.hasOwnProperty.call(message, \"text\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n        if (message.depth != null && Object.hasOwnProperty.call(message, \"depth\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.depth);\n        if (message.inlineStyleRanges != null && message.inlineStyleRanges.length) {\n            writer.uint32(/* id 5, wireType 2 =*/42).fork();\n            for (var i = 0; i < message.inlineStyleRanges.length; ++i)\n                writer.int32(message.inlineStyleRanges[i]);\n            writer.ldelim();\n        }\n        if (message.entityRanges != null && message.entityRanges.length)\n            for (var i = 0; i < message.entityRanges.length; ++i)\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.entityRanges[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DraftJsBlock message, length delimited. Does not implicitly {@link DraftJsBlock.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DraftJsBlock\n     * @static\n     * @param {IDraftJsBlock} message DraftJsBlock message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsBlock.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DraftJsBlock message from the specified reader or buffer.\n     * @function decode\n     * @memberof DraftJsBlock\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DraftJsBlock} DraftJsBlock\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsBlock.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraftJsBlock();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.key = reader.string();\n                break;\n            case 2:\n                message.text = reader.string();\n                break;\n            case 3:\n                message.type = reader.string();\n                break;\n            case 4:\n                message.depth = reader.int32();\n                break;\n            case 5:\n                if (!(message.inlineStyleRanges && message.inlineStyleRanges.length))\n                    message.inlineStyleRanges = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.inlineStyleRanges.push(reader.int32());\n                } else\n                    message.inlineStyleRanges.push(reader.int32());\n                break;\n            case 6:\n                if (!(message.entityRanges && message.entityRanges.length))\n                    message.entityRanges = [];\n                message.entityRanges.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DraftJsBlock message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DraftJsBlock\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DraftJsBlock} DraftJsBlock\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsBlock.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DraftJsBlock message.\n     * @function verify\n     * @memberof DraftJsBlock\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DraftJsBlock.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            if (!$util.isString(message.key))\n                return \"key: string expected\";\n        if (message.text != null && message.hasOwnProperty(\"text\"))\n            if (!$util.isString(message.text))\n                return \"text: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            if (!$util.isInteger(message.depth))\n                return \"depth: integer expected\";\n        if (message.inlineStyleRanges != null && message.hasOwnProperty(\"inlineStyleRanges\")) {\n            if (!Array.isArray(message.inlineStyleRanges))\n                return \"inlineStyleRanges: array expected\";\n            for (var i = 0; i < message.inlineStyleRanges.length; ++i)\n                if (!$util.isInteger(message.inlineStyleRanges[i]))\n                    return \"inlineStyleRanges: integer[] expected\";\n        }\n        if (message.entityRanges != null && message.hasOwnProperty(\"entityRanges\")) {\n            if (!Array.isArray(message.entityRanges))\n                return \"entityRanges: array expected\";\n            for (var i = 0; i < message.entityRanges.length; ++i)\n                if (!$util.isString(message.entityRanges[i]))\n                    return \"entityRanges: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a DraftJsBlock message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DraftJsBlock\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DraftJsBlock} DraftJsBlock\n     */\n    DraftJsBlock.fromObject = function fromObject(object) {\n        if (object instanceof $root.DraftJsBlock)\n            return object;\n        var message = new $root.DraftJsBlock();\n        if (object.key != null)\n            message.key = String(object.key);\n        if (object.text != null)\n            message.text = String(object.text);\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.depth != null)\n            message.depth = object.depth | 0;\n        if (object.inlineStyleRanges) {\n            if (!Array.isArray(object.inlineStyleRanges))\n                throw TypeError(\".DraftJsBlock.inlineStyleRanges: array expected\");\n            message.inlineStyleRanges = [];\n            for (var i = 0; i < object.inlineStyleRanges.length; ++i)\n                message.inlineStyleRanges[i] = object.inlineStyleRanges[i] | 0;\n        }\n        if (object.entityRanges) {\n            if (!Array.isArray(object.entityRanges))\n                throw TypeError(\".DraftJsBlock.entityRanges: array expected\");\n            message.entityRanges = [];\n            for (var i = 0; i < object.entityRanges.length; ++i)\n                message.entityRanges[i] = String(object.entityRanges[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DraftJsBlock message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DraftJsBlock\n     * @static\n     * @param {DraftJsBlock} message DraftJsBlock\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DraftJsBlock.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.inlineStyleRanges = [];\n            object.entityRanges = [];\n        }\n        if (options.defaults) {\n            object.key = \"\";\n            object.text = \"\";\n            object.type = \"\";\n            object.depth = 0;\n        }\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = message.key;\n        if (message.text != null && message.hasOwnProperty(\"text\"))\n            object.text = message.text;\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            object.depth = message.depth;\n        if (message.inlineStyleRanges && message.inlineStyleRanges.length) {\n            object.inlineStyleRanges = [];\n            for (var j = 0; j < message.inlineStyleRanges.length; ++j)\n                object.inlineStyleRanges[j] = message.inlineStyleRanges[j];\n        }\n        if (message.entityRanges && message.entityRanges.length) {\n            object.entityRanges = [];\n            for (var j = 0; j < message.entityRanges.length; ++j)\n                object.entityRanges[j] = message.entityRanges[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this DraftJsBlock to JSON.\n     * @function toJSON\n     * @memberof DraftJsBlock\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DraftJsBlock.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DraftJsBlock;\n})();\n\n$root.DraftJsEntity = (function() {\n\n    /**\n     * Properties of a DraftJsEntity.\n     * @exports IDraftJsEntity\n     * @interface IDraftJsEntity\n     * @property {string|null} [type] DraftJsEntity type\n     * @property {string|null} [data] DraftJsEntity data\n     */\n\n    /**\n     * Constructs a new DraftJsEntity.\n     * @exports DraftJsEntity\n     * @classdesc Represents a DraftJsEntity.\n     * @implements IDraftJsEntity\n     * @constructor\n     * @param {IDraftJsEntity=} [properties] Properties to set\n     */\n    function DraftJsEntity(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DraftJsEntity type.\n     * @member {string} type\n     * @memberof DraftJsEntity\n     * @instance\n     */\n    DraftJsEntity.prototype.type = \"\";\n\n    /**\n     * DraftJsEntity data.\n     * @member {string} data\n     * @memberof DraftJsEntity\n     * @instance\n     */\n    DraftJsEntity.prototype.data = \"\";\n\n    /**\n     * Creates a new DraftJsEntity instance using the specified properties.\n     * @function create\n     * @memberof DraftJsEntity\n     * @static\n     * @param {IDraftJsEntity=} [properties] Properties to set\n     * @returns {DraftJsEntity} DraftJsEntity instance\n     */\n    DraftJsEntity.create = function create(properties) {\n        return new DraftJsEntity(properties);\n    };\n\n    /**\n     * Encodes the specified DraftJsEntity message. Does not implicitly {@link DraftJsEntity.verify|verify} messages.\n     * @function encode\n     * @memberof DraftJsEntity\n     * @static\n     * @param {IDraftJsEntity} message DraftJsEntity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsEntity.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DraftJsEntity message, length delimited. Does not implicitly {@link DraftJsEntity.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DraftJsEntity\n     * @static\n     * @param {IDraftJsEntity} message DraftJsEntity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsEntity.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DraftJsEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof DraftJsEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DraftJsEntity} DraftJsEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsEntity.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraftJsEntity();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.string();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DraftJsEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DraftJsEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DraftJsEntity} DraftJsEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsEntity.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DraftJsEntity message.\n     * @function verify\n     * @memberof DraftJsEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DraftJsEntity.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            if (!$util.isString(message.data))\n                return \"data: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a DraftJsEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DraftJsEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DraftJsEntity} DraftJsEntity\n     */\n    DraftJsEntity.fromObject = function fromObject(object) {\n        if (object instanceof $root.DraftJsEntity)\n            return object;\n        var message = new $root.DraftJsEntity();\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.data != null)\n            message.data = String(object.data);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DraftJsEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DraftJsEntity\n     * @static\n     * @param {DraftJsEntity} message DraftJsEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DraftJsEntity.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = \"\";\n            object.data = \"\";\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            object.data = message.data;\n        return object;\n    };\n\n    /**\n     * Converts this DraftJsEntity to JSON.\n     * @function toJSON\n     * @memberof DraftJsEntity\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DraftJsEntity.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DraftJsEntity;\n})();\n\n$root.DraftJsRawContent = (function() {\n\n    /**\n     * Properties of a DraftJsRawContent.\n     * @exports IDraftJsRawContent\n     * @interface IDraftJsRawContent\n     * @property {Array.<IDraftJsBlock>|null} [blocks] DraftJsRawContent blocks\n     */\n\n    /**\n     * Constructs a new DraftJsRawContent.\n     * @exports DraftJsRawContent\n     * @classdesc Represents a DraftJsRawContent.\n     * @implements IDraftJsRawContent\n     * @constructor\n     * @param {IDraftJsRawContent=} [properties] Properties to set\n     */\n    function DraftJsRawContent(properties) {\n        this.blocks = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DraftJsRawContent blocks.\n     * @member {Array.<IDraftJsBlock>} blocks\n     * @memberof DraftJsRawContent\n     * @instance\n     */\n    DraftJsRawContent.prototype.blocks = $util.emptyArray;\n\n    /**\n     * Creates a new DraftJsRawContent instance using the specified properties.\n     * @function create\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {IDraftJsRawContent=} [properties] Properties to set\n     * @returns {DraftJsRawContent} DraftJsRawContent instance\n     */\n    DraftJsRawContent.create = function create(properties) {\n        return new DraftJsRawContent(properties);\n    };\n\n    /**\n     * Encodes the specified DraftJsRawContent message. Does not implicitly {@link DraftJsRawContent.verify|verify} messages.\n     * @function encode\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {IDraftJsRawContent} message DraftJsRawContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsRawContent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.blocks != null && message.blocks.length)\n            for (var i = 0; i < message.blocks.length; ++i)\n                $root.DraftJsBlock.encode(message.blocks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DraftJsRawContent message, length delimited. Does not implicitly {@link DraftJsRawContent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {IDraftJsRawContent} message DraftJsRawContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsRawContent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DraftJsRawContent message from the specified reader or buffer.\n     * @function decode\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DraftJsRawContent} DraftJsRawContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsRawContent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraftJsRawContent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.blocks && message.blocks.length))\n                    message.blocks = [];\n                message.blocks.push($root.DraftJsBlock.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DraftJsRawContent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DraftJsRawContent} DraftJsRawContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsRawContent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DraftJsRawContent message.\n     * @function verify\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DraftJsRawContent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.blocks != null && message.hasOwnProperty(\"blocks\")) {\n            if (!Array.isArray(message.blocks))\n                return \"blocks: array expected\";\n            for (var i = 0; i < message.blocks.length; ++i) {\n                var error = $root.DraftJsBlock.verify(message.blocks[i]);\n                if (error)\n                    return \"blocks.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a DraftJsRawContent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DraftJsRawContent} DraftJsRawContent\n     */\n    DraftJsRawContent.fromObject = function fromObject(object) {\n        if (object instanceof $root.DraftJsRawContent)\n            return object;\n        var message = new $root.DraftJsRawContent();\n        if (object.blocks) {\n            if (!Array.isArray(object.blocks))\n                throw TypeError(\".DraftJsRawContent.blocks: array expected\");\n            message.blocks = [];\n            for (var i = 0; i < object.blocks.length; ++i) {\n                if (typeof object.blocks[i] !== \"object\")\n                    throw TypeError(\".DraftJsRawContent.blocks: object expected\");\n                message.blocks[i] = $root.DraftJsBlock.fromObject(object.blocks[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DraftJsRawContent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {DraftJsRawContent} message DraftJsRawContent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DraftJsRawContent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.blocks = [];\n        if (message.blocks && message.blocks.length) {\n            object.blocks = [];\n            for (var j = 0; j < message.blocks.length; ++j)\n                object.blocks[j] = $root.DraftJsBlock.toObject(message.blocks[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this DraftJsRawContent to JSON.\n     * @function toJSON\n     * @memberof DraftJsRawContent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DraftJsRawContent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DraftJsRawContent;\n})();\n\n$root.Event = (function() {\n\n    /**\n     * Properties of an Event.\n     * @exports IEvent\n     * @interface IEvent\n     * @property {string|null} [eventId] Event eventId\n     * @property {string|null} [userId] Event userId\n     * @property {Uint8Array|null} [data] Event data\n     * @property {number|null} [createdAt] Event createdAt\n     */\n\n    /**\n     * Constructs a new Event.\n     * @exports Event\n     * @classdesc Represents an Event.\n     * @implements IEvent\n     * @constructor\n     * @param {IEvent=} [properties] Properties to set\n     */\n    function Event(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Event eventId.\n     * @member {string} eventId\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.eventId = \"\";\n\n    /**\n     * Event userId.\n     * @member {string} userId\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.userId = \"\";\n\n    /**\n     * Event data.\n     * @member {Uint8Array} data\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.data = $util.newBuffer([]);\n\n    /**\n     * Event createdAt.\n     * @member {number} createdAt\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new Event instance using the specified properties.\n     * @function create\n     * @memberof Event\n     * @static\n     * @param {IEvent=} [properties] Properties to set\n     * @returns {Event} Event instance\n     */\n    Event.create = function create(properties) {\n        return new Event(properties);\n    };\n\n    /**\n     * Encodes the specified Event message. Does not implicitly {@link Event.verify|verify} messages.\n     * @function encode\n     * @memberof Event\n     * @static\n     * @param {IEvent} message Event message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Event.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.eventId != null && Object.hasOwnProperty.call(message, \"eventId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventId);\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Event message, length delimited. Does not implicitly {@link Event.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Event\n     * @static\n     * @param {IEvent} message Event message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Event.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Event message from the specified reader or buffer.\n     * @function decode\n     * @memberof Event\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Event} Event\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Event.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Event();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.eventId = reader.string();\n                break;\n            case 2:\n                message.userId = reader.string();\n                break;\n            case 3:\n                message.data = reader.bytes();\n                break;\n            case 4:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Event message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Event\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Event} Event\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Event.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Event message.\n     * @function verify\n     * @memberof Event\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Event.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.eventId != null && message.hasOwnProperty(\"eventId\"))\n            if (!$util.isString(message.eventId))\n                return \"eventId: string expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                return \"data: buffer expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Event message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Event\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Event} Event\n     */\n    Event.fromObject = function fromObject(object) {\n        if (object instanceof $root.Event)\n            return object;\n        var message = new $root.Event();\n        if (object.eventId != null)\n            message.eventId = String(object.eventId);\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.data != null)\n            if (typeof object.data === \"string\")\n                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n            else if (object.data.length)\n                message.data = object.data;\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Event message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Event\n     * @static\n     * @param {Event} message Event\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Event.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.eventId = \"\";\n            object.userId = \"\";\n            if (options.bytes === String)\n                object.data = \"\";\n            else {\n                object.data = [];\n                if (options.bytes !== Array)\n                    object.data = $util.newBuffer(object.data);\n            }\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.eventId != null && message.hasOwnProperty(\"eventId\"))\n            object.eventId = message.eventId;\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this Event to JSON.\n     * @function toJSON\n     * @memberof Event\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Event.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Event;\n})();\n\n$root.CommentReplyEvent = (function() {\n\n    /**\n     * Properties of a CommentReplyEvent.\n     * @exports ICommentReplyEvent\n     * @interface ICommentReplyEvent\n     * @property {string|null} [userId] CommentReplyEvent userId\n     * @property {IComment|null} [comment] CommentReplyEvent comment\n     * @property {number|null} [createdAt] CommentReplyEvent createdAt\n     */\n\n    /**\n     * Constructs a new CommentReplyEvent.\n     * @exports CommentReplyEvent\n     * @classdesc Represents a CommentReplyEvent.\n     * @implements ICommentReplyEvent\n     * @constructor\n     * @param {ICommentReplyEvent=} [properties] Properties to set\n     */\n    function CommentReplyEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentReplyEvent userId.\n     * @member {string} userId\n     * @memberof CommentReplyEvent\n     * @instance\n     */\n    CommentReplyEvent.prototype.userId = \"\";\n\n    /**\n     * CommentReplyEvent comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentReplyEvent\n     * @instance\n     */\n    CommentReplyEvent.prototype.comment = null;\n\n    /**\n     * CommentReplyEvent createdAt.\n     * @member {number} createdAt\n     * @memberof CommentReplyEvent\n     * @instance\n     */\n    CommentReplyEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new CommentReplyEvent instance using the specified properties.\n     * @function create\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {ICommentReplyEvent=} [properties] Properties to set\n     * @returns {CommentReplyEvent} CommentReplyEvent instance\n     */\n    CommentReplyEvent.create = function create(properties) {\n        return new CommentReplyEvent(properties);\n    };\n\n    /**\n     * Encodes the specified CommentReplyEvent message. Does not implicitly {@link CommentReplyEvent.verify|verify} messages.\n     * @function encode\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {ICommentReplyEvent} message CommentReplyEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentReplyEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentReplyEvent message, length delimited. Does not implicitly {@link CommentReplyEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {ICommentReplyEvent} message CommentReplyEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentReplyEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentReplyEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentReplyEvent} CommentReplyEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentReplyEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentReplyEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentReplyEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentReplyEvent} CommentReplyEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentReplyEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentReplyEvent message.\n     * @function verify\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentReplyEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentReplyEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentReplyEvent} CommentReplyEvent\n     */\n    CommentReplyEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentReplyEvent)\n            return object;\n        var message = new $root.CommentReplyEvent();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentReplyEvent.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentReplyEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {CommentReplyEvent} message CommentReplyEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentReplyEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.comment = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this CommentReplyEvent to JSON.\n     * @function toJSON\n     * @memberof CommentReplyEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentReplyEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentReplyEvent;\n})();\n\n$root.CommentCreateEvent = (function() {\n\n    /**\n     * Properties of a CommentCreateEvent.\n     * @exports ICommentCreateEvent\n     * @interface ICommentCreateEvent\n     * @property {string|null} [threadId] CommentCreateEvent threadId\n     * @property {IComment|null} [comment] CommentCreateEvent comment\n     * @property {number|null} [createdAt] CommentCreateEvent createdAt\n     */\n\n    /**\n     * Constructs a new CommentCreateEvent.\n     * @exports CommentCreateEvent\n     * @classdesc Represents a CommentCreateEvent.\n     * @implements ICommentCreateEvent\n     * @constructor\n     * @param {ICommentCreateEvent=} [properties] Properties to set\n     */\n    function CommentCreateEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentCreateEvent threadId.\n     * @member {string} threadId\n     * @memberof CommentCreateEvent\n     * @instance\n     */\n    CommentCreateEvent.prototype.threadId = \"\";\n\n    /**\n     * CommentCreateEvent comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentCreateEvent\n     * @instance\n     */\n    CommentCreateEvent.prototype.comment = null;\n\n    /**\n     * CommentCreateEvent createdAt.\n     * @member {number} createdAt\n     * @memberof CommentCreateEvent\n     * @instance\n     */\n    CommentCreateEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new CommentCreateEvent instance using the specified properties.\n     * @function create\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {ICommentCreateEvent=} [properties] Properties to set\n     * @returns {CommentCreateEvent} CommentCreateEvent instance\n     */\n    CommentCreateEvent.create = function create(properties) {\n        return new CommentCreateEvent(properties);\n    };\n\n    /**\n     * Encodes the specified CommentCreateEvent message. Does not implicitly {@link CommentCreateEvent.verify|verify} messages.\n     * @function encode\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {ICommentCreateEvent} message CommentCreateEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.threadId);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentCreateEvent message, length delimited. Does not implicitly {@link CommentCreateEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {ICommentCreateEvent} message CommentCreateEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentCreateEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentCreateEvent} CommentCreateEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentCreateEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threadId = reader.string();\n                break;\n            case 2:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentCreateEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentCreateEvent} CommentCreateEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentCreateEvent message.\n     * @function verify\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentCreateEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentCreateEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentCreateEvent} CommentCreateEvent\n     */\n    CommentCreateEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentCreateEvent)\n            return object;\n        var message = new $root.CommentCreateEvent();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentCreateEvent.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentCreateEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {CommentCreateEvent} message CommentCreateEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentCreateEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.threadId = \"\";\n            object.comment = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this CommentCreateEvent to JSON.\n     * @function toJSON\n     * @memberof CommentCreateEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentCreateEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentCreateEvent;\n})();\n\n$root.UserMentionEvent = (function() {\n\n    /**\n     * Properties of a UserMentionEvent.\n     * @exports IUserMentionEvent\n     * @interface IUserMentionEvent\n     * @property {string|null} [userId] UserMentionEvent userId\n     * @property {string|null} [location] UserMentionEvent location\n     * @property {number|null} [createdAt] UserMentionEvent createdAt\n     * @property {string|null} [board] UserMentionEvent board\n     * @property {string|null} [title] UserMentionEvent title\n     * @property {string|null} [comment] UserMentionEvent comment\n     */\n\n    /**\n     * Constructs a new UserMentionEvent.\n     * @exports UserMentionEvent\n     * @classdesc Represents a UserMentionEvent.\n     * @implements IUserMentionEvent\n     * @constructor\n     * @param {IUserMentionEvent=} [properties] Properties to set\n     */\n    function UserMentionEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserMentionEvent userId.\n     * @member {string} userId\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.userId = \"\";\n\n    /**\n     * UserMentionEvent location.\n     * @member {string} location\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.location = \"\";\n\n    /**\n     * UserMentionEvent createdAt.\n     * @member {number} createdAt\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UserMentionEvent board.\n     * @member {string} board\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.board = \"\";\n\n    /**\n     * UserMentionEvent title.\n     * @member {string} title\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.title = \"\";\n\n    /**\n     * UserMentionEvent comment.\n     * @member {string} comment\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.comment = \"\";\n\n    /**\n     * Creates a new UserMentionEvent instance using the specified properties.\n     * @function create\n     * @memberof UserMentionEvent\n     * @static\n     * @param {IUserMentionEvent=} [properties] Properties to set\n     * @returns {UserMentionEvent} UserMentionEvent instance\n     */\n    UserMentionEvent.create = function create(properties) {\n        return new UserMentionEvent(properties);\n    };\n\n    /**\n     * Encodes the specified UserMentionEvent message. Does not implicitly {@link UserMentionEvent.verify|verify} messages.\n     * @function encode\n     * @memberof UserMentionEvent\n     * @static\n     * @param {IUserMentionEvent} message UserMentionEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMentionEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.location != null && Object.hasOwnProperty.call(message, \"location\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.location);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.createdAt);\n        if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.board);\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.title);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.comment);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserMentionEvent message, length delimited. Does not implicitly {@link UserMentionEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserMentionEvent\n     * @static\n     * @param {IUserMentionEvent} message UserMentionEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMentionEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserMentionEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserMentionEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserMentionEvent} UserMentionEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMentionEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserMentionEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.location = reader.string();\n                break;\n            case 3:\n                message.createdAt = reader.int64();\n                break;\n            case 4:\n                message.board = reader.string();\n                break;\n            case 5:\n                message.title = reader.string();\n                break;\n            case 6:\n                message.comment = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserMentionEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserMentionEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserMentionEvent} UserMentionEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMentionEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserMentionEvent message.\n     * @function verify\n     * @memberof UserMentionEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserMentionEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            if (!$util.isString(message.location))\n                return \"location: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            if (!$util.isString(message.board))\n                return \"board: string expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            if (!$util.isString(message.comment))\n                return \"comment: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserMentionEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserMentionEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserMentionEvent} UserMentionEvent\n     */\n    UserMentionEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserMentionEvent)\n            return object;\n        var message = new $root.UserMentionEvent();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.location != null)\n            message.location = String(object.location);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.board != null)\n            message.board = String(object.board);\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.comment != null)\n            message.comment = String(object.comment);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserMentionEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserMentionEvent\n     * @static\n     * @param {UserMentionEvent} message UserMentionEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserMentionEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.location = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.board = \"\";\n            object.title = \"\";\n            object.comment = \"\";\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            object.location = message.location;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            object.board = message.board;\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = message.comment;\n        return object;\n    };\n\n    /**\n     * Converts this UserMentionEvent to JSON.\n     * @function toJSON\n     * @memberof UserMentionEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserMentionEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserMentionEvent;\n})();\n\n$root.CommunityEvent = (function() {\n\n    /**\n     * Properties of a CommunityEvent.\n     * @exports ICommunityEvent\n     * @interface ICommunityEvent\n     * @property {string|null} [boardId] CommunityEvent boardId\n     * @property {string|null} [userId] CommunityEvent userId\n     * @property {string|null} [action] CommunityEvent action\n     */\n\n    /**\n     * Constructs a new CommunityEvent.\n     * @exports CommunityEvent\n     * @classdesc Represents a CommunityEvent.\n     * @implements ICommunityEvent\n     * @constructor\n     * @param {ICommunityEvent=} [properties] Properties to set\n     */\n    function CommunityEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunityEvent boardId.\n     * @member {string} boardId\n     * @memberof CommunityEvent\n     * @instance\n     */\n    CommunityEvent.prototype.boardId = \"\";\n\n    /**\n     * CommunityEvent userId.\n     * @member {string} userId\n     * @memberof CommunityEvent\n     * @instance\n     */\n    CommunityEvent.prototype.userId = \"\";\n\n    /**\n     * CommunityEvent action.\n     * @member {string} action\n     * @memberof CommunityEvent\n     * @instance\n     */\n    CommunityEvent.prototype.action = \"\";\n\n    /**\n     * Creates a new CommunityEvent instance using the specified properties.\n     * @function create\n     * @memberof CommunityEvent\n     * @static\n     * @param {ICommunityEvent=} [properties] Properties to set\n     * @returns {CommunityEvent} CommunityEvent instance\n     */\n    CommunityEvent.create = function create(properties) {\n        return new CommunityEvent(properties);\n    };\n\n    /**\n     * Encodes the specified CommunityEvent message. Does not implicitly {@link CommunityEvent.verify|verify} messages.\n     * @function encode\n     * @memberof CommunityEvent\n     * @static\n     * @param {ICommunityEvent} message CommunityEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunityEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.boardId);\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.action);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunityEvent message, length delimited. Does not implicitly {@link CommunityEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunityEvent\n     * @static\n     * @param {ICommunityEvent} message CommunityEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunityEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunityEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunityEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunityEvent} CommunityEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunityEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunityEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.boardId = reader.string();\n                break;\n            case 2:\n                message.userId = reader.string();\n                break;\n            case 3:\n                message.action = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunityEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunityEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunityEvent} CommunityEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunityEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunityEvent message.\n     * @function verify\n     * @memberof CommunityEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunityEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            if (!$util.isString(message.action))\n                return \"action: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommunityEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunityEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunityEvent} CommunityEvent\n     */\n    CommunityEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunityEvent)\n            return object;\n        var message = new $root.CommunityEvent();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.action != null)\n            message.action = String(object.action);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunityEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunityEvent\n     * @static\n     * @param {CommunityEvent} message CommunityEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunityEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.boardId = \"\";\n            object.userId = \"\";\n            object.action = \"\";\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = message.action;\n        return object;\n    };\n\n    /**\n     * Converts this CommunityEvent to JSON.\n     * @function toJSON\n     * @memberof CommunityEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunityEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunityEvent;\n})();\n\n$root.ThreadVoteEvent = (function() {\n\n    /**\n     * Properties of a ThreadVoteEvent.\n     * @exports IThreadVoteEvent\n     * @interface IThreadVoteEvent\n     * @property {string|null} [userId] ThreadVoteEvent userId\n     * @property {number|null} [createdAt] ThreadVoteEvent createdAt\n     * @property {string|null} [threadId] ThreadVoteEvent threadId\n     * @property {number|null} [totalVotes] ThreadVoteEvent totalVotes\n     * @property {Object.<string,number>|null} [votes] ThreadVoteEvent votes\n     */\n\n    /**\n     * Constructs a new ThreadVoteEvent.\n     * @exports ThreadVoteEvent\n     * @classdesc Represents a ThreadVoteEvent.\n     * @implements IThreadVoteEvent\n     * @constructor\n     * @param {IThreadVoteEvent=} [properties] Properties to set\n     */\n    function ThreadVoteEvent(properties) {\n        this.votes = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadVoteEvent userId.\n     * @member {string} userId\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.userId = \"\";\n\n    /**\n     * ThreadVoteEvent createdAt.\n     * @member {number} createdAt\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * ThreadVoteEvent threadId.\n     * @member {string} threadId\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.threadId = \"\";\n\n    /**\n     * ThreadVoteEvent totalVotes.\n     * @member {number} totalVotes\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.totalVotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * ThreadVoteEvent votes.\n     * @member {Object.<string,number>} votes\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.votes = $util.emptyObject;\n\n    /**\n     * Creates a new ThreadVoteEvent instance using the specified properties.\n     * @function create\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {IThreadVoteEvent=} [properties] Properties to set\n     * @returns {ThreadVoteEvent} ThreadVoteEvent instance\n     */\n    ThreadVoteEvent.create = function create(properties) {\n        return new ThreadVoteEvent(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadVoteEvent message. Does not implicitly {@link ThreadVoteEvent.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {IThreadVoteEvent} message ThreadVoteEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadVoteEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.createdAt);\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.threadId);\n        if (message.totalVotes != null && Object.hasOwnProperty.call(message, \"totalVotes\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.totalVotes);\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            for (var keys = Object.keys(message.votes), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.votes[keys[i]]).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadVoteEvent message, length delimited. Does not implicitly {@link ThreadVoteEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {IThreadVoteEvent} message ThreadVoteEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadVoteEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadVoteEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadVoteEvent} ThreadVoteEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadVoteEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadVoteEvent(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.createdAt = reader.int64();\n                break;\n            case 3:\n                message.threadId = reader.string();\n                break;\n            case 4:\n                message.totalVotes = reader.int64();\n                break;\n            case 5:\n                if (message.votes === $util.emptyObject)\n                    message.votes = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.votes[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadVoteEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadVoteEvent} ThreadVoteEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadVoteEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadVoteEvent message.\n     * @function verify\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadVoteEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        if (message.totalVotes != null && message.hasOwnProperty(\"totalVotes\"))\n            if (!$util.isInteger(message.totalVotes) && !(message.totalVotes && $util.isInteger(message.totalVotes.low) && $util.isInteger(message.totalVotes.high)))\n                return \"totalVotes: integer|Long expected\";\n        if (message.votes != null && message.hasOwnProperty(\"votes\")) {\n            if (!$util.isObject(message.votes))\n                return \"votes: object expected\";\n            var key = Object.keys(message.votes);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.votes[key[i]]) && !(message.votes[key[i]] && $util.isInteger(message.votes[key[i]].low) && $util.isInteger(message.votes[key[i]].high)))\n                    return \"votes: integer|Long{k:string} expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadVoteEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadVoteEvent} ThreadVoteEvent\n     */\n    ThreadVoteEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadVoteEvent)\n            return object;\n        var message = new $root.ThreadVoteEvent();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        if (object.totalVotes != null)\n            if ($util.Long)\n                (message.totalVotes = $util.Long.fromValue(object.totalVotes)).unsigned = false;\n            else if (typeof object.totalVotes === \"string\")\n                message.totalVotes = parseInt(object.totalVotes, 10);\n            else if (typeof object.totalVotes === \"number\")\n                message.totalVotes = object.totalVotes;\n            else if (typeof object.totalVotes === \"object\")\n                message.totalVotes = new $util.LongBits(object.totalVotes.low >>> 0, object.totalVotes.high >>> 0).toNumber();\n        if (object.votes) {\n            if (typeof object.votes !== \"object\")\n                throw TypeError(\".ThreadVoteEvent.votes: object expected\");\n            message.votes = {};\n            for (var keys = Object.keys(object.votes), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.votes[keys[i]] = $util.Long.fromValue(object.votes[keys[i]])).unsigned = false;\n                else if (typeof object.votes[keys[i]] === \"string\")\n                    message.votes[keys[i]] = parseInt(object.votes[keys[i]], 10);\n                else if (typeof object.votes[keys[i]] === \"number\")\n                    message.votes[keys[i]] = object.votes[keys[i]];\n                else if (typeof object.votes[keys[i]] === \"object\")\n                    message.votes[keys[i]] = new $util.LongBits(object.votes[keys[i]].low >>> 0, object.votes[keys[i]].high >>> 0).toNumber();\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadVoteEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {ThreadVoteEvent} message ThreadVoteEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadVoteEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.votes = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.threadId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.totalVotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.totalVotes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        if (message.totalVotes != null && message.hasOwnProperty(\"totalVotes\"))\n            if (typeof message.totalVotes === \"number\")\n                object.totalVotes = options.longs === String ? String(message.totalVotes) : message.totalVotes;\n            else\n                object.totalVotes = options.longs === String ? $util.Long.prototype.toString.call(message.totalVotes) : options.longs === Number ? new $util.LongBits(message.totalVotes.low >>> 0, message.totalVotes.high >>> 0).toNumber() : message.totalVotes;\n        var keys2;\n        if (message.votes && (keys2 = Object.keys(message.votes)).length) {\n            object.votes = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.votes[keys2[j]] === \"number\")\n                    object.votes[keys2[j]] = options.longs === String ? String(message.votes[keys2[j]]) : message.votes[keys2[j]];\n                else\n                    object.votes[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.votes[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.votes[keys2[j]].low >>> 0, message.votes[keys2[j]].high >>> 0).toNumber() : message.votes[keys2[j]];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ThreadVoteEvent to JSON.\n     * @function toJSON\n     * @memberof ThreadVoteEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadVoteEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadVoteEvent;\n})();\n\n$root.EventContextUpdate = (function() {\n\n    /**\n     * Properties of an EventContextUpdate.\n     * @exports IEventContextUpdate\n     * @interface IEventContextUpdate\n     * @property {number|null} [createdAt] EventContextUpdate createdAt\n     * @property {Array.<string>|null} [threadViewportRange] EventContextUpdate threadViewportRange\n     * @property {Array.<string>|null} [commentViewportRange] EventContextUpdate commentViewportRange\n     */\n\n    /**\n     * Constructs a new EventContextUpdate.\n     * @exports EventContextUpdate\n     * @classdesc Represents an EventContextUpdate.\n     * @implements IEventContextUpdate\n     * @constructor\n     * @param {IEventContextUpdate=} [properties] Properties to set\n     */\n    function EventContextUpdate(properties) {\n        this.threadViewportRange = [];\n        this.commentViewportRange = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EventContextUpdate createdAt.\n     * @member {number} createdAt\n     * @memberof EventContextUpdate\n     * @instance\n     */\n    EventContextUpdate.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * EventContextUpdate threadViewportRange.\n     * @member {Array.<string>} threadViewportRange\n     * @memberof EventContextUpdate\n     * @instance\n     */\n    EventContextUpdate.prototype.threadViewportRange = $util.emptyArray;\n\n    /**\n     * EventContextUpdate commentViewportRange.\n     * @member {Array.<string>} commentViewportRange\n     * @memberof EventContextUpdate\n     * @instance\n     */\n    EventContextUpdate.prototype.commentViewportRange = $util.emptyArray;\n\n    /**\n     * Creates a new EventContextUpdate instance using the specified properties.\n     * @function create\n     * @memberof EventContextUpdate\n     * @static\n     * @param {IEventContextUpdate=} [properties] Properties to set\n     * @returns {EventContextUpdate} EventContextUpdate instance\n     */\n    EventContextUpdate.create = function create(properties) {\n        return new EventContextUpdate(properties);\n    };\n\n    /**\n     * Encodes the specified EventContextUpdate message. Does not implicitly {@link EventContextUpdate.verify|verify} messages.\n     * @function encode\n     * @memberof EventContextUpdate\n     * @static\n     * @param {IEventContextUpdate} message EventContextUpdate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EventContextUpdate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.createdAt);\n        if (message.threadViewportRange != null && message.threadViewportRange.length)\n            for (var i = 0; i < message.threadViewportRange.length; ++i)\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.threadViewportRange[i]);\n        if (message.commentViewportRange != null && message.commentViewportRange.length)\n            for (var i = 0; i < message.commentViewportRange.length; ++i)\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.commentViewportRange[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EventContextUpdate message, length delimited. Does not implicitly {@link EventContextUpdate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EventContextUpdate\n     * @static\n     * @param {IEventContextUpdate} message EventContextUpdate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EventContextUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EventContextUpdate message from the specified reader or buffer.\n     * @function decode\n     * @memberof EventContextUpdate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EventContextUpdate} EventContextUpdate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EventContextUpdate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EventContextUpdate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.createdAt = reader.int64();\n                break;\n            case 2:\n                if (!(message.threadViewportRange && message.threadViewportRange.length))\n                    message.threadViewportRange = [];\n                message.threadViewportRange.push(reader.string());\n                break;\n            case 3:\n                if (!(message.commentViewportRange && message.commentViewportRange.length))\n                    message.commentViewportRange = [];\n                message.commentViewportRange.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EventContextUpdate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EventContextUpdate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EventContextUpdate} EventContextUpdate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EventContextUpdate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EventContextUpdate message.\n     * @function verify\n     * @memberof EventContextUpdate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EventContextUpdate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.threadViewportRange != null && message.hasOwnProperty(\"threadViewportRange\")) {\n            if (!Array.isArray(message.threadViewportRange))\n                return \"threadViewportRange: array expected\";\n            for (var i = 0; i < message.threadViewportRange.length; ++i)\n                if (!$util.isString(message.threadViewportRange[i]))\n                    return \"threadViewportRange: string[] expected\";\n        }\n        if (message.commentViewportRange != null && message.hasOwnProperty(\"commentViewportRange\")) {\n            if (!Array.isArray(message.commentViewportRange))\n                return \"commentViewportRange: array expected\";\n            for (var i = 0; i < message.commentViewportRange.length; ++i)\n                if (!$util.isString(message.commentViewportRange[i]))\n                    return \"commentViewportRange: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates an EventContextUpdate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EventContextUpdate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EventContextUpdate} EventContextUpdate\n     */\n    EventContextUpdate.fromObject = function fromObject(object) {\n        if (object instanceof $root.EventContextUpdate)\n            return object;\n        var message = new $root.EventContextUpdate();\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.threadViewportRange) {\n            if (!Array.isArray(object.threadViewportRange))\n                throw TypeError(\".EventContextUpdate.threadViewportRange: array expected\");\n            message.threadViewportRange = [];\n            for (var i = 0; i < object.threadViewportRange.length; ++i)\n                message.threadViewportRange[i] = String(object.threadViewportRange[i]);\n        }\n        if (object.commentViewportRange) {\n            if (!Array.isArray(object.commentViewportRange))\n                throw TypeError(\".EventContextUpdate.commentViewportRange: array expected\");\n            message.commentViewportRange = [];\n            for (var i = 0; i < object.commentViewportRange.length; ++i)\n                message.commentViewportRange[i] = String(object.commentViewportRange[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EventContextUpdate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EventContextUpdate\n     * @static\n     * @param {EventContextUpdate} message EventContextUpdate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EventContextUpdate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.threadViewportRange = [];\n            object.commentViewportRange = [];\n        }\n        if (options.defaults)\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.threadViewportRange && message.threadViewportRange.length) {\n            object.threadViewportRange = [];\n            for (var j = 0; j < message.threadViewportRange.length; ++j)\n                object.threadViewportRange[j] = message.threadViewportRange[j];\n        }\n        if (message.commentViewportRange && message.commentViewportRange.length) {\n            object.commentViewportRange = [];\n            for (var j = 0; j < message.commentViewportRange.length; ++j)\n                object.commentViewportRange[j] = message.commentViewportRange[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this EventContextUpdate to JSON.\n     * @function toJSON\n     * @memberof EventContextUpdate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EventContextUpdate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EventContextUpdate;\n})();\n\n$root.Error = (function() {\n\n    /**\n     * Properties of an Error.\n     * @exports IError\n     * @interface IError\n     * @property {string|null} [message] Error message\n     * @property {number|null} [code] Error code\n     */\n\n    /**\n     * Constructs a new Error.\n     * @exports Error\n     * @classdesc Represents an Error.\n     * @implements IError\n     * @constructor\n     * @param {IError=} [properties] Properties to set\n     */\n    function Error(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Error message.\n     * @member {string} message\n     * @memberof Error\n     * @instance\n     */\n    Error.prototype.message = \"\";\n\n    /**\n     * Error code.\n     * @member {number} code\n     * @memberof Error\n     * @instance\n     */\n    Error.prototype.code = 0;\n\n    /**\n     * Creates a new Error instance using the specified properties.\n     * @function create\n     * @memberof Error\n     * @static\n     * @param {IError=} [properties] Properties to set\n     * @returns {Error} Error instance\n     */\n    Error.create = function create(properties) {\n        return new Error(properties);\n    };\n\n    /**\n     * Encodes the specified Error message. Does not implicitly {@link Error.verify|verify} messages.\n     * @function encode\n     * @memberof Error\n     * @static\n     * @param {IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Error message, length delimited. Does not implicitly {@link Error.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Error\n     * @static\n     * @param {IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer.\n     * @function decode\n     * @memberof Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Error();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.message = reader.string();\n                break;\n            case 2:\n                message.code = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Error message.\n     * @function verify\n     * @memberof Error\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Error.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            if (!$util.isString(message.message))\n                return \"message: string expected\";\n        if (message.code != null && message.hasOwnProperty(\"code\"))\n            if (!$util.isInteger(message.code))\n                return \"code: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Error message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Error\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Error} Error\n     */\n    Error.fromObject = function fromObject(object) {\n        if (object instanceof $root.Error)\n            return object;\n        var message = new $root.Error();\n        if (object.message != null)\n            message.message = String(object.message);\n        if (object.code != null)\n            message.code = object.code | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Error message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Error\n     * @static\n     * @param {Error} message Error\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Error.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.message = \"\";\n            object.code = 0;\n        }\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = message.message;\n        if (message.code != null && message.hasOwnProperty(\"code\"))\n            object.code = message.code;\n        return object;\n    };\n\n    /**\n     * Converts this Error to JSON.\n     * @function toJSON\n     * @memberof Error\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Error.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Error;\n})();\n\nmodule.exports = $root;\n","String.prototype.trimMax = function (max) {\r\n    var s = this;\r\n    if (s.length > max) {\r\n        return s.substr(0, max) + \"...\"\r\n    }\r\n    return s;\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { Button, ButtonProps, OverlayTrigger, Spinner, Tooltip } from 'react-bootstrap';\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst _LinkButton: React.FC<{ variant?:string, icon?: any, to: string } & RouteComponentProps & ButtonProps> = (props) => {\r\n    return <Button\r\n        //{...props} \r\n        variant={props.variant}\r\n        onClick={() => props.location.pathname == props.to || props.history.push(props.to)}>\r\n        {props.icon && <FontAwesomeIcon icon={props.icon} />}\r\n        {props.children}\r\n    </Button>\r\n}\r\n\r\nexport const LinkButton = withRouter(_LinkButton);\r\n\r\n// button that is very basically network aware via a promise result, \r\n// and reflects that in with a loading and result indicator\r\nexport const NetworkedButton: React.FC<{ onClick: () => Promise<any>, message: string, successMessage: string }> = ({ message, successMessage, children, onClick }) => {\r\n    const [state, setState] = React.useState(0);\r\n    return <Button onClick={() => {\r\n        setState(1)\r\n        onClick().then(t => {\r\n            setState(2);\r\n        }).catch(t => {\r\n            setState(3);\r\n        })\r\n    }}> {children}\r\n        {state == 1 && <Spinner animation=\"border\" />}\r\n        {state > 1 && <FontAwesomeIcon icon={state == 2 ? faCheck : faTimes} />}\r\n        {state < 2 ? message : successMessage}\r\n    </Button>\r\n}\r\n\r\nexport const PromiseButton: React.FC<{\r\n    //variant?:string,\r\n    className?:string,\r\n    onClick: () => Promise<any>,\r\n    icon?: any,\r\n} & ButtonProps> = ({ children, className, icon, onClick }, props) => {\r\n    const [loading, setState] = React.useState<boolean>(false);\r\n    return <Button {...props} className={className} onClick={() => {\r\n        if (loading)\r\n            return;\r\n        setState(true)\r\n        onClick().finally(() => {\r\n            setState(false);\r\n        })\r\n    }}>\r\n        {icon && <FontAwesomeIcon icon={icon} className=\"mr-1\" />}\r\n        {loading ? <Spinner animation=\"border\" /> : children}\r\n    </Button>\r\n}\r\n\r\nexport const IconButton: React.FC<{\r\n    onClick?: () => any,\r\n    icon?: any,\r\n    size?:string,\r\n} & ButtonProps> = ({ onClick, size, icon, variant, children }, props) => {\r\n    return (\r\n        <Button //variant=\"outline-primary\"\r\n            size={size}\r\n            onClick={onClick}\r\n            variant={variant}\r\n            {...props}>\r\n            <FontAwesomeIcon icon={icon} />\r\n            <span className=\"ml-1 d-none d-sm-inline\">\r\n                {children}\r\n            </span>\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport const TooltipButton: React.FC<{\r\n    onClick: () => Promise<any>, tooltip: string, text: string\r\n} & ButtonProps> = ({ onClick, children, tooltip }, props) => {\r\n    return (\r\n        <OverlayTrigger\r\n            placement=\"right\"\r\n            delay={{ show: 250, hide: 400 }}\r\n            overlay={\r\n                (\r\n                    <Tooltip id=\"button-tooltip\">\r\n                        {tooltip}\r\n                    </Tooltip>\r\n                )}\r\n        >\r\n            <PromiseButton {...props}>{children}{tooltip}</PromiseButton>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport const Fab = () => {\r\n\r\n}\r\n\r\nexport const FabContainer: React.FC = ({ children }) => {\r\n    return (\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '1em',\r\n        }}>\r\n            {children}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { observable } from 'mobx';\r\nimport { useAppStore, AppStore } from './app';\r\nimport { IBoard, IBoardSubscription } from 'model/compiled';\r\nimport _ from 'lodash';\r\n\r\nexport interface UserRef {\r\n    username: string\r\n}\r\n\r\n//subscriptions: Array<BoardSubscription>\r\ninterface AcccountState {\r\n    subscriptions: Array<IBoardSubscription>;\r\n    karma: number\r\n    authorityLevel: number\r\n}\r\n\r\nexport class AccountStore {\r\n    readonly app: AppStore\r\n    username: string\r\n\r\n    @observable\r\n    invalidToken: boolean = false;\r\n\r\n    defaults: Array<IBoardSubscription> = [];\r\n\r\n    // display array with order\r\n    //@observable subscriptions: Array<IBoardSubscription> = [];\r\n\r\n    // reduced array\r\n    @observable mapSubscriptions: {\r\n        [k: string]: IBoardSubscription\r\n    } = {};\r\n\r\n    get subscriptions() {\r\n        return _.map(this.mapSubscriptions);\r\n    }\r\n\r\n    //{ boardId: \"all\", createdAt: 0 }, \r\n    //{ boardId: \"listentothis\", createdAt: 0 },\r\n    //{ boardId: \"news\", createdAt: 0 }\r\n    constructor(app: AppStore, username: string) {\r\n        this.app = app;\r\n        this.username = username;\r\n        //this.subscriptions.concat(this.defaults);\r\n        this.addDefaults();\r\n        this.sync();\r\n    }\r\n\r\n    addDefaults() {\r\n        this.addSubscription({ boardId: 'news' });\r\n        this.addSubscription({ boardId: 'pics' });\r\n        this.addSubscription({ boardId: 'listentothis' });\r\n        this.addSubscription({ boardId: 'activities' });\r\n    }\r\n\r\n    addSubscriptionB(e: IBoard) {\r\n        if (this.mapSubscriptions[e.uId!]) {\r\n            return;\r\n        }\r\n        this.mapSubscriptions[e.uId!] = {\r\n            boardId: e.uId,\r\n        }\r\n    }\r\n\r\n    addSubscription(e: IBoardSubscription) {\r\n        //if (this.mapSubscriptions[e.boardId!]) {\r\n        //    return;\r\n        //}\r\n        this.mapSubscriptions[e.boardId!] = e\r\n        //this.subscriptions.push(e);\r\n    }\r\n\r\n    sync(): Promise<void> {\r\n        return this.app.api.endpointGet(\"me/state\", null, 200).then((r: AcccountState) => {\r\n            if (r.subscriptions) {\r\n                r.subscriptions.forEach(e => {\r\n                    this.addSubscription(e);\r\n                });\r\n                return;\r\n            }\r\n            return;\r\n        })\r\n    }\r\n    toJson(): any {\r\n        return {\r\n            'username': this.username,\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class UserStore {\r\n    readonly app: AppStore\r\n    userId: string\r\n\r\n    @observable\r\n    invalidToken: boolean = false;\r\n    constructor(app: AppStore, userId: string) {\r\n        this.app = app;\r\n        this.userId = userId;\r\n\r\n        //if this.isSelf()\r\n\r\n    }\r\n\r\n    load() {\r\n\r\n    }\r\n\r\n    isSelf() {\r\n        return this.app.loggedIn && this.app?.active?.username == this.userId;\r\n    }\r\n}\r\n\r\n\r\nconst userStoreContext = React.createContext<UserStore | null>(null);\r\nexport const UserStoreProvider: React.FC<{ userId: string }> = ({ children, userId }) => {\r\n    const app = useAppStore();\r\n\r\n    const [store, setStore] = React.useState<UserStore>();\r\n    React.useEffect(() => {\r\n        setStore(new UserStore(app, userId));\r\n    }, [app, userId]);\r\n\r\n    if (store) {\r\n        return <userStoreContext.Provider value={store}>\r\n            {children}\r\n        </userStoreContext.Provider>\r\n    }\r\n    return (\r\n        <>\r\n            Loading...\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useUserStore = () => {\r\n    const store = React.useContext(userStoreContext)\r\n    if (!store) {\r\n        throw new Error('userStoreContext must be used within a UserStoreProvider')\r\n    }\r\n    return store\r\n}\r\n\r\nconst fetch_retry = async (url: string, options: any, n: number) => {\r\n    let error;\r\n    for (let i = 0; i < n; i++) {\r\n        try {\r\n            return await fetch(url, options);\r\n        } catch (err) {\r\n            error = err;\r\n        }\r\n    }\r\n    throw error;\r\n};\r\n","import { observable } from 'mobx';\r\nimport JwtDecode from 'jwt-decode';\r\nimport { observer } from \"mobx-react\";\r\ninterface Token {\r\n    exp: number\r\n}\r\n\r\ninterface AccessToken extends Token {\r\n    username: string\r\n    avatar: string\r\n    exp: number\r\n    uid: string\r\n}\r\n\r\nexport interface TokenPair {\r\n    accessToken: string\r\n    refreshToken: string\r\n}\r\n\r\nexport interface Response {\r\n    data: Array<any>\r\n    token: string\r\n}\r\n\r\nexport class Jwt {\r\n    readonly token: Token;\r\n    protected raw: string\r\n    constructor(token: string) {\r\n        this.raw = token;\r\n        this.token = this.decode(token);\r\n    }\r\n    protected decode<T>(token: string): T {\r\n        console.log(\"[jwt decode] => \", token)\r\n        //let header = JwtDecode<T>(token, { header: true });\r\n        let body = JwtDecode<T>(token, { header: false });\r\n        return body;\r\n    }\r\n    public get encoded(): string {\r\n        return this.raw;\r\n    }\r\n    public expired(): boolean {\r\n        // undefined bug, todo: fix this\r\n        let o = Date.now() / 1000;\r\n        return o >= this.token.exp;\r\n    }\r\n}\r\n\r\nexport class AccessJwt extends Jwt {\r\n    readonly token: AccessToken;\r\n    //protected raw: string\r\n    constructor(rawToken: string) {\r\n        super(rawToken);\r\n        this.token = this.decode<AccessToken>(rawToken);\r\n    }\r\n}\r\n\r\nexport interface RequestState {\r\n    networkError: false,\r\n    response: globalThis.Response;\r\n    message: string;\r\n}\r\n\r\nexport interface APIError {\r\n    response: globalThis.Response;\r\n    message: string\r\n}\r\n\r\nexport async function http(\r\n    request: RequestInfo,\r\n    init: RequestInit,\r\n    expects: number,\r\n): Promise<any> {\r\n    const response = await fetch(request, init).catch(res => {\r\n        let o: APIError = {\r\n            response: res,\r\n            message: `network error`,\r\n        }\r\n        return Promise.reject(o);\r\n    });\r\n    if (response.status != expects) {\r\n        let o: APIError = {\r\n            response: response,\r\n            message: `expected ${expects} got ${response.status}`,\r\n        }\r\n        return Promise.reject(o);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nexport interface TokenPair {\r\n    accessToken: string\r\n    refreshToken: string\r\n}\r\n\r\nexport interface Response {\r\n    data: Array<any>\r\n    token: string\r\n}\r\n\r\nconst debug = false;\r\nconst subdomain = debug ? \"dev.\" : \"www.\";\r\n\r\n//export const HOST = `https://${document.domain}/`\r\nexport const HOST = `https://${subdomain}ourspaces.app/`;\r\nexport const API = `https://${subdomain}ourspaces.app/api/v1/`;\r\nexport const WEBSOCKET_HOST = `wss://event.ourspaces.app/api/v1/socket`;\r\n\r\nexport class NetworkService {\r\n    socket?: WebSocket\r\n    private getToken?: () => Promise<Jwt>;\r\n    constructor() { }\r\n    setGetToken(f: () => Promise<Jwt>) {\r\n        this.getToken = f;\r\n    }\r\n    unsetGetToken() {\r\n        this.getToken = undefined;\r\n    }\r\n    async getHeaders(): Promise<any> {\r\n        console.log(\"[api] get headers...\")\r\n        if (this.getToken) {\r\n            let jwt = await this.getToken();\r\n            return {\r\n                'Authorization': 'Bearer ' + jwt.encoded,\r\n            }\r\n        }\r\n        return Promise.resolve({});\r\n    }\r\n\r\n    timer?: NodeJS.Timeout\r\n    retryFactor: number = 1\r\n\r\n    async closeWebSocket() {\r\n        this.socket = undefined;\r\n    }\r\n\r\n    setupSocket(token?: string) {\r\n        this.socket = token ? new WebSocket(WEBSOCKET_HOST, [\"Bearer\", token]) : new WebSocket(WEBSOCKET_HOST);\r\n        this.socket.addEventListener('open', (event) => {\r\n            console.log(\"[NetworkService] opened socket connection\");\r\n            //new Notification(`Connected to event server`, {});\r\n            this.retryFactor = 1;\r\n        });\r\n        this.socket.addEventListener('close', (ev) => {\r\n            console.log(\"[socket] close: \", JSON.stringify(ev))\r\n            //new Notification(`Disconnected from event server`, {});\r\n            this.socket = undefined;\r\n            if (this.retryFactor < 10) {\r\n                this.retryFactor += .8;\r\n            }\r\n            console.log(\"[NetworkService] retry scale: \", this.retryFactor, (1000 * this.retryFactor) / 1000)\r\n            this.timer = setTimeout(() => this.initWebSocket(), 1000 * this.retryFactor);\r\n        });\r\n        this.socket.addEventListener('error', (ev) => {\r\n            console.log(\"[socket] error: \", JSON.stringify(ev))\r\n        })\r\n        this.socket.addEventListener('message', (ev) => {\r\n            console.log(\"[socket] message: \", JSON.stringify(ev.data))\r\n        })\r\n        return this.socket;\r\n    }\r\n\r\n    getSocket(): WebSocket | undefined {\r\n        return this.socket;\r\n    }\r\n\r\n    async initWebSocket(): Promise<WebSocket> {\r\n        if (this.socket) {\r\n            return this.socket;\r\n        }\r\n\r\n        console.log(\"[NetworkService] trying socket connection ...\");\r\n        try {\r\n            return this.setupSocket(this.getToken ? await this.getToken().then(t => t.encoded) : undefined);\r\n        } catch {\r\n            return this.setupSocket(undefined);\r\n        }\r\n        //let token = this.getToken ? this.getToken().then(t => this.setupSocket(t.encoded)) : this.setupSocket(undefined);\r\n        //this.setupSocket(token ?? undefined);\r\n        //return this.socket!;\r\n    }\r\n\r\n    basicGet(path: string, args: any, expects: number): Promise<any> {\r\n        const encodedArgs = args ? serialize(args) : undefined;\r\n        path = encodedArgs ? (path + \"?\" + encodedArgs) : path;\r\n        return http(API + path, {\r\n            method: 'GET',\r\n        }, expects);\r\n    }\r\n    basicPost(path: string, json: any, expects: number, headers: any = {}): Promise<any> {\r\n        return http(API + path, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(json),\r\n            headers: headers\r\n        }, expects)\r\n    }\r\n    endpointGet(path: string, args: any, expects: number): Promise<any> {\r\n        const encodedArgs = args ? serialize(args) : undefined;\r\n        path = encodedArgs ? (path + \"?\" + encodedArgs) : path;\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            method: \"GET\",\r\n            headers: h,\r\n        }, expects))\r\n    }\r\n    endpointPost(path: string, json: any, expects: number): Promise<any> {\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            headers: h,\r\n            method: \"POST\",\r\n            body: JSON.stringify(json)\r\n        }, expects));\r\n    }\r\n    endpointPostFile(path: string, file: File, expects: number): Promise<any> {\r\n        let formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            headers: h,\r\n            method: \"POST\",\r\n            body: formData,\r\n        }, expects));\r\n    }\r\n    endpointPostEx(path: string, json: any, args: any, expects: number): Promise<any> {\r\n        const encodedArgs = args ? serialize(args) : undefined;\r\n        path = encodedArgs ? (path + \"?\" + encodedArgs) : path;\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            headers: h,\r\n            method: \"POST\",\r\n            body: JSON.stringify(json)\r\n        }, expects));\r\n    }\r\n}\r\n\r\nfunction serialize(obj: any, prefix: any = undefined): any {\r\n    var str = [];\r\n    for (var p in obj) {\r\n        if (obj.hasOwnProperty(p)) {\r\n            var k = prefix ? prefix + \"[\" + p + \"]\" : p, v = obj[p];\r\n            str.push(typeof v == \"object\" ? serialize(v, k) : encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\r\n        }\r\n    }\r\n    return str.join(\"&\");\r\n}\r\n\r\n\r\nexport class ObservableRequestState {\r\n    @observable isFetching: boolean = false\r\n    @observable requests: number = 0\r\n    @observable error?: APIError\r\n    @observable ignore: boolean = false\r\n    wrap(f: () => Promise<any>): Promise<any> {\r\n        if (this.isFetching) {\r\n            console.log(\"[networkwrapper] rejecting, already fetching\")\r\n            return Promise.reject();\r\n        }\r\n        this.isFetching = true;\r\n        return f().catch((t: APIError) => {\r\n            this.error = t;\r\n            throw t;\r\n        }).finally(() => this.isFetching = false)\r\n    }\r\n\r\n    loadedOk(): boolean {\r\n        return this.isFetching == false && !this.error;\r\n    }\r\n}","import React from 'react';\r\nimport { observable, action, autorun, IObservableArray } from 'mobx';\r\nimport { useLocalStore } from 'mobx-react';\r\nimport { AccountStore, UserRef } from './user';\r\nimport { NetworkService, TokenPair, AccessJwt, Jwt } from '../service/api';\r\nimport JwtDecode from 'jwt-decode';\r\nimport { IEvent, join } from 'model/net';\r\n\r\n\r\nimport {\r\n    ILoginResponse,\r\n    ILoginRequest,\r\n    IBoardCreate,\r\n    IComment,\r\n    IBoard,\r\n    IThread,\r\n    ICommunityUserRef,\r\n    IBoardSubscription,\r\n    ICommunitySelectRequest,\r\n    ICommunitySelectResponse,\r\n    ICommentReplyEvent\r\n} from 'model/compiled'\r\n\r\nconst hydrateAppStore = (): AppStore => {\r\n    // load a new app object, or\r\n    // if we can find one, load it from local storage\r\n    let o = window.localStorage.getItem(\"app\")\r\n    if (!o) {\r\n        return new AppStore(undefined);\r\n    }\r\n    let json = JSON.parse(o);\r\n    return AppStore.fromStorage(o);\r\n    //json['access'], json['refresh']\r\n}\r\n\r\ninterface AppStorage {\r\n    accessToken?: string,\r\n    refreshToken?: string,\r\n}\r\n\r\nclass O {\r\n    \r\n    toJsonM() {\r\n        return JSON.stringify(this);\r\n    }\r\n}\r\n\r\nexport class AppStore extends O {\r\n    protected _api: NetworkService = new NetworkService();\r\n    @observable UIanimatedHeader: boolean = false;\r\n    @observable UIconstrainContainer: boolean = true;\r\n    @observable UIshowEventDebug: boolean = false;\r\n    @observable UIdarkTheme: boolean = false;\r\n    storeStack: Array<any> = [];\r\n\r\n    @action\r\n    assertInlineLogin(): Promise<any> {\r\n        if (!this.loggedIn) {\r\n            this.loginOverlay = true;\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    constructor(o?: AppStorage) {\r\n        super();\r\n\r\n\r\n        var worker = new Worker('service/event-worker.js');\r\n\r\n        console.log(\"[app store] constructed with tokens =>\", o?.accessToken, o?.refreshToken)\r\n        this.loadOther();\r\n        this.openSocket();\r\n\r\n\r\n        console.log( this.toJsonM());\r\n\r\n        if (o && o.accessToken && o.refreshToken)\r\n            this.setupLogin(o.accessToken, o.refreshToken);\r\n    }\r\n\r\n    static fromStorage(o: Object): AppStore {\r\n        return new AppStore(o);\r\n    }\r\n\r\n    @observable protected _access?: AccessJwt;\r\n    @observable protected _refresh?: Jwt;\r\n\r\n    @observable isBottomOfPage: boolean = false;\r\n    @observable displayableEvent: IObservableArray<IEvent> = observable.array([]);\r\n    @observable commentReplyEvent: IObservableArray<ICommentReplyEvent> = observable.array([]);\r\n\r\n    @observable recent: IObservableArray<IThread> = observable.array([]);\r\n    @observable moderate?: IComment | IBoard | IThread | ICommunityUserRef;\r\n    @observable loginOverlay: boolean = false;\r\n\r\n    @observable trending: IObservableArray<IBoard> = observable.array([\r\n        { uId: 'news' },\r\n        { uId: 'pics' },\r\n        { uId: 'development' },\r\n        { uId: 'wiki' },\r\n    ]);\r\n\r\n    @observable defaults: IObservableArray<IBoardSubscription> = observable.array([\r\n        { boardId: 'news' },\r\n        { boardId: 'pics' },\r\n        { boardId: 'development' },\r\n        { boardId: 'wiki' },\r\n    ]);\r\n    @observable themeName: string = \"light\";\r\n\r\n    isDarkTheme(): boolean {\r\n        return this.themeName == 'dark';\r\n    }\r\n\r\n    async openSocket() {\r\n        Notification.requestPermission();\r\n        await this._api.initWebSocket().then(t => t.addEventListener('message', (ev) => {\r\n            //debugger;\r\n            let event: IEvent = JSON.parse(ev.data);\r\n            this.addEvent(event);\r\n        }))\r\n    }\r\n\r\n    addEvent(data: IEvent) {\r\n        //debugger;\r\n        let nop: NotificationOptions = {}\r\n        switch (data.entityId) {\r\n            case \"comment.reply\":\r\n                let commentReply: ICommentReplyEvent = data.data;\r\n                this.commentReplyEvent.push();\r\n                this.displayableEvent.push(data);\r\n                if (this.loggedIn && this.active?.username == commentReply.comment?.user?.username)\r\n                    break;\r\n                new Notification(\r\n                    `@${commentReply.comment?.user?.username ?? \"unknown\"} replied to your comment with: \"${commentReply.comment?.content ?? \"\"}\"\\n`, {});\r\n                break;\r\n            case \"comment.moderate\":\r\n                break\r\n            case \"comment.user.mention\":\r\n                new Notification(\r\n                    `@someone mentioned you in a thread`);\r\n                break\r\n            case \"board.subscribe\":\r\n                new Notification(\r\n                    `You subscribed to a community`, {});\r\n                break\r\n            case \"board.unsubscribe\":\r\n                new Notification(\r\n                    `You unsubscribed to a community`, {});\r\n                break\r\n            case \"comment.vote\":\r\n                new Notification(\r\n                    `You voted on a comment`, {});\r\n                this.displayableEvent.push(data);\r\n            case \"thread.vote\":\r\n                new Notification(\r\n                    `Thread vote`, {});\r\n                this.displayableEvent.push(data);\r\n            case \"thread.crosspost\":\r\n                this.displayableEvent.push(data);\r\n                break;\r\n            case \"thread.reply.crosspost\":\r\n                new Notification(\r\n                    `Your thread was crossposted`, {});\r\n                break;\r\n        }\r\n    }\r\n\r\n    loadOther() {\r\n        this.api.endpointGet(\"communities/default\", {}, 200)\r\n            .then((t: ICommunitySelectResponse) => {\r\n                if (t.data)\r\n                    this.defaults = observable.array(t.data.map(t => {\r\n                        let o: IBoardSubscription = t;\r\n                        o.boardId = t.uId;\r\n                        return o;\r\n                    }));\r\n            })\r\n        this.api.endpointGet(\"communities/trending\", {}, 200)\r\n            .then((t: ICommunitySelectResponse) => {\r\n                if (!t.data)\r\n                    return;\r\n                this.trending = observable.array(t.data);\r\n            }).catch(e => { });\r\n    }\r\n\r\n    accounts: Array<UserRef> = []\r\n    auto = autorun((r) => this.persist())\r\n    get api(): NetworkService {\r\n        return this._api;\r\n    }\r\n\r\n    @observable active?: AccountStore | null;\r\n    get loggedIn(): boolean {\r\n        return this.active != null;\r\n    }\r\n\r\n    toJson(): any {\r\n        return JSON.stringify({\r\n            'access': this._access?.encoded,\r\n            'refresh': this._refresh?.encoded,\r\n            //'accounts': this.accounts,\r\n            'active': this.active?.toJson(),\r\n        });\r\n    }\r\n\r\n    persist() {\r\n        console.log(\"persisting\")\r\n        if (this.active) { }//trick mobx\r\n        window.localStorage.setItem(\"app\", this.toJson())\r\n    }\r\n\r\n    addView(t: IThread) {\r\n        this.recent.push(t);\r\n        window.localStorage.setItem(\"history\", JSON.stringify(this.recent));\r\n    }\r\n\r\n\r\n    @action\r\n    logout(): Promise<void> {\r\n        //delete refresh token\r\n        this.tearDownLogin();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @action\r\n    signup(name: string, email: string, key: string): Promise<any> {\r\n        if (name.length < 1 || email.length < 1) {\r\n            return Promise.reject();\r\n        }\r\n        return this.api.endpointPost(\r\n            \"auth/signup\",\r\n            {\r\n                username: name,\r\n                email: email,\r\n                key: key,\r\n            },\r\n            200\r\n        ).then(() => {\r\n            console.log(\"[app store] signed up successfully\")\r\n            this.login(name, key);\r\n        });//.catch(() => false)\r\n    }\r\n\r\n    @action\r\n    login(name: string, key: string): Promise<void> {\r\n        return this.api.endpointPost(\r\n            \"auth/jwt/login\",\r\n            { username: name, password: key } as ILoginRequest,\r\n            200,\r\n        ).then((json: ILoginResponse) => {\r\n            console.log(\"[app store] logged in\");\r\n            this.setupLogin(json.tokens!.accessToken!, json.tokens!.refreshToken!);\r\n        })\r\n    }\r\n\r\n    private tearDownLogin() {\r\n        this._refresh = undefined;\r\n        this._access = undefined;\r\n        this.active = undefined;\r\n        this.api.unsetGetToken();\r\n        this.persist();\r\n    }\r\n\r\n    private setupLogin(accessToken: string, refreshToken: string) {\r\n        this._access = new AccessJwt(accessToken);\r\n        this._refresh = new Jwt(refreshToken);\r\n        this.api.setGetToken(this.getTokenCallback);\r\n        this.persist();\r\n\r\n        this.spotlightQuery(\"\");\r\n\r\n        this.api.closeWebSocket();\r\n        this.openSocket();\r\n        this.active = new AccountStore(this, this._access.token.uid);\r\n    }\r\n\r\n    protected getTokenCallback = (): Promise<Jwt> => {\r\n        //console.log(\"[app] getting token\");\r\n        if (!this._access) {\r\n            throw \"error\";\r\n        }\r\n        if (this._access?.expired()) {\r\n            console.log(\"[app] getting NEW access token\");\r\n            return this.api.basicPost(\"auth/jwt/renewtoken\", {\r\n                'RefreshToken': this._refresh?.encoded,\r\n            }, 200, {\r\n                'Authorization': 'Bearer ' + this._access?.encoded\r\n            }).then((json: TokenPair) => {\r\n                console.log(\"[app] got new access token\")\r\n                this._access = new AccessJwt(json.accessToken);\r\n                this.persist()\r\n                return this._access!;\r\n            }).catch(t => {\r\n                if (t.response == 401) {\r\n                    // new refresh token required\r\n                    // set user logged out\r\n                    this.active!.invalidToken = true;\r\n                }\r\n                throw t;\r\n            });\r\n        }\r\n        console.log(\"[app] using existing access token\");\r\n        return Promise.resolve(this._access);\r\n    }\r\n\r\n    @observable UIShowSpotlight: boolean = false\r\n\r\n    @observable communitySearch?: ICommunitySelectResponse\r\n\r\n    @action\r\n    spotlightQuery(s: string): Promise<any> {\r\n        let o: ICommunitySelectRequest = {\r\n            query: s,\r\n            limit: 5,\r\n        }\r\n        this.api.endpointGet(\"communities/search\", o, 200).then((t: ICommunitySelectResponse) => {\r\n            this.communitySearch = t;\r\n            //this.communitySearch = join(this.communitySearch ?? { data: [], token: \"\" }, t);\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @action\r\n    showSpotlight() {\r\n        this.UIShowSpotlight = true;\r\n    }\r\n\r\n    @action\r\n    createCommunity(o: IBoardCreate): Promise<any> {\r\n        return this.api.endpointPost(\"createcommunity\", o, 200);\r\n    }\r\n\r\n    getCommunityLink(boardId: string) {\r\n        return `/+${boardId}/`\r\n    }\r\n\r\n    getRandomCommunity() {\r\n        return this.api.endpointGet(\"communities/random\", null, 200);\r\n    }\r\n}\r\n\r\nfunction useClassStore<T>(init: T): T {\r\n    const [store] = React.useState<T>(init)\r\n    return store\r\n}\r\n\r\nconst appStoreContext = React.createContext<AppStore | null>(null);\r\nexport const AppStoreProvider: React.FC = (props) => {\r\n    const store = hydrateAppStore();\r\n    //const store = useLocalStore(() => hydrateAppStore());\r\n    return (\r\n        <appStoreContext.Provider value={store}>\r\n            {props.children}\r\n        </appStoreContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useAppStore = () => {\r\n    const store = React.useContext(appStoreContext)\r\n    if (!store) {\r\n        throw new Error('appStoreContext must be used within a StoreProvider.')\r\n    }\r\n    return store\r\n}","import React from 'react';\r\nimport { observable, computed, action, IObservableArray, autorun, IReactionDisposer } from 'mobx';\r\nimport { observer, useLocalStore, useAsObservableSource, Provider } from \"mobx-react\";\r\nimport { AppStore, useAppStore } from \"stores/app\";\r\nimport { ObservableRequestState, Response, APIError } from \"service/api\";\r\nimport {\r\n    IThread,\r\n    IBoard,\r\n    IComment,\r\n    IThreadSelectFilters,\r\n    ThreadSelectFilters,\r\n    IThreadCreateRequest,\r\n    IThreadsSelectResponse,\r\n    IThreadsSelectResponseWithBoardContext,\r\n    IEntityVoteRequest,\r\n    IVote\r\n} from 'model/compiled';\r\n\r\nimport { useHistory } from 'react-router';\r\nexport type {\r\n    IThread as Thread,\r\n    IUser as User,\r\n    IBoard as Board\r\n} from 'model/compiled';\r\n\r\nexport class BoardStore extends ObservableRequestState {\r\n    app: AppStore\r\n    token?: string\r\n    boardId: string\r\n\r\n    @observable overlayThread?: IThread\r\n\r\n    //\"_masonry\" \r\n    @observable UIdatalayout: number = 0;\r\n    @observable UIcontainerFluid: boolean = true;\r\n    @observable backgroundImage?: string;// = `url(\"https://dev.ourspace.dev/res/bg-2.png\")`;\r\n    headerImage?: string = `url(https://source.unsplash.com/pCcGpVsOHoo/1090x130)`;\r\n    //\"url(https://source.unsplash.com/collection/street-photography/1280x200)\"; //\"url('https://dev.ourspace.dev/res/bg-1.png')\"\r\n    iconImage?: string;\r\n\r\n    //`url(\"https://source.unsplash.com/collection/wallpapers/1280x800\")`;\r\n    backgroundRepeat: string = \"repeat\";\r\n    backgroundSize: string = 'unset'; //\"cover\";\r\n\r\n    @observable overlayThreadMedia?: IThread = undefined;\r\n\r\n    @observable info?: IBoard\r\n    @observable debug: boolean = false\r\n    @observable filters: IThreadSelectFilters = {\r\n        sortDirection: ThreadSelectFilters.SortDirection.DESC,\r\n        rankMethod: ThreadSelectFilters.Method.TOP,\r\n        limit: 25,\r\n        query: \"\",\r\n        page: 0,\r\n        //createdStart: 0,\r\n        //createdEnd: 0,\r\n        //token: \"\"\r\n    }\r\n\r\n    isConstrained() {\r\n        return this.app.UIconstrainContainer;// || !this.UIcontainerFluid;\r\n    }\r\n\r\n    filtersPrev?: IThreadSelectFilters\r\n    autoQuery: IReactionDisposer = autorun((r) => {\r\n        //history.push({ pathname: \"\" })\r\n        console.log(\"autorun => \", this.filters);\r\n        this.filtersPrev = this.filters;\r\n\r\n        // diff keys\r\n        Object.keys(this.filters).forEach(t => {\r\n            //if (this.filters[t] != this.filtersPrev[t]) {}\r\n            console.log(\"key => \", t);\r\n        });\r\n\r\n        if (this.filters.rankMethod) {\r\n            //const history = useHistory();\r\n            //history.push(\"test\");\r\n        }\r\n\r\n    })\r\n\r\n    static getDefaultQueryParams(): string {\r\n        let o: IThreadSelectFilters = {}\r\n        return Object.entries(o).map(([key, value]) => `${key}=${value}`).join(\"&\");\r\n    }\r\n\r\n    getQueryParams(): string {\r\n        return Object.entries(this.filters).map(([key, value]) => `${key}=${value}`).join(\"&\");\r\n    }\r\n\r\n    @observable data: IObservableArray<IThread> = observable.array([])\r\n    constructor(app: AppStore, boardId: string) {\r\n        super();\r\n\r\n        console.log(\"[boardstore] init => \", boardId);\r\n        this.app = app;\r\n        this.boardId = boardId;\r\n        //this.filters.boardId = boardId;\r\n        this.request();\r\n    }\r\n\r\n    @action\r\n    unsubscribe(): Promise<void> {\r\n        if (!this.info) {\r\n            return Promise.reject();\r\n        }\r\n        return this.app.api.endpointPostEx(\"board/subscription\", null, {\r\n            action: \"unsubscribe\",\r\n            boardId: this.boardId,\r\n        }, 200).then(t => {\r\n            this.info!.isMember = false;\r\n        })\r\n    }\r\n\r\n    @action\r\n    subscribe(): Promise<void> {\r\n        if (!this.info) {\r\n            return Promise.reject();\r\n        }\r\n        return this.app.api.endpointPostEx(\"board/subscription\", null, {\r\n            action: \"subscribe\",\r\n            boardId: this.boardId,\r\n        }, 200).then(t => {\r\n            this.info!.isMember = true;\r\n        });\r\n    }\r\n\r\n    getCollection(s: string): string {\r\n        switch (s) {\r\n            case \"all\":\r\n                return \"all\"\r\n            case \"popular\":\r\n                return \"collections/all\"\r\n            default:\r\n                return \"board/threads\"\r\n        }\r\n    }\r\n\r\n    @action\r\n    request(): Promise<void> {\r\n        this.token = undefined;\r\n        this.error = undefined;\r\n        this.ignore = false;\r\n        this.filters.page = 0;\r\n\r\n        const withContext = this.info == null && this.boardId != 'all';\r\n        return this.wrap(() => this.app.api.endpointGet(\r\n            this.getCollection(this.boardId), {\r\n            ...{\r\n                'withContext': withContext,\r\n                'boardId': this.boardId,\r\n                'token': this.token,\r\n            }, ...this.filters\r\n        }, 200).then((res: any) => {\r\n            console.log(\"[board] got data\");\r\n            if (withContext) {\r\n                this.info = res.board;\r\n                res = res.threads;\r\n            }\r\n\r\n            document.title = this.getPageTitle();\r\n\r\n            this.token = res.token;\r\n            this.data = observable.array<IThread>(res.data);\r\n            return\r\n        }))\r\n    }\r\n\r\n    getPageTitle() {\r\n        return `ourspaces | +${this.boardId}`\r\n    }\r\n\r\n    @action\r\n    requestMore() {\r\n        this.ignore = true;\r\n        this.filters!.page!++;\r\n        return this.wrap(() => this.app.api.endpointGet(this.getCollection(this.boardId), {\r\n            ...{\r\n                'boardId': this.boardId,\r\n                'sort': this.filters,\r\n                'token': this.token,\r\n            }, ...this.filters\r\n        }, 200).then((res: Response) => {\r\n            this.token = res.token;\r\n            if (res.data?.length > 0)\r\n                this.data.push(...res.data);\r\n        })).finally(() => this.ignore = false)\r\n    }\r\n\r\n    @action\r\n    event(event: string) {\r\n        this.app.api.endpointPost(`board/event`, { boardId: this.boardId, action: event, }, 200);\r\n    }\r\n\r\n    @action\r\n    voteThread(threadId: string, action: string): Promise<IVote> {\r\n        if (!this.app.loggedIn)\r\n            return Promise.reject();\r\n        let v: IVote = {\r\n            type: 1,\r\n            typeCode: action,\r\n        }\r\n        let vote: IEntityVoteRequest = {\r\n            type: \"thread\",\r\n            entityId: threadId,\r\n            vote: v,\r\n        }\r\n        return this.app.api.endpointPost(\"board/thread/vote\", vote, 200);\r\n    }\r\n\r\n    createThread(s: IThreadCreateRequest): Promise<any> {\r\n        return this.app.api.endpointPost(\"board/newthread?boardId=\" + s.boardId, s, 200);\r\n    }\r\n\r\n\r\n    getThreadLink(threadId: string) {\r\n        return `/+${this.boardId}/${threadId}`;\r\n    }\r\n\r\n    @action\r\n    uploadIcon(file: File): Promise<any> {\r\n        return this.app.api.endpointPostFile(`board/media?area=icon&boardId=${this.boardId}`, file, 200);\r\n    }\r\n\r\n    @action\r\n    uploadBanner(file: File): Promise<any> {\r\n        return this.app.api.endpointPostFile(`board/media?area=banner&boardId=${this.boardId}`, file, 200);\r\n    }\r\n\r\n    moderateThread() {\r\n        this.app.moderate = this.info; \r\n    }\r\n\r\n    moderateComment(c: IComment) {\r\n        this.app.moderate = c; \r\n    }\r\n\r\n    saveThread(t: string): Promise<any> {\r\n        return this.app.api.endpointPost(`thread/bookmark`, { threadId: t }, 200);\r\n    }\r\n\r\n    @action setOverlay(t: IThread) {\r\n        console.log(\"[store/setOverlay] => \", t)\r\n        this.overlayThread = t;\r\n    }\r\n}\r\n\r\nexport const boardStoreContext = React.createContext<BoardStore | null>(null);\r\nexport const BoardStoreProvider: React.FC<{ boardId: string }> = ({ boardId, children }) => {\r\n\r\n    console.log(\"[BoardStoreProvider] called with => \", boardId)\r\n    const app = useAppStore();\r\n    const store = new BoardStore(app, boardId);\r\n\r\n    /*\r\n    const [store, setStore] = React.useState<BoardStore>();\r\n    \r\n    React.useEffect(() => {\r\n        console.log(\"[BoardStoreProvider] creating new state for \", boardId);\r\n        setStore(undefined);\r\n        setStore(new BoardStore(app, boardId));\r\n    }, [app, boardId]);\r\n    */\r\n\r\n    //const [store] = React.useState(new BoardStore(app, boardId))\r\n    //const store = useLocalStore<BoardStore>(() => new BoardStore(app, props.boardId));\r\n    if (store) {\r\n        return (\r\n            <boardStoreContext.Provider value={store}>\r\n                {children}\r\n            </boardStoreContext.Provider>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            Loading\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const useBoardStore = (): BoardStore => {\r\n    const store = React.useContext(boardStoreContext)\r\n    if (!store) {\r\n        throw new Error('useBoardStore must be used within a \"boardStore\" StoreProvider.')\r\n    }\r\n    return store\r\n}\r\n\r\nexport const useBoardStoreUnsafe = (): BoardStore | null => {\r\n    return React.useContext(boardStoreContext)\r\n}","import React, { useEffect } from 'react';\r\nimport { useLocalStore } from 'mobx-react';\r\nimport { AppStore, useAppStore } from \"./app\";\r\nimport { ObservableRequestState, APIError, Response } from \"service/api\"\r\nimport { useBoardStore, useBoardStoreUnsafe, BoardStore, Board, Thread } from \"./board\";\r\nimport {\r\n    IThread, IThreadWithBoardContext,\r\n    ICommunityUserRef,\r\n    ICommentSelectGraphResponse, IComment, ICommentNode,\r\n    ICommentCreateRequest, ICommentSelectResponse,\r\n    IEntityVoteRequest, IVote, IThreadsSelectResponse\r\n} from 'model/compiled'\r\nimport { observable } from 'mobx';\r\n\r\ninterface ThreadResponse {\r\n    thread: Thread,\r\n    board: Board,\r\n    comments: Array<any>\r\n}\r\n\r\nexport class ThreadStore extends ObservableRequestState {\r\n    app: AppStore\r\n    board?: BoardStore\r\n    threadId: string\r\n    @observable\r\n    requests: number = 0\r\n    threadctx?: IThreadWithBoardContext\r\n    @observable\r\n    thread?: IThread\r\n    //@observable\r\n    //comments?: ICommentSelectResponse\r\n    @observable\r\n    commentsGraph?: ICommentSelectGraphResponse\r\n    \r\n    @observable\r\n    flatComments: Array<IComment> = [];\r\n\r\n    constructor(app: AppStore, threadId: string, board?: BoardStore, init?: IThreadWithBoardContext) {\r\n        super();\r\n        this.board = board;\r\n        this.app = app;\r\n        this.threadId = threadId;\r\n        console.log(\"[thread-store] => construct\");\r\n        this.load();\r\n    }\r\n\r\n    event(event: string) {\r\n        this.app.api.endpointPost(`board/event/thread`, { threadId: this.threadId, action: event }, 200);\r\n    }\r\n\r\n    addComment(content: string, parentId?: string): Promise<void> {\r\n        let comment: IComment = {\r\n            user: {\r\n                username: this.app.active!.username!\r\n            },\r\n            content: content,\r\n            parentId: parentId,\r\n        }\r\n        let wrapper: ICommentCreateRequest = {\r\n            threadId: this.threadId,\r\n            comment: comment,\r\n        }\r\n        // this is a bit silly\r\n        //this.ignore = true;\r\n        //return this.wrap(() => this.app.api.endpointPost(\"board/thread/comment\", wrapper, 200)\r\n        //    .then(t => this.insertComment(comment))\r\n        //    .finally(() => this.ignore = false));\r\n        return this.app.api.endpointPost(\"board/thread/comment\", wrapper, 200)\r\n            .then(t => this.insertComment(comment))\r\n    }\r\n\r\n    insertComment(comment: IComment) {\r\n        if (!comment.parentId) {\r\n            this.flatComments.push(comment);\r\n        }\r\n    }\r\n\r\n    editComment(content: string, commentId: string): Promise<void> {\r\n        if (this.isFetching) {\r\n            return Promise.reject();\r\n        }\r\n        this.isFetching = true;\r\n        return this.app.api.endpointPost(\"board/thread/comment\", {}, 200).\r\n            then((t: IComment) => {\r\n                //inject into data\r\n            }).finally(() => this.isFetching = false);\r\n    }\r\n\r\n    voteThread(action: string): Promise<any> {\r\n        return this.board?.voteThread(this.threadId, action) ?? Promise.reject();\r\n    }\r\n\r\n    loadComments(more: boolean = false) { }\r\n\r\n    voteComment(commentId: string, action: string): Promise<void> {\r\n        let v: IVote = {\r\n            type: 1,\r\n            typeCode: action,\r\n        }\r\n        let vote: IEntityVoteRequest = {\r\n            type: \"comment\",\r\n            entityId: commentId,\r\n            vote: v,\r\n        }\r\n        return this.app.api.endpointPost(\"board/thread/comment/vote\", vote, 200).finally(() => this.isFetching = false);\r\n    }\r\n\r\n    _flattenComments = (\r\n        map: Array<IComment>,\r\n        v: {\r\n            [k: string]: ICommentNode\r\n        }) => {\r\n        for (let i in v) {\r\n            let n = v[i]\r\n            if (!n.comment) {\r\n                continue\r\n            }\r\n            map.push(n.comment)\r\n            if (n.children) {\r\n                this._flattenComments(map, n.children)\r\n            }\r\n        }\r\n    }\r\n\r\n    load(): Promise<void> {\r\n\r\n        const withContext: boolean = (this.thread == undefined);\r\n        this.event(\"open\");\r\n        return this.wrap(() => this.app.api.endpointGet(\"board/thread\", {\r\n            'threadId': this.threadId,\r\n            'withContext': withContext,\r\n        }, 200).then((t: IThreadWithBoardContext) => {\r\n            this.thread = t.thread ?? undefined;\r\n            this.app.addView(this.thread!);\r\n\r\n            //this.comments = t.comments ?? undefined;\r\n            this.commentsGraph = t.commentsGraph ?? undefined;\r\n            if (this.commentsGraph) {\r\n                this._flattenComments(this.flatComments, this.commentsGraph!.data!)\r\n            }\r\n        }))\r\n    }\r\n\r\n    assertInlineLogin():Promise<any> {\r\n       return this.app.assertInlineLogin();\r\n    }\r\n\r\n    requestMore(commentId: string): Promise<void> {\r\n        return Promise.reject();\r\n    }\r\n}\r\n\r\nconst threadStoreContext = React.createContext<ThreadStore | null>(null);\r\nexport const ThreadStoreProvider: React.FC<{ threadId: string, initData?: Thread }> = ({ children, threadId, initData }) => {\r\n    //const store = useLocalStore(() => new ThreadStore(props.app));\r\n    const app = useAppStore();\r\n    const board = useBoardStoreUnsafe();\r\n    const [store, setStore] = React.useState<ThreadStore>();\r\n    React.useEffect(() => {\r\n        setStore(new ThreadStore(app, threadId, board ?? undefined, undefined));\r\n    }, [app, board, threadId]);\r\n\r\n    if (store) {\r\n        return <threadStoreContext.Provider value={store}>\r\n            {children}\r\n        </threadStoreContext.Provider>\r\n    }\r\n    return (\r\n        <>\r\n            Loading...\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useThreadStore = () => {\r\n    const store = React.useContext(threadStoreContext)\r\n    if (!store) {\r\n        throw new Error('threadStoreContext must be used within a ThreadStoreProvider')\r\n    }\r\n    return store\r\n}","import React from 'react';\r\n\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { Navbar, Nav, Container, Button, Row, Col, Modal, Overlay, Spinner } from 'react-bootstrap';\r\nimport ReactMde from 'react-mde';\r\nimport { dark } from './theme';\r\nimport { faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\r\n\r\n\r\nexport const TextEditor: React.FC<{\r\n    source?: string,\r\n    cancelText: string,\r\n    acceptText: string,\r\n    buttons?: any,\r\n    onAccept: (data: any) => Promise<any>,\r\n    onCancel?: () => any\r\n}> = ({ source, onAccept, onCancel, buttons }) => {\r\n\r\n    const [value, setValue] = React.useState<string>();\r\n    const [selectedTab, setSelectedTab] = React.useState<\"write\" | \"preview\" | undefined>(\"write\");\r\n    const [isWaiting, setWaiting] = React.useState<boolean>(false);\r\n    const target = React.useRef(null);\r\n\r\n    //const ref = React.useRef<Editor>(null);\r\n    const onAcceptPre = () => {\r\n        if (isWaiting) {\r\n            return;\r\n        }\r\n        setWaiting(true);\r\n        onAccept(value).finally(() => {\r\n            setValue(\"\");\r\n            setWaiting(false);\r\n        }).catch(t => {\r\n            setWaiting(false);\r\n        })\r\n    }\r\n\r\n    const Wrapper = (v: any) => {\r\n        return (\r\n            <div className=\"d-flex flex-row\">\r\n                <div style={{\r\n                    visibility: isWaiting ? \"visible\" : \"hidden\",\r\n                    position: 'fixed',\r\n                    top: 0, right: 0, left: 0, bottom: 0,\r\n                    zIndex: 100,\r\n                    pointerEvents: 'none',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    backgroundColor: 'rgba(255, 255, 255, .5)'\r\n\r\n                }}>\r\n                    <Spinner animation=\"border\" variant=\"primary\" />\r\n                </div>\r\n                {v}\r\n                <div className=\"ml-1 d-flex flex-column justify-content-end _button-column\">\r\n                    {onCancel && <Button variant=\"outline-dark\" onClick={() => onCancel()} >\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </Button>}\r\n                    <Button className=\"\" variant=\"primary\" onClick={onAcceptPre} >\r\n                        <FontAwesomeIcon icon={faPaperPlane} />\r\n                    </Button>\r\n                    {buttons}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        Wrapper(\r\n            <ReactMde\r\n                value={value}\r\n                selectedTab={selectedTab}\r\n                onTabChange={setSelectedTab}\r\n                generateMarkdownPreview={(markdown) => {\r\n                    return Promise.resolve(<ReactMarkdown source={markdown} />);\r\n                }}\r\n                onChange={setValue}\r\n            />\r\n        )\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from \"classnames\";\r\nimport { Spinner, OverlayTrigger, Popover, Button } from 'react-bootstrap';\r\nimport { IVote } from 'model/compiled';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//😀 😃 😄 😁 😆 😅 😂 🤣 ☺️ 😊 😇 🙂 🙃 😉\r\n\r\nconst codeMap: { [k: string]: string } = {\r\n    'up': '👍',\r\n    'down': '👎',\r\n    'funny': '🤣',\r\n    'wow': '😯',\r\n    'haha': '😂',\r\n    'crazy': '🤪',\r\n    'thinking': '🤔',\r\n    'love': '❤️',\r\n    'angry': '😠',\r\n    'vangry': '👿'\r\n}\r\n\r\n\r\nconst arrowMap: { [k: string]: any } = {\r\n    'up': faArrowUp,\r\n    'down': faArrowDown,\r\n}\r\n\r\nconst v: Array<string> = [\r\n    'up',\r\n    'down',\r\n];\r\n\r\nexport const ArrowVoter: React.FC<{\r\n    className?: string,\r\n    onVote: (a: string) => Promise<any>,\r\n    votes?: { [k: string]: number }\r\n    vote?: string,\r\n}> = ({\r\n    onVote,\r\n    votes,\r\n    vote\r\n}) => {\r\n        const [mvt, setVoteChange] = React.useState<string | undefined>(vote);\r\n        let up = 0, down = 0;\r\n        if (votes && votes['up']) {\r\n            up = votes['up'];\r\n        }\r\n        if (votes && votes['down']) {\r\n            down = votes['down'];\r\n        }\r\n        const total = up - down;\r\n\r\n        const onVotePre = (v: string) => {\r\n            onVote(v).then(t => {\r\n                setVoteChange(v);\r\n            });\r\n        }\r\n\r\n        const getVote = (): number => {\r\n            if (vote != mvt && mvt == 'down') {\r\n                return -1;\r\n            }\r\n\r\n            if (vote != mvt && mvt == 'up') {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n            //((!vote && mvt == 'down') ? -1 : ((!vote && mvt == 'up') ? 1: 0))\r\n        }\r\n\r\n        return (\r\n            <div className=\"d-flex flex-column align-items-center\">\r\n                <small>{total + getVote()}</small>\r\n                <div className=\"d-flex flex-column justify-content-between\">\r\n                    {v.map(v => {\r\n                        const isThis = (mvt == v);\r\n                        return (\r\n                            <Button\r\n                                onClick={() => onVotePre(v)}\r\n                                key={v}\r\n                                size=\"sm\"\r\n                                variant=\"none\"\r\n                                className={isThis ? \"text-primary\" : \"\"}>\r\n                                <FontAwesomeIcon icon={arrowMap[v]} />\r\n                            </Button>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport const InlineVoter: React.FC<{\r\n    loggedIn?: boolean,\r\n    className?: string\r\n    size?: string\r\n    preview?: boolean\r\n    onClick: (a: string) => Promise<any>,\r\n    table: Array<string>,\r\n    votes?: { [k: string]: number },\r\n    value: string\r\n}> = ({ loggedIn, onClick, preview, value, votes, table, className, size }) => {\r\n\r\n    const [state, setLoading] = React.useState(false);\r\n    const [valueState, setValue] = React.useState<string>(value);\r\n    const [pop, setPop] = React.useState<boolean>(false);\r\n\r\n    const fire = (v: string): Promise<any> => {\r\n        const nv = (valueState == v) ? \"unset\" : v;\r\n        setLoading(true);\r\n        return onClick(nv)\r\n            .then((t: IVote) => setValue(nv))\r\n            .catch(t => setLoading(false))\r\n            .finally(() => setLoading(false));\r\n    }\r\n    let overlay = React.useRef(null);\r\n\r\n    const def = \"\"; //\" rounded border\";\r\n    const cls = className ? className + def : def;\r\n\r\n    // https://stackoverflow.com/questions/38467848/react-bootstrap-how-to-manually-close-overlaytrigger\r\n    // https://stackoverflow.com/a/47636953\r\n    return (\r\n        <OverlayTrigger\r\n            rootClose={true}\r\n            //componentRef={(ref: any) => this.overlay = ref}\r\n            //ref={ref}\r\n            //trigger={[\"hover\", \"focus\"]}\r\n            //: [\"hover\", \"focus\"]\r\n            trigger={preview ? [\"click\"] : undefined}\r\n            placement=\"auto\"\r\n            overlay={\r\n                <Popover id={`popover${state}`}>\r\n                    <Popover.Title as=\"h3\">\r\n                        Opinion\r\n                    </Popover.Title>\r\n                    <Popover.Content>\r\n                        {table.map((v, i) => {\r\n                            const isThis = (v == valueState);\r\n                            let count = (votes && votes[v]) ?? 0;\r\n                            return (\r\n                                <button\r\n                                    key={v}\r\n                                    style={{ padding: size }}\r\n                                    type=\"button\" className={\r\n                                        classNames(\"btn btn-sm\",\r\n                                            { \"btn-outline\": !isThis },\r\n                                            { \"btn-outline-primary\": isThis },\r\n                                            { \"selected\": isThis })}\r\n                                    onClick={() => fire(v).then(t => document.body.click())}>\r\n                                    {codeMap[v] ?? \"\"}\r\n                                    <span>{count}</span>\r\n                                </button>\r\n                            );\r\n                        })}\r\n                    </Popover.Content>\r\n                    <Link className=\"px-2\" to=\"/about\"><small>Read more here</small></Link>\r\n                </Popover>\r\n            }\r\n        >\r\n            <div className={cls}\r\n                onMouseLeave={(e) => { }}\r\n                onMouseEnter={(e) => { }} >\r\n                {table.map((v, i) => {\r\n                    if (preview && i > 1) {\r\n                        return;\r\n                    }\r\n                    const isThis = (v == valueState);\r\n                    let count = (votes && votes[v]) ?? 0;\r\n                    //if (!isThis && count > 0) {\r\n                    //    count--;\r\n                    //}\r\n                    return (\r\n                        <button\r\n                            key={v}\r\n                            style={{ padding: size }}\r\n                            type=\"button\" className={\r\n                                classNames(\"btn btn-sm\",\r\n                                    { \"btn-outline\": !isThis },\r\n                                    { \"btn-outline-primary\": isThis },\r\n                                    { \"selected\": isThis })}\r\n                            onClick={() => !preview && fire(v)}>\r\n                            {codeMap[v] ?? \"\"}\r\n                            {count}\r\n                        </button>\r\n                    )\r\n                })}\r\n                {state && <Spinner animation=\"border\" role=\"status\" size=\"sm\" />}\r\n            </div>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport const VerticalVoter: React.FC<{\r\n    table: Array<string>,\r\n}> = ({ table }) => {\r\n    return (\r\n        <div className=\"vote-vertical _d-flex _flex-column _justify-content-around rounded border p-1 overflow-hidden\" style={{ maxHeight: 100 }}>\r\n            {\r\n                /*\r\n                <FontAwesomeIcon icon={faArrowUp} color=\"grey\" />\r\n                <FontAwesomeIcon icon={faArrowDown} color=\"grey\" />\r\n                */\r\n            }\r\n            <div className=\"d-flex flex-column vote-inner\">\r\n                {table.map((v, i) =>\r\n                    <button\r\n                        key={v}\r\n                        className=\"btn btn-outline\"\r\n                        type=\"button\">{codeMap[v] ?? \"\"}</button>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { ObservableRequestState } from \"service/api\";\r\nimport { Spinner, Button } from 'react-bootstrap';\r\nimport { observer } from 'mobx-react';\r\nimport { IconButton } from 'components/button';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const NetworkGateway: React.FC<{ retry: () => any, state: () => ObservableRequestState }> =\r\n    observer(({ retry, state, children }) => {\r\n        return (\r\n            <>\r\n                {(state().isFetching && !state().ignore) || state().error ?\r\n                    <div className=\"d-flex flex-column justify-content-center align-items-center\" style={{\r\n                        minHeight: '50vh'\r\n                    }}>\r\n                        {state().error ? <div>\r\n                            <div>\r\n                                <small>Failed to load something: {JSON.stringify(state().error)}</small>\r\n                            </div>\r\n                            <IconButton icon={faSync} onClick={() => retry()}>Retry</IconButton>\r\n                        </div>\r\n                            : <Spinner animation=\"border\" />}\r\n                    </div> : children\r\n                }\r\n            </>\r\n        )\r\n    })\r\n","import React from 'react';\r\nimport { Image, OverlayTrigger, Tooltip, Popover, Badge } from 'react-bootstrap';\r\nimport { IUserRef } from 'model/compiled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const CircleAvatar: React.FC<{\r\n    onClick?: () => any,\r\n    className?: string,\r\n    src?: string,\r\n    size?: number,\r\n    label?: string\r\n}> = ({ className, onClick, src, size, label }) => {\r\n    if (!src) {\r\n        src = \"https://www.ourspaces.app/img/static/bg-128.png\"; \r\n        //src = \"https://source.unsplash.com/pCcGpVsOHoo/64x64\"\r\n        //src = \"https://source.unsplash.com/random\"\r\n    }\r\n    if (!size) {\r\n        size = 128\r\n    }\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\",\"focus\"]}\r\n            overlay={\r\n                <Tooltip id=\"overlay-example\">\r\n                    @{label}\r\n                </Tooltip>\r\n            }\r\n        >\r\n            <span className=\"circle-avatar\">\r\n                <Image\r\n                    className={className}\r\n                    onClick={onClick}\r\n                    src={src} style={{\r\n                        width: size,\r\n                        height: size,\r\n                        objectFit: \"cover\",\r\n                        borderRadius: size,\r\n                    }} />\r\n                {label && <span>{label.substr(0, 2)}</span>}\r\n            </span>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\n\r\nexport const UserLink: React.FC<{ user: IUserRef }> = ({ user, children }) => {\r\n    const debug = false;\r\n    return (\r\n        <OverlayTrigger\r\n        trigger={[\"hover\",\"focus\"]}\r\n            overlay={\r\n                <Popover id={`popopover-${user.username}`}>\r\n                    <Popover.Content>\r\n                        <h6>\r\n                            @{user.username} (Join x days ago)\r\n                        </h6>\r\n                        <div>\r\n                            Community Karma:\r\n                        </div>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            }\r\n        >\r\n            <Link to={`/@${user.username}`}>\r\n                {debug && <strong>@{user.username}</strong>}\r\n                {children}\r\n            </Link>\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport LazyLoad from 'react-lazyload';\r\n\r\nexport const MediaSource: React.FC<{\r\n    width?: number | string,\r\n    height?: number,\r\n    preview: boolean\r\n    size?: string\r\n    network?: string,\r\n    aspectRatio?: number,\r\n    thumb?: string,\r\n    src?: string,\r\n    onOpen?: () => any,\r\n    onEvent?: (ev: string) => any\r\n}> = ({ onOpen, width, height, aspectRatio, preview, src, thumb, onEvent }) => {\r\n    preview = false;\r\n    const maxHeight = preview ? '350px' : undefined;\r\n\r\n    if (thumb && aspectRatio && !height) {\r\n        height = (320 * aspectRatio);\r\n        if (preview && height > 350) {\r\n            height = 350;\r\n        }\r\n    }\r\n\r\n    const overflowWrapper = (child: any) => {\r\n        if (preview) {\r\n            return (\r\n                <div onClick={onOpen}\r\n                    className=\"rounded\"\r\n                    style={{\r\n                        maxHeight: height,\r\n                        boxShadow: '1px 1px 1px 1px black',\r\n                        overflowY: 'hidden',\r\n                    }}>\r\n                    {child}\r\n                </div>\r\n            )\r\n        }\r\n        return child;\r\n    }\r\n    const isVideo = src && ReactPlayer.canPlay(src);\r\n\r\n\r\n\r\n    if (isVideo) {\r\n        // from inspecting the DOM, youtube placeholders render with a height of 358\r\n        height = 200;\r\n        //height = 358;\r\n    }\r\n\r\n\r\n    if (!thumb && !isVideo) {\r\n        return null;\r\n    }\r\n\r\n    const loader = (child: any) => {\r\n        return (\r\n            <LazyLoad\r\n                debounce\r\n                once\r\n                height={height}\r\n                offset={window.innerHeight * 2}>\r\n                {overflowWrapper(child)}\r\n            </LazyLoad>\r\n        )\r\n    }\r\n\r\n    if (isVideo) {\r\n        return (\r\n            loader(\r\n                <div className=\"rounded-iframe-container mb-2\">\r\n                    <ReactPlayer\r\n                        light\r\n                        controls\r\n                        className=\"border rounded\"\r\n                        //width={width}\r\n                        width='auto'\r\n                        //width='100%'\r\n\r\n                        height={height}\r\n                        onPlay={() => onEvent && onEvent(\"link/playing\")}\r\n                        onPause={() => onEvent && onEvent(\"link/pause\")}\r\n                        url={src} />\r\n                </div>\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    const u = src && new URL(src);\r\n    //u && console.log(u.hostname, u);\r\n    if (u && u.hostname == \"twitter.com\") { }\r\n\r\n    if (u && u.hostname == \"imgur.com\") {\r\n        return loader(\r\n            <>\r\n                <blockquote\r\n                    className=\"imgur-embed-pub\"\r\n                    lang=\"en\"\r\n                    data-id=\"a/Ugbg1ZM\">\r\n                    <a href={src}>No More Free Lunch</a>\r\n                </blockquote>\r\n                <script async src=\"//s.imgur.com/min/embed.js\"></script>\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (u && u.hostname == \"giphy.com\") {\r\n        return loader(\r\n            <div style={{ width: \"100%\", height: 0, paddingBottom: \"178%\", position: 'relative' }}>\r\n                <iframe\r\n                    onClick={() => onOpen && onOpen()}\r\n                    src=\"https://giphy.com/embed/XbVE8H818ckOWuHTEU\"\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    style={{ position: \"absolute\" }}\r\n                    frameBorder=\"0\"\r\n                    className=\"giphy-embed\" allowFullScreen>\r\n                </iframe>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        loader(<img\r\n            onClick={() => onOpen && onOpen()}\r\n            style={{\r\n                objectFit: 'cover',\r\n                width: width,\r\n                height: height,\r\n            }}\r\n           \r\n            className=\"card-img rounded border\"\r\n            src={thumb} />)\r\n    )\r\n}","import React from 'react';\r\nimport { Badge, OverlayTrigger, Tooltip, Popover } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { IUserRef, ICommunityUserRef } from 'model/compiled';\r\nimport { faHammer, faUserShield, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const UserBadge: React.FC<{ variant?: string, icon: any, label?: string }> = ({ variant, icon, label, children }) => {\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={\r\n                <Tooltip id=\"user-badge-label\">\r\n                    {label}\r\n                </Tooltip>\r\n            }\r\n        >\r\n            <Badge variant={variant} className=\"ml-1\">\r\n                <FontAwesomeIcon icon={icon} />\r\n            </Badge>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport const CommunityUserInline: React.FC<{ className?: string, user?: ICommunityUserRef }> = ({ className, user }) => {\r\n    if (!user) {\r\n        return <span>user undefined</span>;\r\n    }\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={\r\n                <Popover id=\"user-badge-label\" className=\"p-2\">\r\n                    <div>@{user.username}</div>\r\n                    <div className=\"card-title\">Community Karma: ???</div>\r\n                    <div>\r\n                        {user.isAdmin && <UserBadge label=\"Admin\" variant=\"danger\" icon={faHammer} />}\r\n                        {user.isMod && <UserBadge label=\"Moderator\" icon={faUserShield} />}\r\n                    </div>\r\n                </Popover>\r\n            }\r\n        >\r\n            <span className={`${className} d-flex flex-row button-row`}>\r\n                <Link to={\"/@\" + user.username} className=\"username font-weight-bold text-secondary\">\r\n                    @{user.username}\r\n                </Link>\r\n                {user.isAdmin && <UserBadge label=\"Admin\" variant=\"danger\" icon={faHammer} />}\r\n                {user.isMod && <UserBadge label=\"Moderator\" icon={faUserShield} />}\r\n            </span>\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useThreadStore, ThreadStoreProvider } from '../../../stores/thread';\r\nimport { useBoardStore, Thread, User } from \"../../../stores/board\";\r\n\r\nimport { Navbar, Nav, Container, Button, Row, Col, Modal, Overlay, Spinner } from 'react-bootstrap';\r\nimport { TextEditor } from 'components/editor/editor';\r\nimport { IComment, IThread, ICommentNode } from 'model/compiled';\r\nimport { InlineVoter, VerticalVoter } from '../vote';\r\nimport moment from 'moment';\r\n\r\nimport ReactMarkdown from 'react-markdown';\r\nimport ReactPlayer from 'react-player';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExpand, faExternalLinkAlt, faSync, faReply, faPen, faEdit, faRandom, faShare, faWindowRestore } from '@fortawesome/free-solid-svg-icons';\r\nimport { NetworkGateway } from 'components/network/gateway';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { MediaSource } from 'components/media';\r\nimport { CommunityUserInline } from 'components/board/user';\r\nimport { PromiseButton, LinkButton, IconButton } from 'components/button';\r\n\r\n\r\nconst CommentPadding: React.FC<{ depth: number }> = ({ depth }) => {\r\n    let e = [];\r\n    for (let index = 0; index < depth; index++) {\r\n        e.push(<span key={index} style={{ width: 10, borderLeft: `1px solid hsl(${index * 20}, 50%, 50%)` }}></span>)\r\n    }\r\n    return <div className=\"d-flex flex-row\">{e}</div>\r\n}\r\n\r\nconst ThreadCommentCard: React.FC<{ data: IComment }> = ({ data }) => {\r\n    const store = useThreadStore();\r\n    const [debug, setDebug] = React.useState(false);\r\n    const [reply, setReply] = React.useState(false);\r\n    const [edit, setEditing] = React.useState(false);\r\n\r\n    const canReply = store.app.loggedIn;\r\n    const canEdit = canReply && (data.user!.username == store.app.active?.username);\r\n    let depth = (data?.depth ?? 0);\r\n    return (\r\n\r\n        <div className=\"flex-grow-1\">\r\n            <div className=\"poster-info d-flex justify-content-between\">\r\n                <CommunityUserInline user={data?.user ?? undefined} />\r\n                <span>{moment.unix(data?.createdAt ?? 0).fromNow()}</span>\r\n            </div>\r\n            {debug && <pre>\r\n                {JSON.stringify(data)}\r\n            </pre>}\r\n            {edit ? <TextEditor\r\n                acceptText=\"Submit\" cancelText=\"cancel\"\r\n                source={data.content ?? \"error, editing with no content\"} onAccept={(t) => store.addComment(t, data?.uId ?? \"\")} /> :\r\n                <ReactMarkdown\r\n                    className=\"wrap-all\"\r\n                    source={data.content ?? \"%undefined%\"} />\r\n            }\r\n            <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                <InlineVoter\r\n                    loggedIn={store.app.loggedIn}\r\n                    table={store.thread?.acceptedCommentVotes ?? []}\r\n                    votes={data?.votes ?? undefined}\r\n                    onClick={(v) =>\r\n                        store.assertInlineLogin()\r\n                            .then(t =>\r\n                                store.voteComment(data?.uId ?? \"undefined\", v))}\r\n                    value={data?.me?.vote ?? \"\"} />\r\n                <div className=\"rounded button-row\">\r\n                    {false || canEdit && !reply && <Button size=\"sm\" variant=\"outline-dark\" onClick={() => setEditing(!edit)}>\r\n                        {!edit ? <FontAwesomeIcon icon={faEdit} /> : \"Cancel Edit\"}\r\n                    </Button>}\r\n                    {canReply && !edit && <Button size=\"sm\" variant=\"outline-dark\" onClick={() => setReply(!reply)}>\r\n                        {!reply ? <FontAwesomeIcon icon={faReply} /> : \"Cancel\"}\r\n                    </Button>}\r\n                </div>\r\n            </div>\r\n            {reply && <div className=\"comment-reply mb-2\">\r\n                <small>Replying... </small>\r\n                <TextEditor\r\n                    acceptText=\"Submit\" cancelText=\"cancel\"\r\n                    onCancel={() => setReply(false)}\r\n                    onAccept={(t) => edit ?\r\n                        store.editComment(t, data?.uId ?? \"\").then(t => setEditing(false)) :\r\n                        store.addComment(t, data?.uId ?? \"\").then(t => setReply(false))} /></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FlatCommentWrapper: React.FC<{ depth: number, uId: string }> = ({ children, depth, uId }) => {\r\n    return (\r\n        <li id={uId} className=\"thread-link-card list-group-item comment-container p-0 px-2 d-flex flex-row\">\r\n            <CommentPadding depth={depth} />\r\n            {children}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport const ThreadCommentView: React.FC = observer(() => {\r\n    const store = useThreadStore();\r\n    if (!store.commentsGraph || !store.commentsGraph.data) {\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: 200 }}>\r\n                <h5>No comments yet...</h5>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {store.flatComments.map(comment =>\r\n                <FlatCommentWrapper uId={comment.uId!} depth={comment.depth!} >\r\n                    <ThreadCommentCard key={comment.uId ?? \"\"} data={comment} />\r\n                </FlatCommentWrapper>\r\n            )}\r\n        </ul>\r\n    )\r\n})\r\n\r\nexport const ExternalFrame: React.FC<{ src: string }> = ({ src }) => {\r\n    const [loaded, setLoaded] = React.useState(false);\r\n    return (\r\n        <iframe className=\"external-link\"\r\n            onLoadStart={(v) => console.log(\"[iframe]\", v)}\r\n            onScroll={(v) => console.log(\"[iframe]\", v)}\r\n            marginWidth={0}\r\n            marginHeight={0}\r\n            frameBorder={0}\r\n            onLoad={() => setLoaded(true)}\r\n            style={{\r\n                minHeight: \"82vh\",\r\n            }} src={src} />\r\n    )\r\n}\r\n\r\nconst ThreadNavbar: React.FC<{}> = ({ }) => {\r\n    const store = useBoardStore();\r\n    const thread = useThreadStore();\r\n    return (\r\n        <Navbar bg=\"white\" variant=\"dark\"\r\n            className=\"shadow-sm justify-content-between border-y no-gutters mb-1 px-4 p-0\"\r\n            style={{\r\n                zIndex: 4,\r\n                position: 'sticky',\r\n                top: 0,\r\n                overflow: 'hidden',\r\n            }}>\r\n            <div className=\"d-flex flex-row align-items-center board-header mr-2\">\r\n                <CircleAvatar size={48} src={store.info?.icon ?? undefined} />\r\n                <div className=\"d-flex flex-column p-2\">\r\n                    <span className=\"font-weight-bold\">+{store.boardId}</span>\r\n                    <span style={{ fontSize: \".78em\", whiteSpace: \"nowrap\" }}>{store.info?.members ?? '?'} Members</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex-grow-1\">\r\n                <h6 style={{\r\n                    overflowY: 'hidden',\r\n                    whiteSpace: 'nowrap',\r\n                    textOverflow: 'ellipsis'\r\n                }}>\r\n                    {thread.thread?.title ?? \"?\"}\r\n                    {thread.thread?.link &&\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href={thread.thread.link}>\r\n                            <small>({(new URL(thread.thread!.link)).hostname})</small>\r\n                        </a>\r\n                    }\r\n                </h6>\r\n                <CommunityUserInline user={thread.thread?.user ?? undefined} />\r\n            </div>\r\n            <PromiseButton\r\n                variant=\"primary\"\r\n                onClick={() => thread.load()}\r\n                icon={faSync}>\r\n            </PromiseButton>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport const ThreadView: React.FC<{ threadId: string }> = observer(({ threadId }) => {\r\n    const store = useThreadStore();\r\n    const [showModal, setModal] = React.useState(false);\r\n    const canShowMedia = store.thread?.link && store.thread.link != null && ReactPlayer.canPlay(store.thread.link);\r\n    return (\r\n        <NetworkGateway retry={() => store.load()} state={() => store}>\r\n            <ThreadNavbar />\r\n            <Container fluid className=\"p-0 pt-2 h-100\">\r\n                <Modal size=\"xl\" className=\"iframe-container\" show={showModal} onHide={() => setModal(false)}>\r\n                    <Modal.Header closeButton>\r\n                        <div>\r\n                            <Modal.Title>\"{store.thread?.title ?? \"\"}\"</Modal.Title>\r\n                            <small>{store.thread?.link ?? \"\"}</small>\r\n                        </div>\r\n                    </Modal.Header>\r\n                    <ExternalFrame\r\n                        src={store.thread?.link ?? \"\"} />\r\n                </Modal>\r\n\r\n                <div className=\"px-2 px-md-4 mb-2\">\r\n                    <div className=\"user-info mb-2 d-none _d-flex flex-row text-muted\">\r\n                        <span className=\"mr-1\">\r\n                            +{store.thread?.boardId}\r\n                        </span>\r\n                        <span className=\"mr-1\">{moment.unix(store.thread?.createdAt ?? 0).fromNow()}</span>\r\n                        <span>by</span>\r\n                        <CommunityUserInline user={store.thread?.user ?? undefined} />\r\n                        {store.thread?.link &&\r\n                            <a\r\n                                target=\"_blank\"\r\n                                href={store.thread.link}>\r\n                                <small>({(new URL(store.thread!.link)).hostname})</small>\r\n                            </a>\r\n                        }\r\n                    </div>\r\n                    <div className=\"mb-2\"\r\n                    //style={{ minHeight: '300px' }}\r\n                    >\r\n                        <h4>{store.thread?.title ?? \"%notset%\"}</h4>\r\n                        {store.thread?.content && <ReactMarkdown source={store.thread!.content!} />}\r\n\r\n                        {store.thread?.link && <div className=\"container _d-flex _justify-content-center mb-2 px-0 _px-sm-2\">\r\n                            <MediaSource\r\n                                //onOpen={() => setModal(true)}\r\n                                width='auto'\r\n                                preview\r\n                                network=\"save\"\r\n                                thumb={store.thread.thumb ?? undefined}\r\n                                src={store.thread.link} />\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"px-2 px-md-4 mb-4 _border-bottom mb-1\">\r\n                    <InlineVoter\r\n                        loggedIn={store.app.loggedIn}\r\n                        preview\r\n                        size=\"sm\"\r\n                        className=\"d-flex flex-row mb-4\"\r\n                        table={store.thread?.acceptedVotes ?? []}\r\n                        votes={store.thread?.votes ?? undefined}\r\n                        onClick={(v) => store.voteThread(v)}\r\n                        //onClick={(v) =>\r\n                        //    store.voteThread(store.thread?.uId ?? \"undefined\", v)\r\n                        //        .then(\r\n                        //            t => store.thread!.me!.vote = t)} \r\n                        value={store.thread?.me?.vote ?? \"unset\"} />\r\n                    <div className=\"d-flex flex-row button-row\">\r\n                        <IconButton variant=\"outline-primary\" size=\"sm\" onClick={() => setModal(true)} icon={faRandom}>\r\n                            Crosspost\r\n                        </IconButton>\r\n                        <IconButton variant=\"outline-primary\" size=\"sm\" onClick={() => setModal(true)} icon={faExpand} >\r\n                            Open Link\r\n                        </IconButton>\r\n                        <IconButton size=\"sm\" onClick={() => setModal(true)} icon={faShare}>\r\n                            Share\r\n                        </IconButton>\r\n                        <IconButton size=\"sm\" onClick={() => setModal(true)} icon={faShare}>\r\n                            Save\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"reply\" className=\"px-2 px-md-4 pb-4 border-bottom\">\r\n                    {store.app.loggedIn ?\r\n                        <small>Comment as @{store.app.active!.username} </small>\r\n                        : <small>You need to login to comment</small>\r\n                    }\r\n\r\n                    {!store.app.loggedIn &&\r\n                        <div className=\"outline rounded p-2 d-flex justify-content-left button-row\">\r\n                            <LinkButton to=\"/login\">Login</LinkButton>\r\n                            <LinkButton to=\"/signup\">Signup</LinkButton>\r\n                        </div>\r\n                    }\r\n\r\n                    {store.app.loggedIn && <TextEditor acceptText=\"Submit\" cancelText=\"cancel\" onAccept={(t) => store.addComment(t)} />}\r\n                </div>\r\n\r\n                <ThreadCommentView />\r\n            </Container>\r\n        </NetworkGateway>\r\n    )\r\n})","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const ScreenScaffold: React.FC<{ title: string }> = ({ children, title }) => {\r\n    return (\r\n        <Container className=\"\">\r\n            <h1 className=\"py-4\">{title}</h1>\r\n            <div className=\"ml-2\">\r\n                {children}\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { TextEditor } from 'components/editor/editor';\r\nimport Editor from 'rich-markdown-editor';\r\nimport { PromiseButton } from 'components/button';\r\nimport { useAppStore } from 'stores/app';\r\n\r\nimport { IThreadCreateRequest } from 'model/compiled';\r\n\r\nconst ThreadCreateForm: React.FC<{\r\n    boardId: string, \r\n    onSubmit: (v: IThreadCreateRequest) => Promise<any>,\r\n    onDraft?: (v: IThreadCreateRequest) => Promise<any>\r\n}> = ({ boardId, onSubmit, onDraft }) => {\r\n    const store = useAppStore();\r\n\r\n    const [validated, setValidated] = React.useState(false);\r\n    const [state, set] = React.useState<{\r\n        title: string,\r\n        link: string,\r\n        comment: string,\r\n        error: any\r\n    }>({\r\n        title: \"\",\r\n        link: \"\",\r\n        comment: \"\",\r\n        error: null,\r\n    })\r\n\r\n    const preSubmit = (): Promise<any> => {\r\n        var o: IThreadCreateRequest = {\r\n            boardId: boardId,\r\n            title: state.title,\r\n            link: state.link,\r\n            content: state.comment,\r\n        };\r\n        return onSubmit(o).catch(err => set({ ...state, error: err }));\r\n    }\r\n\r\n    const preDraft = (): Promise<any> => {\r\n        return Promise.reject();\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formThreadTitle\">\r\n                <Form.Label>Title</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"Title\"\r\n                    onChange={(v) => set({ ...state, title: v.target.value })} />\r\n                <Form.Text className=\"text-muted\"></Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formThreadLink\">\r\n                <Form.Label>Link</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"Link\"\r\n                    onChange={(v) => set({ ...state, link: v.target.value })} />\r\n                <Form.Text className=\"text-muted\">\r\n                    A link to something on the web, it could be a news article, or an image.\r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n\r\n            <Form.Group controlId=\"formThreadLink\">\r\n                <Form.Label>Comment</Form.Label>\r\n                <div className=\"rounded pl-4\">\r\n                    <Editor\r\n                        dark={store.isDarkTheme()}\r\n                        defaultValue=\"\"\r\n                        onChange={(v) => set({ ...state, comment: v() })}\r\n                        template={false}\r\n                    />\r\n                </div>\r\n                <Form.Text className=\"text-muted\">\r\n                    Your comment...\r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <div className=\"d-flex flex-row justify-content-end\">\r\n                <PromiseButton onClick={preSubmit} variant=\"primary\" type=\"submit\">\r\n                    Create\r\n                </PromiseButton>\r\n                <PromiseButton onClick={preDraft} variant=\"primary\" type=\"submit\">\r\n                    Save Draft\r\n                </PromiseButton>\r\n            </div>\r\n\r\n            {state.error && <p>\r\n                {JSON.stringify(state.error)}\r\n            </p>}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ThreadCreateForm;","import React from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { useBoardStore, BoardStore } from 'stores/board';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ThreadCreateForm from 'components/board/thread/create';\r\nimport { IThreadCreateResponse } from 'model/compiled';\r\n\r\nconst ScreenCreate: React.FC = () => {\r\n    const store = useBoardStore();\r\n    const history = useHistory();\r\n    return (\r\n        <ScreenScaffold title=\"Create new discussion\">\r\n            <ThreadCreateForm\r\n                boardId={store.boardId}\r\n                onSubmit={(t) => \r\n                    store.createThread(t).then(\r\n                        (t: IThreadCreateResponse) => \r\n                            history.replace(store.getThreadLink(t.threadId ?? \"error\")))} />\r\n        </ScreenScaffold>\r\n    )\r\n}\r\n\r\nexport default ScreenCreate;","import React from 'react';\r\nimport { Image, Badge, OverlayTrigger, Popover, Tooltip } from 'react-bootstrap';\r\nimport { IBoard } from 'model/compiled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const CommunityAvatar: React.FC<{\r\n    onClick?: () => any,\r\n    wrapperClassName?: string,\r\n    className?: string,\r\n    src?: string,\r\n    size?: number,\r\n    label?: string\r\n}> = ({ wrapperClassName, className, onClick, src, size, label }) => {\r\n    if (!src) {\r\n        \r\n        src = \"https://www.ourspaces.app/img/static/bg-128.png\"; \r\n        //\"https://source.unsplash.com/pCcGpVsOHoo/64x64\"\r\n        //src = \"https://source.unsplash.com/random/64x64\"\r\n    }\r\n    if (!size) {\r\n        size = 128\r\n    }\r\n    const c = wrapperClassName ? wrapperClassName + \" circle-avatar\" : \"circle-avatar\";\r\n    return (\r\n        <span className={c}>\r\n            <Image\r\n                className={className}\r\n                onClick={onClick}\r\n                src={src} style={{\r\n                    width: size,\r\n                    height: size,\r\n                    objectFit: \"cover\",\r\n                    borderRadius: size,\r\n                }} />\r\n            {label && <span>{label.substr(0, 2)}</span>}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CommunityLinkPopover: React.FC<{ icon?: string, boardId: string }> = ({ icon, boardId, children }) => {\r\n    const debug = false;\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={\r\n                <Popover id={`popopover-${boardId}`}>\r\n                    <Popover.Content className=\"d-flex flex-row align-items-center\">\r\n                        <CommunityAvatar size={48} src={`https://www.ourspaces.app/img/communityicon/${boardId}.apng`} />\r\n                        <h6 className=\"ml-2\">\r\n                            +{boardId}\r\n                        </h6>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            }\r\n        >\r\n            <Link to={`/+${boardId}`}>{children}</Link>\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport { Button, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEllipsisH, faEllipsisV } from '@fortawesome/free-solid-svg-icons';\r\n// Helper\r\n//const StringIsNumber = value: string => isNaN(Number(value)) === false;\r\n\r\n// Turn enum into array\r\nexport function EnumToArray(e: any) {\r\n    return Object.keys(e)\r\n        .map(key => e[key]);\r\n}\r\n\r\n\r\nexport interface ButtonDropdownItem {\r\n    label: string,\r\n    icon: any,\r\n    key?: string,\r\n    onClick?: () => any\r\n}\r\n\r\nexport const DropdownEnum: React.FC<{\r\n    icon?: any,\r\n    title: string,\r\n    labels: Array<ButtonDropdownItem>,\r\n    //labels: Array<string>,\r\n    values: Array<number>,\r\n    value: number,\r\n    onSelect: (key: number) => void\r\n}> = ({ title, values, value, labels, onSelect }) => {\r\n    //const history = useHistory();\r\n    return (\r\n        <DropdownButton\r\n            variant=\"outline-muted\"\r\n            //onSelect={(key, event) => onSelect(key)\r\n            id=\"dropdown-basic-button\"\r\n            title={<>\r\n                {labels[value].icon && <FontAwesomeIcon icon={labels[value].icon} className=\"mr-1\" />}\r\n                <span className=\"d-none d-md-inline\">\r\n                    {labels[value].label}\r\n                </span>\r\n            </>\r\n            }>\r\n            <Dropdown.Header>{title}</Dropdown.Header>\r\n            {\r\n                values.map(t => labels[t] &&\r\n                    <Dropdown.Item eventKey={labels[t].key} onClick={() => onSelect(t)}>\r\n                        {labels[t].icon && <FontAwesomeIcon icon={labels[t].icon} className=\"mr-1\" />}\r\n                        <span className=\"d-none d-md-inline\">\r\n                            {labels[t].label ?? t}\r\n                        </span>\r\n                    </Dropdown.Item>\r\n                )\r\n            }\r\n        </DropdownButton >\r\n    )\r\n}\r\n\r\n\r\nexport interface DropDownItem {\r\n    label: string,\r\n    key: string,\r\n}\r\n\r\nexport const Dropdown2: React.FC<{\r\n    items: Array<DropDownItem>,\r\n    onSelected: (key: number) => void,\r\n    value: number\r\n}> = ({ items }) => {\r\n    const set = (t: string | null, e: any): void => {\r\n        //store.filters.sortTime = t!\r\n    }\r\n    return (\r\n        <DropdownButton variant=\"outline-white\" id=\"dropdown-basic-button\" title={\"\"}>\r\n            <Dropdown.Header>Time span</Dropdown.Header>\r\n            {items.map((t) => <Dropdown.Item eventKey={t.key} onSelect={set}>{t.label}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n    )\r\n}\r\n\r\nconst CustomToggle = React.forwardRef<{}, { onClick: (e: any /*React.MouseEvent<HTMLAnchorElement, MouseEvent>*/) => any }>(({ children, onClick }, ref) => (\r\n    <Button\r\n        //\r\n        variant=\"outline\"\r\n        ref={ref as any}\r\n        onClick={(e) => {\r\n            e.preventDefault();\r\n            onClick(e);\r\n        }}\r\n    >\r\n        {children}\r\n        <FontAwesomeIcon icon={faEllipsisV} />\r\n    </Button>\r\n));\r\n\r\nexport const ButtonDropdown: React.FC<{\r\n    //values: Array<any>,\r\n    //onSelect: (key: number) => any,\r\n    items: Array<ButtonDropdownItem>\r\n}> = ({ items }) => {\r\n    return (\r\n        <Dropdown\r\n            title=\"\"\r\n        //variant=\"white\"\r\n        >\r\n            <Dropdown.Toggle className=\"text-center\" variant=\"white\" as={CustomToggle} />\r\n            <Dropdown.Menu>\r\n                {items.map((e) => (\r\n                    <Dropdown.Item eventKey={e.label} onSelect={e.onClick}>\r\n                        <FontAwesomeIcon className=\"ml-2\" icon={e.icon ?? undefined} />\r\n                        {e.label}\r\n                    </Dropdown.Item>\r\n                ))}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\n/*\r\nexport const ThreadFilterTime: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <DropDown\r\n            items={[]}\r\n            value={store.filters?.sortDirection ?? 0}\r\n            onSelected={(k) => store.filters.sortDirection = k} />\r\n    )\r\n})*/","import React from 'react';\r\nimport _ from \"lodash\";\r\n\r\nexport const ScrollEventProvider: React.FC<{\r\n    listener: any,\r\n    target: any,\r\n    onScrollBottom: () => Promise<any>\r\n}> = ({ listener, target, onScrollBottom, children }) => {\r\n    //const [event, setEvent] = React.useState(undefined);\r\n    const [isWaiting, setWaiting] = React.useState(false);\r\n    const [isBottom, setState] = React.useState(false);\r\n    const checkIsBottom = (el: any) => {\r\n        //event.target.scrollHeight - event.target.scrollTop == event.target.clientHeight\r\n        return el.getBoundingClientRect().bottom <= window.innerHeight;\r\n    }\r\n    const onScrollDebounce = React.useCallback(_.debounce((ev) => {\r\n        if (isWaiting == false && isBottom == false && checkIsBottom(target)) {\r\n            setWaiting(true)\r\n            setState(true);\r\n            console.log(\"Bottom of page\");\r\n            onScrollBottom().finally(() => setWaiting(false));\r\n            return;\r\n        }\r\n        if (isBottom == true) {\r\n            setState(false);\r\n            console.log(\"Not at bottom of page\");\r\n        }\r\n    }, 50), []);\r\n    React.useEffect(() => {\r\n        listener.addEventListener('scroll', onScrollDebounce)\r\n        return () => {\r\n            console.log(\"[ScrollEventProvider] unhook\");\r\n            listener.removeEventListener('scroll', onScrollDebounce);\r\n        }\r\n    }, [listener]);\r\n    console.log(\"[ScrollEventProvider] construct\");\r\n    return <>{children}</>;\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { useBoardStore } from 'stores/board';\r\nimport { ThreadStoreProvider } from 'stores/thread';\r\nimport { BoardStoreProvider } from 'stores/board';\r\n\r\nimport { ThreadView } from 'components/board/thread/thread';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nconst BoardSingleThreadOverlayObserver = observer(() => {\r\n    const store = useBoardStore();\r\n\r\n    console.log(\"[BoardSingleThreadOverlayObserver]\")\r\n    //return store.overlayThread != undefined ? \r\n    return (\r\n        <Modal\r\n            //className=\"primary\"\r\n            show={store.overlayThread != undefined}\r\n            onHide={() => store.overlayThread = undefined}\r\n            //backdrop=\"static\"\r\n            size=\"lg\"\r\n            >\r\n            <Modal.Body className=\"p-0\">\r\n                {false && <Switch>\r\n                    <Route path={`/+${store.boardId}/:threadId/`} component={undefined} />\r\n                </Switch>}\r\n                {store.overlayThread && <BoardStoreProvider boardId={store.overlayThread!.boardId!}>\r\n                    <ThreadStoreProvider threadId={store.overlayThread!.uId!}>\r\n                        {store.overlayThread &&\r\n                            <ThreadView threadId={store.overlayThread!.uId!} />}\r\n                    </ThreadStoreProvider>\r\n                </BoardStoreProvider>}\r\n            </Modal.Body>\r\n        </Modal >\r\n    );\r\n});\r\n\r\nexport default BoardSingleThreadOverlayObserver;","import React from 'react';\r\n\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\nimport '@fortawesome/react-fontawesome';\r\nimport { useBoardStore, Thread, User } from \"../../stores/board\";\r\nimport { Form, Container, Tooltip, OverlayTrigger, Navbar, Button, Card, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { trace } from \"mobx\";\r\nimport { InlineVoter, ArrowVoter } from 'components/board/vote';\r\nimport { CommunityLinkPopover } from 'components/board/avatar';\r\nimport { IUserRef, ThreadSelectFilters } from 'model/compiled';\r\nimport { EnumToArray, DropdownEnum, ButtonDropdown, ButtonDropdownItem } from 'components/dropdown';\r\nimport { ScrollEventProvider } from 'components/scroll';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faReply, faBookmark, faCommentAlt, faShare,\r\n    faSave, faLink, faPlus, faCompress, faPenFancy, faRetweet,\r\n    faSync, faExternalLinkAlt, faUsers, faUsersSlash,\r\n    faSortAmountDown, faSortAmountUp, faWindowMaximize, faStream, faPortrait\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport Masonry from 'react-masonry-component';\r\nimport ReactPlayer from 'react-player';\r\nimport { NetworkGateway } from 'components/network/gateway';\r\nimport { PromiseButton, LinkButton, IconButton } from 'components/button';\r\nimport _ from 'lodash';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { CommunityUserInline } from 'components/board/user';\r\nimport { MediaSource } from 'components/media';\r\nimport classNames from 'classnames';\r\nimport BoardSingleThreadOverlayObserver from 'components/board/overlay';\r\n\r\nvar isImage = RegExp(\"(gif|jpe?g|tiff?|png|webp|bmp)$\")\r\n\r\nfunction copyToClipboard(v: string) {\r\n    if (navigator && navigator.clipboard && navigator.clipboard.writeText) {\r\n        navigator.clipboard.writeText(v);\r\n    }\r\n}\r\n\r\nconst CardButtons: React.FC<{\r\n    t: Thread,\r\n    buttonClass: string,\r\n    commentNum: number,\r\n}> = ({ buttonClass, t, commentNum }) => {\r\n    const store = useBoardStore();\r\n\r\n    let items: Array<ButtonDropdownItem> = [\r\n        { label: \"Hide\", icon: \"\" },\r\n        { label: \"Bookmark\", icon: \"\", onClick: () => store.saveThread(t.uId!) },\r\n        //{ label: \"CrossPost\", icon: \"\" },\r\n        //{ label: \"Share\", icon: \"\" },\r\n        { label: \"Copy to clipboard\", icon: \"\", onClick: () => copyToClipboard(t.url!) },\r\n        { label: \"Open in new tab\", icon: \"\", onClick: () => window.open(t.url!, '_blank') },\r\n        { label: 'Block ...', icon: \"\" }\r\n    ];\r\n\r\n    if (store.info?.isModerator) {\r\n        items.push({ key: \"m\", label: \"Moderate [M]\", icon: \"\", onClick: () => store.moderateThread() });\r\n    }\r\n\r\n    const numCrossposts = undefined;\r\n    return (\r\n        <>\r\n            <ButtonDropdown\r\n                items={items}\r\n            />\r\n            <IconButton variant=\"outline\" size=\"sm\" icon={faShare}\r\n                className={buttonClass}>\r\n            </IconButton>\r\n            <IconButton variant=\"outline\" size=\"sm\"\r\n                onClick={() => store.setOverlay(t)}\r\n                className={buttonClass}\r\n                icon={faCommentAlt} >\r\n                {commentNum}\r\n            </IconButton>\r\n            <IconButton\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className={buttonClass} icon={faLink}>\r\n            </IconButton>\r\n            <IconButton\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className={buttonClass} icon={faRetweet}>\r\n                {numCrossposts}\r\n            </IconButton>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ThreadCard: React.FC<{\r\n    type?: number,\r\n    className?: string,\r\n    data: Thread, showContext: boolean\r\n}> = ({\r\n    type,\r\n    className,\r\n    data,\r\n    showContext }) => {\r\n        const store = useBoardStore();\r\n        const history = useHistory();\r\n\r\n        let cls = \" post-container \" + className ?? className;\r\n        let innerClass = \" d-flex flex-column rounded-iframe-container text-dark \";\r\n\r\n\r\n        switch (type) {\r\n            case 0:\r\n                cls = cls + \" p-0 p-sm-1 _p-md-1\";\r\n                innerClass += \" card border-y page-link border-md-x border-md-y shadow-sm\";\r\n                break\r\n            case 1:\r\n                innerClass += \" border-bottom p-1\"\r\n                break\r\n        }\r\n\r\n        if (!data || !data.title || !data.createdAt || !data.user) {\r\n            return null;\r\n        }\r\n\r\n        const src = data.thumb;\r\n        const canShowImage = isImage.test(src ?? \"\");\r\n        const canShowMedia = data.link && ReactPlayer.canPlay(data.link);\r\n\r\n        let url: URL\r\n        try {\r\n            if (data.link)\r\n                // TODO: handle weird urls on the server\r\n                // amend self urls to point to the hostname\r\n                url = new URL(data.link)\r\n        } catch {\r\n            return null;\r\n        }\r\n\r\n        const onClick = (e: any) => { //React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n            if (e.target.id == 'thread-card' || e.target.id == 'thread-card-inner' || e.target.id == 'thread-card-title') {\r\n                history.push(data.url!);\r\n                //store.overlayThread = data;\r\n            }\r\n            //\r\n            //store.overlayThread = undefined;\r\n        }\r\n\r\n        const width = type == 1 ? 100 : undefined;\r\n        const height = type == 1 ? 100 : undefined;\r\n\r\n        return (\r\n            <div className={cls}>\r\n                <div\r\n                    onClick={onClick}\r\n                    id=\"thread-card\"\r\n                    className={innerClass}>\r\n                    <div className={\r\n                        classNames(\"d-flex justify-content-between \",\r\n                            { \"flex-column\": type == 0 },\r\n                            { \"flex-row-reverse\": type == 1 })} >\r\n                        <div className=\"d-flex flex-grow-1 mb-1\">\r\n                            <div className=\"mr-1 mr-md-2\">\r\n                                <ArrowVoter\r\n                                    onVote={(v) => store.voteThread(data!.uId!, v)}\r\n                                    vote={data?.me?.vote ?? undefined}\r\n                                    votes={data?.votes ?? undefined}\r\n                                />\r\n                                {false && <InlineVoter\r\n                                    loggedIn={store.app.loggedIn}\r\n                                    preview\r\n                                    size=\"sm\"\r\n                                    className=\"d-none _d-flex flex-column\"\r\n                                    table={data?.acceptedVotes ?? []}\r\n                                    votes={data?.votes ?? undefined}\r\n                                    onClick={(v) =>\r\n                                        //store.voteThread(data?.uId ?? \"undefined\", v)\r\n                                        //    .then(\r\n                                        //        t => data!.me!.vote = t.typeCode)} \r\n                                        //value={data?.me?.vote ?? \"unset\"} \r\n                                        store.voteThread(data?.uId ?? \"undefined\", v)}\r\n                                    value={data?.me?.vote ?? \"unset\"}\r\n                                />}\r\n                                {false && <div className=\"_d-flex flex-row flex-md-column justify-content-center align-items-center d-none\">\r\n                                    <CardButtons\r\n                                        t={data}\r\n                                        commentNum={data.numComments ?? 0}\r\n                                        buttonClass=\"d-none d-md-none\" />\r\n                                </div>}\r\n                            </div>\r\n                            <div id=\"thread-card-inner\" className=\"card-block text-left w-100\">\r\n                                <div className=\"text-left post-header d-flex flex-row flex-wrap justify-content-left\">\r\n                                    <CommunityLinkPopover boardId={data.boardId!}>\r\n                                        <span className=\"mr-2\">+{data.boardId}</span>\r\n                                    </CommunityLinkPopover>\r\n                                    <span className=\"mr-1\">{moment.unix(data.createdAt).fromNow()} by </span>\r\n                                    <CommunityUserInline className=\"mr-1\" user={data.user} />\r\n                                    {data.link && <a\r\n                                        onClick={() => store.event(\"link/open\")}\r\n                                        target=\"_blank\"\r\n                                        href={data.link}>\r\n                                        {url!.host}\r\n                                        <FontAwesomeIcon className=\"ml-1\" size=\"xs\" icon={faExternalLinkAlt} />\r\n                                    </a>}\r\n                                </div>\r\n                                <Card.Title\r\n                                    id=\"thread-card-title\"\r\n                                    className=\"post-title mb-0 mb-md-2\">\r\n                                    {data.title}\r\n                                </Card.Title>\r\n                            </div>\r\n                        </div>\r\n                        <MediaSource\r\n                            width={width}\r\n                            height={height}\r\n                            preview\r\n                            network=\"save\"\r\n                            aspectRatio={data.thumbAspectRatio ?? undefined}\r\n                            thumb={data.thumb ?? undefined}\r\n                            src={data.link ?? undefined} />\r\n                    </div>\r\n                    <div className=\"d-flex flex-row justify-content-left\">\r\n                        <CardButtons\r\n                            t={data}\r\n                            commentNum={data.numComments ?? 0}\r\n                            buttonClass=\"d-block\" />\r\n                    </div>\r\n                    {false && <InlineVoter\r\n                        loggedIn={store.app.loggedIn}\r\n                        //preview\r\n                        size=\"sm\"\r\n                        className=\"d-none _d-flex flex-row\"\r\n                        table={data?.acceptedVotes ?? []}\r\n                        votes={data?.votes ?? undefined}\r\n                        onClick={(v) =>\r\n                            store.voteThread(data?.uId ?? \"undefined\", v)}\r\n                        value={data?.me?.vote ?? \"unset\"}\r\n                    />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nconst ThreadCardWrapper: React.FC = ({ children }) => {\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {children}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport const ThreadsView: React.FC<{\r\n    layout: number,\r\n    data: Array<Thread>\r\n}> = observer(({ layout, data }) => {\r\n    const store = useBoardStore();\r\n\r\n    const getCardClass = () => {\r\n        if (store.isConstrained()) {\r\n            //return \"col-12 col-md-6 col-lg-4\";\r\n            return \"col-12 col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-4\";\r\n            //return \"col-xl-4 col-lg-6 col-md-6 col-sm-12 col-xs-12\";\r\n        }\r\n        return \"col-xl-3 col-lg-6 col-md-6 col-sm-12 col-xs-12\";\r\n    }\r\n\r\n    const getLayout = () => {\r\n        if (layout == 0) {\r\n            return (\r\n                <Masonry\r\n                    elementType=\"div\"\r\n                    className={\r\n                        \"p-0 \"\r\n                        //    + store.isConstrained() && \"container\"\r\n                    }\r\n                >\r\n                    {data.map((t) => t.uId &&\r\n                        <ThreadCard\r\n                            type={layout}\r\n                            className={getCardClass()}\r\n                            showContext={false} key={t.uId} data={t} />)}\r\n                </Masonry>\r\n            )\r\n        }\r\n\r\n        return data.map(\r\n            (t) => t.uId && <ThreadCard\r\n                type={layout}\r\n                showContext={false}\r\n                key={t.uId}\r\n                data={t} />)\r\n\r\n    }\r\n\r\n    return (\r\n        <ScrollEventProvider\r\n            listener={document}\r\n            target={document.getElementById(\"screen-row\")}\r\n            onScrollBottom={() => store.requestMore()}\r\n        >\r\n            {store.error && <div className=\"d-flex flex-column justify-content-center p-4 rounded border m-5\">\r\n                <h2>Uh Oh</h2>\r\n                <h5>Something went wrong while loading the board +{store.boardId}</h5>\r\n                <p>{store.error.message}\" ({store.error.response.statusText})</p>\r\n                <Button onClick={() => store.request()} >Try again</Button>\r\n            </div>}\r\n            {getLayout()}\r\n        </ScrollEventProvider>\r\n    )\r\n})\r\n\r\nexport const BoardModPreview: React.FC<{ users: Array<IUserRef> }> = ({ users }) => {\r\n    return (\r\n        <div>\r\n            <h6>Moderators</h6>\r\n            <div>\r\n                {users.map(u => <small>@{u.username}</small>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst BoardTextSearch: React.FC<{ value?: string, boardId?: string }> = observer(({ value, boardId }) => {\r\n    const store = useBoardStore();\r\n    const [state, setState] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n        setState(\"\");\r\n    }, [boardId])\r\n    const onChange = _.debounce((v: any) => {\r\n        store.filters.query = v.target.value;\r\n        store.request();\r\n    }, 100);\r\n\r\n    return (\r\n        <Form.Control\r\n            className=\"mr-2\"\r\n            type=\"text\"\r\n            value={state}\r\n            onSubmit={() => {\r\n                onChange(state);\r\n            }}\r\n            //https://stackoverflow.com/questions/46986259/react-lodash-debounce-always-return-null\r\n            placeholder=\"Search\"\r\n            onChange={(e) => {\r\n                e.persist();\r\n                setState(e.target.value);\r\n                onChange(e);\r\n            }} />\r\n    )\r\n})\r\n\r\nconst BoardNavbar: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    const history = useHistory();\r\n    //const params: { boardId: string } = useParams();\r\n    return (\r\n        <Navbar bg=\"white\" variant=\"dark\"\r\n            className=\"shadow-sm justify-content-between border-bottom rounded-bottom no-gutters mb-1 px-1 px-md-4 p-0\" style={{\r\n                zIndex: 4,\r\n                position: 'sticky',\r\n                top: 0,\r\n            }}>\r\n            <div className=\"d-flex flex-row align-items-center board-header mr-2\">\r\n                <CircleAvatar className=\"d-block d-md-block\" src={store.info?.icon ?? undefined} size={48} />\r\n                <div className=\"d-flex flex-column p-2\">\r\n                    <span className=\"font-weight-bold\">+{store.boardId}</span>\r\n                    <span style={{ fontSize: \".78em\", whiteSpace: \"nowrap\" }}>{store.info?.members ?? \"?\"} Members</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-none d-md-flex flex-row\">\r\n                <DropdownEnum\r\n                    title=\"Layout\"\r\n                    labels={[\r\n                        { label: \"Cards\", icon: faWindowMaximize },\r\n                        { label: \"Compact\", icon: faStream },\r\n                        { label: \"Gallery\", icon: faPortrait }\r\n                    ]}\r\n                    values={[0, 1, 2]}\r\n                    value={store.UIdatalayout}\r\n                    onSelect={(t: number) => store.UIdatalayout = t} />\r\n                <DropdownEnum\r\n                    title=\"Ranking\"\r\n                    labels={[{ label: \"Hot\", icon: faSave }, { label: \"Top\", icon: faSave }, { label: \"Controversial\", icon: faSave }]}\r\n                    values={EnumToArray(ThreadSelectFilters.Method)}\r\n                    value={store.filters.rankMethod!}\r\n                    onSelect={(t: number) => {\r\n                        store.filters.rankMethod = t;\r\n                        history.push({\r\n                            search: store.getQueryParams(),\r\n                        });\r\n                    }} />\r\n                {false && <DropdownEnum\r\n                    title=\"Direction\"\r\n                    labels={[\r\n                        { label: \"Decending\", icon: faSortAmountDown },\r\n                        { label: \"Ascending\", icon: faSortAmountUp }\r\n                    ]}\r\n                    values={EnumToArray(ThreadSelectFilters.Method)}\r\n                    value={store.filters.sortDirection!}\r\n                    onSelect={(t: number) => {\r\n                        store.filters.sortDirection = t;\r\n                        history.push({\r\n                            search: store.getQueryParams(),\r\n                        });\r\n                    }} />}\r\n            </div>\r\n            <BoardTextSearch boardId={store.boardId} />\r\n            {store.info &&\r\n                <PromiseButton\r\n                    className=\"d-flex d-lg-none\"\r\n                    icon={store.info.isMember ? faUsersSlash : faUsers}\r\n                    variant={(store.info.isMember ? \"primary\" : \"danger\")}\r\n                    onClick={() => store.info!.isMember ? store.unsubscribe() : store.subscribe()}>\r\n                    <span>{store.info!.isMember ? \"Leave\" : \"Join\"}</span>\r\n                </PromiseButton>\r\n            }\r\n        </Navbar>\r\n    )\r\n})\r\n\r\nexport const BoardView: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <>\r\n            <BoardNavbar />\r\n            <BoardSingleThreadOverlayObserver />\r\n            <NetworkGateway retry={() => store.request()} state={() => store}>\r\n                {store.debug && <div>\r\n                    <p>Id: {store.boardId}</p>\r\n                    <p>Length: {store.data.length}</p>\r\n                    <p>fetching: {store.isFetching} {store.requests} </p>\r\n                </div>}\r\n                <ThreadsView\r\n                    layout={store.UIdatalayout}\r\n                    data={store.data} />\r\n            </NetworkGateway>\r\n        </>\r\n    )\r\n})\r\n\r\nexport const ThreadFilterSort: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <DropdownButton variant=\"outline-dark\" id=\"dropdown-basic-button\" title=\"Sort\">\r\n            <Dropdown.Header>Sort filter</Dropdown.Header>\r\n            <Dropdown.Item href=\"?action-1=true\">Top</Dropdown.Item>\r\n            <Dropdown.Item href=\"?action-2=true\">Another action</Dropdown.Item>\r\n            <Dropdown.Item href=\"?action-3=true\">Something else</Dropdown.Item>\r\n        </DropdownButton>\r\n    )\r\n})","import React from 'react';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { useBoardStore } from 'stores/board';\r\n\r\nimport { Form, Button, Spinner } from 'react-bootstrap';\r\n\r\n\r\nconst FileInput: React.FC<{\r\n    onPreview?: () => Promise<any>,\r\n    onSubmit: (event: File) => Promise<any>\r\n}> = ({ onSubmit, children }) => {\r\n    const [value, setValue] = React.useState<File>();\r\n    const [waiting, setWaiting] = React.useState<boolean>(false);\r\n\r\n    const preSubmit = (e: any): Promise<any> => {\r\n        e.preventDefault();\r\n        setWaiting(true);\r\n        if (value)\r\n            return onSubmit(value).finally(() => setWaiting(false))\r\n        return Promise.reject();\r\n    }\r\n    return (\r\n        <Form onSubmit={preSubmit}>\r\n            <div className=\"d-flex flex-row justify-content-between\">\r\n                <Form.File\r\n                    id=\"image\"\r\n                    className=\"mr-2\"\r\n                    label={value ? value.name : \"\"}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => e.target\r\n                        && e.target.files\r\n                        && setValue(e.target?.files[0])}\r\n                    required\r\n                    isInvalid={false}\r\n                    feedback=\"none\"\r\n                    feedbackTooltip\r\n                    custom\r\n                />\r\n                <Button type=\"submit\">Upload {waiting && <Spinner animation=\"border\" />}</Button>\r\n            </div>\r\n            <small>Images larger than 128x128 will be resized</small>\r\n            {value && <p>{value.name}</p>}\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\nconst RestrictionSelector: React.FC = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ScreenEdit: React.FC = () => {\r\n\r\n    const store = useBoardStore();\r\n\r\n    return (\r\n        <ScreenScaffold title=\"Settings\">\r\n            <h3>Set community icon</h3>\r\n            <FileInput onSubmit={(e) => store.uploadIcon(e)} />\r\n            <FileInput onSubmit={(e) => store.uploadBanner(e)} />\r\n        </ScreenScaffold>\r\n    )\r\n}\r\n\r\nexport default ScreenEdit;","import React from 'react';\r\n\r\nexport const SystemMessages: React.FC = () => {\r\n    return null;\r\n    \r\n    return (\r\n        <div>\r\n            <small>\r\n                If you create a community named with the porn prefix or suffix, and it's not actually about porn\r\n                eg: (earthporn, houseporn, computerporn)\r\n                You <i>will</i> end up getting your board renamed - admins.\r\n                Think of a better name!\r\n            </small>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\n\r\nexport const AppSettingsForm: React.FC = observer(() => {\r\n    const app = useAppStore();\r\n    return (\r\n        <div>\r\n\r\n            <Form.Check\r\n                //onChange={() => }\r\n                onChange={(v: any) => app.UIconstrainContainer = !app.UIconstrainContainer} // v.currentTarget.value}\r\n                checked={!app.UIconstrainContainer}\r\n                type=\"switch\"\r\n                id=\"app-fullwidth\"\r\n                label=\"Full width\"\r\n            />\r\n\r\n            <small>Dev settings</small>\r\n\r\n            <Form.Check\r\n                onChange={(v: any) => app.UIshowEventDebug = !app.UIshowEventDebug} // v.currentTarget.value}\r\n                checked={app.UIshowEventDebug}\r\n                type=\"switch\"\r\n                id=\"app-event-debug\"\r\n                label=\"Show event debug\"\r\n            />\r\n\r\n            <Form.Check\r\n                onChange={(v: any) => app.UIanimatedHeader = !app.UIanimatedHeader} // v.currentTarget.value}\r\n                checked={app.UIanimatedHeader}\r\n                type=\"switch\"\r\n                id=\"app-animated-header\"\r\n                label=\"Animated header\"\r\n            />\r\n\r\n            <Form.Check\r\n                onChange={(v: any) => app.UIdarkTheme = !app.UIdarkTheme} // v.currentTarget.value}\r\n                checked={app.UIdarkTheme}\r\n                type=\"switch\"\r\n                id=\"app-theme\"\r\n                label=\"Dark Mode\"\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const SidebarSettings: React.FC = () => {\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            <div className=\"card-body\">\r\n                <AppSettingsForm />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nexport const ModalSheetWrapper: React.FC<{\r\n    // callbacks for children to modify this state\r\n    // could cause infinite loops?\r\n    children: [\r\n        (show: () => void) => React.ReactElement,\r\n        () => React.ReactElement\r\n    ],\r\n    onConfirm: () => Promise<any>,\r\n    title: string,\r\n    acceptText?: string,\r\n}> = ({ children, onConfirm, title, acceptText }) => {\r\n    const [show, setShow] = React.useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {children[1]()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                </Button>\r\n                    <Button variant=\"primary\" onClick={() => onConfirm().then(t => handleClose())}>{acceptText ?? \"Accept\"}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            {children[0](handleShow)}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { useAppStore } from 'stores/app';\r\nimport { CircleAvatar } from './avatar';\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { ModalSheetWrapper } from \"components/modal\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { IconBadge } from 'components/badge';\r\nimport { IconButton } from 'components/button';\r\n\r\nexport const NavUserCard: React.FC = () => {\r\n    const app = useAppStore();\r\n    return <span className=\"pr-4\"><strong>@{app.active?.username}</strong></span>\r\n}\r\n\r\nexport const InlineNavCard: React.FC = ({ }) => {\r\n    const store = useAppStore();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            {store.loggedIn && <ModalSheetWrapper\r\n                title=\"Confirm sign out\"\r\n                onConfirm={() => store.logout()}\r\n                acceptText=\"Logout\">\r\n                {[(show) => (\r\n                    <div className=\"d-inline-block d-flex flex-row flex-grow-1 flex-md-grow-0 p-1 rounded align-items-center\">\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"white\" id=\"dropdown-basic\"></Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={() => history.push(\"/account\")}>Account</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => history.push(\"/account/inbox\")}>Inbox</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => history.push(\"/create\")}>Create Community</Dropdown.Item>\r\n                                <Dropdown.Divider />\r\n                                <Dropdown.Item variant=\"primary\" onClick={() => show()}>Logout</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <CircleAvatar size={36} label={store.active?.username ?? \"\"} />\r\n                        <span className=\"ml-2\">\r\n                            <strong>@</strong>{store.active!.username ?? \"unknown_username?\"}\r\n                        </span>\r\n                    </div>\r\n                ), () => (\r\n                    <p>Logout</p>\r\n                )]}\r\n            </ModalSheetWrapper>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const UserNotifications = () => {\r\n    const store = useAppStore();\r\n    if (!store.loggedIn) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <IconButton icon={faEnvelope}>\r\n                    Messages\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ActivityRecentThreads: React.FC<{}> =\r\n    observer(() => {\r\n        const app = useAppStore();\r\n        if (app.recent.length < 1) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title mb-0\">Recently viewed</h5>\r\n                </div>\r\n                <ul className=\"list-group list-group-flush mb-2\">\r\n                    {app.recent.reverse().map((t, i) => (i < 3) &&\r\n                        <li className=\"list-group-item\">\r\n                            <Link to={`/+${t.boardId}`}>\r\n                                <div>\r\n                                    <small>+{t.boardId}</small>\r\n                                </div>\r\n                                <h6>{t.title}</h6>\r\n                            </Link>\r\n                        </li>)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    })","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { SystemMessages } from 'components/app/messages';\r\nimport { SidebarSettings } from 'components/uisettings';\r\nimport { useAppStore } from 'stores/app';\r\nimport { IBoard } from 'model/compiled';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\nimport { faChartLine } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { UserNotifications } from 'components/user/card';\r\nimport { LinkButton } from 'components/button';\r\nimport { Link } from 'react-router-dom';\r\nimport { ActivityRecentThreads } from 'components/user/recent';\r\nimport { Brand } from 'components/brand';\r\n\r\nexport const SidebarCard: React.FC = ({ children }) => {\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TrendingCommunitiesList: React.FC<{}> = observer(({ }) => {\r\n    //data: Array<IBoard>\r\n\r\n    const app = useAppStore();\r\n\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title d-flex align-items-center\">\r\n                    <FontAwesomeIcon icon={faChartLine} className=\"mr-2\" />\r\n                    Trending\r\n                </h5>\r\n                <p className=\"mb-0\">Popular communities</p>\r\n            </div>\r\n            <ul className=\"list-group list-group-flush\">\r\n                {app.trending.map(e => <li className=\"list-group-item\">\r\n                    <Link to={`/+${e.uId}`}>\r\n                        <CommunityAvatar size={32} src={e.icon!} className=\"mr-2\" />\r\n                        <span>+{e.uId}</span>\r\n                    </Link>\r\n                </li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst SiteCard: React.FC<{}> =\r\n    observer(() => {\r\n        const app = useAppStore();\r\n        if (app.loggedIn) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"card mb-2\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">New to the 'verse?</h5>\r\n                    <p className=\"card-subtitle small mb-2\">Signup now to get in on the action</p>\r\n                    <div className=\"btn-group d-flex justify-content-between\">\r\n                        <LinkButton to=\"/login\">Login</LinkButton>\r\n                        <LinkButton to=\"/signup\">Signup</LinkButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\nexport const Portal: React.FC<{ target: string }> = ({ children, target }) => {\r\n    const v = document.getElementById(target);\r\n    if (!v) {\r\n        return <div></div>\r\n    }\r\n    return ReactDOM.createPortal(children, v);\r\n}\r\n\r\nexport const SidebarDefault: React.FC = () => {\r\n    const app = useAppStore();\r\n\r\n    return (\r\n        <div className=\"mt-2\">\r\n            <div id=\"screen-right\" ></div>\r\n            <SystemMessages />\r\n            <SiteCard />\r\n            <SidebarSettings />\r\n            <TrendingCommunitiesList />\r\n            <UserNotifications />\r\n            <ActivityRecentThreads />\r\n            <footer>\r\n                <Link to=\"/about\">\r\n                    <small className=\"p-2 text-muted\">© OurSpaces {new Date().getFullYear()}</small>\r\n                </Link>\r\n                <Link to=\"/terms\">\r\n                    <small className=\"p-2 text-muted\">Terms of Service</small>\r\n                </Link>\r\n                <Link to=\"/contact\">\r\n                    <small className=\"p-2 text-muted\">Contact</small>\r\n                </Link>\r\n                <Link to=\"/contact/report\">\r\n                    <small className=\"p-2 text-muted\">Report Abuse</small>\r\n                </Link>\r\n            </footer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport { ParallaxBanner } from 'react-scroll-parallax';\r\n\r\nexport const ImageHeader: React.FC<{ animated?: boolean, src: string }> = ({ animated, src, children }) => {\r\n    if (animated)\r\n        // \"https://source.unsplash.com/pCcGpVsOHoo/1090x400\"\r\n        return (\r\n            <ImageHeaderParallax src={src} >\r\n                {children}\r\n            </ImageHeaderParallax>\r\n        )\r\n    return (\r\n        <Jumbotron\r\n            className=\"mb-0 p-4\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: src,\r\n                //backgroundImage: `url(\"https://dev.ourspace.dev/res/bg-2.png\")` \r\n            }}>\r\n            {children}\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport const ImageHeaderParallax: React.FC<{ src: string }> = ({ src, children }) => {\r\n    return (\r\n        <ParallaxBanner\r\n            className=\"jumbotron text-white mb-0 px-1 py-4 py-md-5 px-md-4 _text-stroke-children\"\r\n            style={{\r\n                backgroundColor: 'black',\r\n                height: \"auto\",\r\n                borderRadius: 0,\r\n                borderBottomRightRadius: '0.25rem',\r\n                borderBottomLeftRadius: '0.25rem',\r\n            }}\r\n            layers={[\r\n                {\r\n                    //image: \"https://source.unsplash.com/random\",\r\n                    image: src,\r\n                    amount: .8,\r\n                    props: {\r\n                        style: {\r\n                            opacity: .5,\r\n                            zIndex: 0,\r\n                        }\r\n                    }\r\n                }]}\r\n        >\r\n            {/* fix child being hidden by parallax layers*/}\r\n            <div style={{ position: 'relative' }}>\r\n                {children}\r\n            </div>\r\n        </ParallaxBanner >\r\n    )\r\n}","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router, Route,\r\n    Switch,\r\n    RouteComponentProps,\r\n    useParams,\r\n    useHistory,\r\n} from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\nimport { observer, useAsObservableSource } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Col,\r\n    Row,\r\n    Form,\r\n    Container,\r\n    Navbar,\r\n    Card,\r\n    Jumbotron,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Modal\r\n} from 'react-bootstrap';\r\n\r\nimport { NetworkedButton, LinkButton, IconButton } from 'components/button'\r\nimport { BoardStoreProvider, useBoardStore } from \"../../stores/board\";\r\nimport { ThreadStoreProvider } from '../../stores/thread';\r\nimport { ThreadView } from \"../../components/board/thread/thread\";\r\nimport ScreenCreate from 'screens/board/thread/create';\r\nimport { BoardView, BoardModPreview } from \"../../components/board/board\";\r\nimport ScreenEdit from 'screens/board/edit';\r\nimport { Portal } from 'components/app/sidebar';\r\nimport { EnumToArray, DropdownEnum } from 'components/dropdown';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { useWindowSize } from 'components/layout';\r\n\r\nimport { faSearch, faUserPlus, faUserCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IUserRef, ThreadSelectFilters } from 'model/compiled';\r\nimport { ParallaxProvider, Parallax } from 'react-scroll-parallax';\r\nimport { ImageHeader } from 'components/header';\r\nimport { ModerateForm } from 'components/board/moderator/actions';\r\n\r\nimport BoardSingleThreadOverlayObserver from 'components/board/overlay';\r\n\r\nconst ScreenBoard: React.FC = () => {\r\n    return (\r\n        <BoardView />\r\n    )\r\n}\r\n\r\nexport const RouterThread: React.FC<{}> = ({ }) => {\r\n    const { threadId } = useParams();\r\n    return (\r\n        <ThreadStoreProvider threadId={threadId}>\r\n            <ThreadView threadId={threadId} />\r\n        </ThreadStoreProvider>\r\n    )\r\n}\r\n\r\nconst TwoPaneScaffold: React.FC<{ renderPane: () => any, onHandle?: () => any }> = ({ onHandle, renderPane, children }) => {\r\n    const [width, height] = useWindowSize();\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <p>{width}{height}</p>\r\n                {children}\r\n            </Col>\r\n            {width > 800 && <Col>\r\n                {renderPane()}\r\n            </Col>}\r\n        </Row>\r\n    )\r\n}\r\n\r\nconst BoardThreadOverlay: React.FC<{}> = observer(({ }) => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <Modal show={false}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\"\"</Modal.Title>\r\n                <Modal.Body>\r\n                    <Switch>\r\n                        <Route path={`/+${store.boardId}/:threadId/`} component={RouterThread} />\r\n                    </Switch>\r\n                </Modal.Body>\r\n            </Modal.Header>\r\n        </Modal>\r\n    )\r\n})\r\n\r\nconst BoardScaffold: React.FC<{ boardId: string }> = observer(({ boardId }) => {\r\n    const store = useBoardStore();\r\n    const history = useHistory();\r\n    //const source = useAsObservableSource();\r\n    React.useEffect(() => {\r\n        console.log(\"scaffold arguments changed\");\r\n    }, [store]);\r\n\r\n    return (\r\n        <Container\r\n            fluid\r\n            className=\"m-0 p-0\"\r\n            style={{\r\n                backgroundImage: store.backgroundImage,\r\n                backgroundSize: store.backgroundSize,\r\n                backgroundRepeat: store.backgroundRepeat,\r\n                backgroundAttachment: 'fixed',\r\n            }}\r\n        >\r\n            <Container\r\n                className=\"border-none _border-y p-0 rounded\"\r\n                fluid={store.UIcontainerFluid}\r\n                style={{\r\n                    minHeight: 'calc(100vh - 20px);'\r\n                }}\r\n            >\r\n                <ImageHeader animated src={store.info?.banner ?? \"\"}>\r\n                    <div className=\"d-flex flex-row align-items-center\">\r\n                        <CircleAvatar size={84} src={store.info?.icon ?? undefined} className=\"border\" />\r\n                        <div className=\"ml-4\">\r\n                            <h2 className=\"_display-5\">{store.info?.title ?? boardId}</h2>\r\n                            <h4 className=\"lead\">{store.info?.description ?? \"\"}</h4>\r\n                            <h6>+{boardId}</h6>\r\n                        </div>\r\n                    </div>\r\n                </ImageHeader>\r\n                <Switch>\r\n                    <Route exact path={`/+${boardId}/create`} component={ScreenCreate} />\r\n                    <Route exact path={`/+${boardId}/settings`} component={ScreenEdit} />\r\n                    <Route path={`/+${boardId}/:threadId/(/@:commentId)`} component={RouterThread} />\r\n                    <Route path={`/+${boardId}/:threadId/`} component={RouterThread} />\r\n                    <Route exact path={`/+${boardId}`} component={BoardView} />\r\n                </Switch>\r\n            </Container>\r\n\r\n            <Portal target=\"screen-right\">\r\n                <Card className=\"mb-2\">\r\n                    <Card.Header>\r\n                        About this Space\r\n                        <small className=\"d-block\">Created {moment.unix(store.info?.createdAt ?? 0).fromNow()}</small>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>{store.info?.title}</Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{store.info?.description}</Card.Subtitle>\r\n                    </Card.Body>\r\n                    <ListGroup className=\"list-group-flush\">\r\n                        <ListGroupItem>{store.info?.members ?? '?'} Members</ListGroupItem>\r\n                        <ListGroupItem>{store.info?.posts ?? '?'} Posts</ListGroupItem>\r\n                    </ListGroup>\r\n                    <Card.Body className=\"d-none _d-md-block d-flex flex-column\">\r\n                        <ButtonGroup>\r\n                            <LinkButton variant=\"outline-primary\" to={`/+${store.boardId}/create`}>Post</LinkButton>\r\n                            {!store.info?.isMember &&\r\n                                <IconButton icon={faUserPlus} onClick={() => store.subscribe()}>Join Community</IconButton>}\r\n                            {store.info?.isMember &&\r\n                                <IconButton variant=\"outline-warning\" icon={faUserCheck} onClick={() => store.unsubscribe()}>Leave Community</IconButton>}\r\n                        </ButtonGroup>\r\n                    </Card.Body>\r\n                </Card>\r\n                {false && <Card className=\"mb-2\">\r\n                    <Card.Header>\r\n                        Moderators\r\n                    </Card.Header>\r\n                    <ListGroup className=\"list-group-flush\">\r\n                        {store.info?.preview?.map((e) => <ListGroupItem>@{e.username}</ListGroupItem>)}\r\n                    </ListGroup>\r\n                </Card>}\r\n\r\n                <Card className=\"mb-2\">\r\n                    <Card.Header>\r\n                        Community Rules\r\n                    </Card.Header>\r\n                </Card>\r\n            </Portal>\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport const RouterBoard: React.FC<RouteComponentProps<{}>> = ({ match }) => {\r\n    console.log(\"[router/board] constructing, \", useParams())\r\n    const { boardId } = useParams();\r\n    return (\r\n        <BoardStoreProvider boardId={boardId}>\r\n            {console.log(\"[router/board] render\")}\r\n            <BoardScaffold boardId={boardId} />\r\n        </BoardStoreProvider>\r\n    )\r\n}","import React from 'react';\r\nimport { Router, Route, Switch, RouteComponentProps } from \"react-router\";\r\nimport { BoardView } from \"components/board/board\";\r\nimport { BoardStoreProvider } from \"../../stores/board\"\r\n\r\nexport const ScreenFrontpage: React.FC<RouteComponentProps<{}>> = () => {\r\n    console.log(\"[frontpage] constructing\")\r\n    return (\r\n        <BoardStoreProvider boardId=\"all\">\r\n            <BoardView />\r\n        </BoardStoreProvider>\r\n    )\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from '../../stores/app';\r\nimport { Link, useLocation, useHistory, useParams } from 'react-router-dom';\r\nimport { LinkButton } from 'components/button';\r\n\r\nimport { OverlayTrigger, Tooltip, Form, Button, Badge, Modal } from 'react-bootstrap';\r\nimport { CircleAvatar } from \"components/user/avatar\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faSearch, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { IBoardSubscription } from 'model/compiled';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\n\r\n/*\r\nconst CircleAvatar: React.FC<{ url: string }> = ({ url }) => {\r\n    return (\r\n        <a className=\"circle-avatar\" href=\"\" style={{ width: 32, height: 32 }} />\r\n    )\r\n}*/\r\n\r\nconst SubscriptionIcon: React.FC<{ data: IBoardSubscription, active: boolean }> = ({ active, data }) => {\r\n    const o = active ? \"border-primary community-icon-active\" : \"community-icon\";\r\n    return (\r\n        <div className=\"item\">\r\n            <OverlayTrigger\r\n                trigger={['focus', 'hover']}\r\n                overlay={\r\n                    <Tooltip id=\"tooltip-disabled\">+{data.boardId}\r\n                        <Badge variant=\"primary\">\r\n                            {data.members}\r\n                        </Badge>\r\n                    </Tooltip>\r\n                }>\r\n                <Link to={`/+${data.boardId}`}>\r\n                    <CommunityAvatar\r\n                        className={o}\r\n                        src={data.icon ?? undefined}\r\n                        label={data.boardId ?? undefined}\r\n                        size={48} />\r\n                </Link>\r\n            </OverlayTrigger>\r\n        </div >\r\n    )\r\n}\r\n\r\ninterface Params {\r\n    pathId: string\r\n}\r\n\r\nconst SubscriptionList: React.FC<{ data: Array<any> }> = observer(({ data }) => {\r\n    const params: Params = useParams();\r\n    console.log(\"router params => \", params)\r\n    return (\r\n        <div className=\"subscription-items\">\r\n            {data.map(t =>\r\n                <SubscriptionIcon\r\n                    active={params.pathId == t.boardId}\r\n                    key={t.boardId}\r\n                    data={t} />)}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const SubscriptionListWithSearch: React.FC = observer(() => {\r\n    const store = useAppStore();\r\n    const [state, setFilter] = React.useState(\"\");\r\n    const [showOverlay, setOverlay] = React.useState<boolean>(false);\r\n    const history = useHistory();\r\n    const subscriptions = store.active?.subscriptions ?? store.defaults;\r\n    return (\r\n        <div className=\"subscription-list pt-2\">\r\n            <Modal\r\n                onHide={() => setOverlay(false)}\r\n                //size=\"lg\"\r\n                show={showOverlay}>\r\n                <Modal.Header className=\"border-none\" closeButton>\r\n                    <Modal.Title>\r\n                        Subscriptions\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"p-0\">\r\n                    {subscriptions.map(data => data && (\r\n                        <div className=\"p-1 mb-1 border-bottom d-flex justify-content-between align-content-center\">\r\n                            <div>\r\n                                <CommunityAvatar\r\n                                    wrapperClassName=\"mr-2\"\r\n                                    src={data.icon ?? undefined}\r\n                                    label={data.boardId ?? undefined}\r\n                                    size={48} />\r\n                                <span className=\"mr-2\">\r\n                                    +{data.boardId}\r\n                                </span>\r\n                                <span className=\"mr-2\">\r\n                                    {data.members} Members\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"d-flex align-content-center\">\r\n                                <LinkButton to={store.getCommunityLink(data.boardId!)} className=\"mr-1\">View</LinkButton>\r\n                                <Button>Mute</Button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            <div className=\"d-flex flex-column align-items-center mb-2 button-column\">\r\n                <Button onClick={() => store.showSpotlight()} >\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                </Button>\r\n                <Button onClick={() => history.push(\"/create\")} >\r\n                    <FontAwesomeIcon icon={faPlus} />\r\n                </Button>\r\n            </div>\r\n            <Form.Control type=\"text\"\r\n                className=\"mb-2 d-none\"\r\n                placeholder=\"Search subscriptions\"\r\n                onChange={(v) => setFilter(v.target.value)} />\r\n            <SubscriptionList\r\n                data={\r\n                    (state.length == 0) ? subscriptions.slice(0, 12) :\r\n                        subscriptions.filter((v, i) => (v.boardId?.startsWith(state) && i < 10) ? v : null) ?? []} />\r\n            {subscriptions.length > 0 && <div className=\"d-flex flex-column align-items-center button-column\">\r\n                <Button onClick={() => setOverlay(true)} >\r\n                    <FontAwesomeIcon icon={faArrowRight} />\r\n                </Button>\r\n            </div>}\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { TextEditor } from 'components/editor/editor';\r\nimport Editor from 'rich-markdown-editor';\r\nimport { PromiseButton } from 'components/button';\r\nimport { useAppStore } from 'stores/app';\r\nimport { IBoardCreate } from 'model/compiled';\r\n\r\nconst BoardCreateForm: React.FC<{\r\n    onSubmit: (v: IBoardCreate) => Promise<any>\r\n}> = ({ onSubmit }) => {\r\n\r\n    const store = useAppStore();\r\n    const [validated, setValidated] = React.useState(false);\r\n    const [state, set] = React.useState({\r\n        name: \"\",\r\n        description: \"test\",\r\n    })\r\n\r\n    const preSubmit = (): Promise<any> => {\r\n        var o: IBoardCreate = {\r\n            name: state.name,\r\n        };\r\n        return onSubmit(o);\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formThreadTitle\">\r\n                <Form.Label>Community Name</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    onChange={(v) => set({ ...state, name: v.target.value })} />\r\n                <Form.Text className=\"text-muted\"></Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formThreadLink\">\r\n                <Form.Label>Tag line/Title</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"eg; A community for cats!\"\r\n                    onChange={(v) => set({ ...state, description: v.target.value })} />\r\n                <Form.Text className=\"text-muted\">\r\n                    A short description to go in the title and header.\r\n                </Form.Text>\r\n            </Form.Group>\r\n            <p>You can change everything else later!</p>\r\n\r\n            <Alert variant=\"warning\">\r\n                <Alert.Heading>\r\n                    You are restricted to moderating or owning 6 communities at the same time.\r\n                </Alert.Heading>\r\n                This is to stop community capture, when a small group of users hold control over large numbers of communities\r\n            </Alert>\r\n            <div className=\"d-flex flex-row justify-content-center\">\r\n                <PromiseButton onClick={preSubmit} variant=\"primary\" type=\"submit\">\r\n                    Create\r\n                </PromiseButton>\r\n            </div>\r\n\r\n            {state.name.length > 0 &&\r\n                <p>\r\n                    <h1 className=\"display-1\">{state.name}</h1> <span>a community by @you</span>\r\n                </p>}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default BoardCreateForm;","import React from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport BoardCreateForm from 'components/board/create';\r\n//import { IBoardCreateResponse } from 'model/compiled';\r\n\r\nconst ScreenCreate: React.FC<{ onSubmit: () => Promise<any> }> = ({ onSubmit }) => {\r\n    const app = useAppStore();\r\n    const history = useHistory();\r\n    return (\r\n        <ScreenScaffold title=\"Create a new Community\">\r\n            <BoardCreateForm onSubmit={(o) => app.createCommunity(o).then(\r\n                (unknown) => history.replace(app.getCommunityLink(o.name ?? \"error\")))} />\r\n        </ScreenScaffold>\r\n    )\r\n}\r\n\r\nexport default ScreenCreate;","import React from 'react';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { RequireSignInGateway } from 'components/user/gateway'\r\nimport { Figure, Container, Row, Col, Image, Card, Navbar, Nav, Button, Jumbotron } from 'react-bootstrap';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { UserStoreProvider, useUserStore } from 'stores/user';\r\nimport { ImageHeader } from 'components/header';\r\nimport { IconButton } from 'components/button';\r\n\r\nconst ProvideUserScaffold: React.FC = () => {\r\n    const { userId } = useParams();\r\n    return (\r\n        <UserStoreProvider userId={userId}>\r\n            <UserScaffold />\r\n        </UserStoreProvider>\r\n    )\r\n}\r\n\r\nconst UserScaffold: React.FC = observer(() => {\r\n    const store = useUserStore();\r\n    const isSelf = store.isSelf();\r\n    return (\r\n        <div>\r\n            <ImageHeader src=\"\">\r\n\r\n            </ImageHeader>\r\n\r\n            <Navbar className=\"sticky sticky-top bg-white shadow-light border-bottom\">\r\n                <div className=\"container d-flex flex-row justify-content-between align-items-center\">\r\n                    <div>\r\n                        <div>\r\n                            <h6 className=\"display-5 font-bold mb-0\">@{store.userId}</h6>\r\n                            <span className=\"small text-muted\">@{store.userId}</span>\r\n                        </div>\r\n\r\n                        <small>Followers</small>\r\n                    </div>\r\n                    <div className=\"button-row\">\r\n                        {isSelf && <IconButton variant=\"light\" className=\"rounded\">Report</IconButton>}\r\n                    </div>\r\n                </div>\r\n            </Navbar>\r\n            <Container>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst ScreenAccount: React.FC = ({ }) => {\r\n    const appstore = useAppStore();\r\n    return (\r\n        <ProvideUserScaffold />\r\n    )\r\n}\r\n\r\nexport default ScreenAccount;","import React, { useState } from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport {\r\n    useHistory,\r\n    Link,\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport const UserLoginForm: React.FC<{ onSubmit: (email: string, password: string) => Promise<any> }> = ({ onSubmit }) => {\r\n    let history = useHistory();\r\n\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const [state, set] = useState({\r\n        identifier: \"\",\r\n        password: \"test\",\r\n    })\r\n\r\n    const [error, setError] = useState<number>(0)\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.currentTarget.checkValidity();\r\n        event?.preventDefault()\r\n        onSubmit(state.identifier, state.password).then(t => {\r\n            setError(0)\r\n        }).catch(() => setError(404))\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} validated={validated}>\r\n            <Form.Group controlId=\"formBasicUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    required\r\n                    placeholder=\"Enter username\"\r\n                    onChange={(v) => set({ ...state, identifier: v.target.value })} />\r\n                <Form.Text className=\"text-muted\"></Form.Text>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    {state.identifier} is invalid\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\"\r\n                    required\r\n                    placeholder=\"Password\"\r\n                    onChange={(v) => set({ ...state, password: v.target.value })} />\r\n                <Form.Text className=\"text-muted\">\r\n                    <Link to=\"/login/recover\">I've forgotten my password</Link>\r\n                </Form.Text>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Password is invalid, try again, or if you've forgotten, you could reset it.\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Login\r\n            </Button>\r\n        </Form>\r\n    )\r\n}","import React from 'react';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n} from \"react-router-dom\";\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nexport const Brand1: React.FC<{ className: string }> = ({ className }) => {\r\n    return (\r\n        <Link to=\"/\">\r\n            <Navbar.Brand href=\"/\" className={className} style={{\r\n                //fontWeight: 900,\r\n            }}>\r\n                <CommunityAvatar className=\"d-none _d-md-inline\" size={36} />\r\n                <FontAwesomeIcon className=\"d-none rounded ml-1 mr-1\" icon={faPlus} />\r\n                <span className=\"d-inline d-sm-inline ml-2 _font-weight-bold\">\r\n                    our\r\n                </span>\r\n                <sup>+</sup>\r\n                <span className=\"_text-primary\">\r\n                    spaces\r\n                </span>\r\n            </Navbar.Brand>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport const Brand3: React.FC<{ className: string }> = ({ className }) => {\r\n    return (\r\n        <Link to=\"/\">\r\n            <Navbar.Brand href=\"/\" className={className} style={{\r\n                //fontWeight: 900,\r\n            }}>\r\n                <CommunityAvatar className=\"d-none _d-md-inline\" size={36} />\r\n                <FontAwesomeIcon className=\"d-none rounded ml-1 mr-1\" icon={faPlus} />\r\n                <span className=\"d-block\" style={{\r\n                    lineHeight: 0,\r\n                }}>\r\n                    our\r\n                </span>\r\n                <span style={{\r\n                    lineHeight: 0,\r\n                }}>\r\n                    spaces\r\n                </span>\r\n            </Navbar.Brand>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport const Brand: React.FC<{ className: string }> = ({ className }) => {\r\n    return (\r\n        <Link to=\"/\">\r\n            <Navbar.Brand href=\"/\" className={className} style={{\r\n                //fontWeight: 900,\r\n            }}>\r\n                <CommunityAvatar className=\"d-none _d-md-inline\" size={36} />\r\n                <FontAwesomeIcon className=\"d-none rounded ml-1 mr-1\" icon={faPlus} />\r\n                <span className=\"d-block\">\r\n                    <span className=\"text-primary\">+</span>spaces\r\n                </span>\r\n            </Navbar.Brand>\r\n        </Link>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    useHistory,\r\n} from \"react-router-dom\";\r\n\r\nimport { Navbar, Nav, Container, Form, ButtonGroup, Button, Row, Col } from 'react-bootstrap';\r\nimport { useAppStore, AppStoreProvider } from 'stores/app';\r\nimport { observer } from 'mobx-react';\r\nimport { InlineNavCard } from \"components/user/card\"\r\nimport { faAt, faPlus, faDice, faRandom, faProjectDiagram, faAddressCard } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\nimport { Brand } from 'components/brand';\r\nimport { IconButton } from 'components/button';\r\n/**\r\n * favatar\r\n * forumly\r\n * react.site\r\n * discuss.ai\r\n * diskus.dev\r\n * \r\n */\r\n\r\nexport const NavbarBase: React.FC = ({ children }) => {\r\n    const store = useAppStore();\r\n    const url = \"https://source.unsplash.com/collection/416021/1280x800\";\r\n    const wrap = (child: any) => {\r\n        if (!store.UIanimatedHeader) {\r\n            return child;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"bar gradient-horizontal\"></div>\r\n                {child}\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        wrap(<Navbar\r\n            expand=\"md\"\r\n            bg=\"white\"\r\n            //variant=\"dark\"\r\n            className=\"border-bottom sticky-header shadow-light\"\r\n            style={{\r\n                //backgroundImage: `url('${url}')`,\r\n                backgroundSize: \"repeat\",\r\n                //backgroundImage: `url(https://dev.ourspaces.app/img/static/tile1.png)`\r\n            }}\r\n        >\r\n            <Container fluid={true}>\r\n                <Brand className=\"d-inline-block\" />\r\n                {children}\r\n            </Container>\r\n        </Navbar>)\r\n    )\r\n}\r\n\r\nexport const SiteNavbar: React.FC = observer(() => {\r\n    const store = useAppStore();\r\n    const history = useHistory();\r\n    return (\r\n        <NavbarBase>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"\r\n\r\n            />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\" style={{\r\n                //flexGrow: 2,\r\n            }}>\r\n                <Nav className=\"d-flex flex-grow-1 align-items-center\">\r\n                    {false && <Nav.Item id=\"nav-center\" className=\"_flex-grow-1 py-4 p-md-0\">\r\n                        <Form.Control type=\"text\" placeholder=\"Search\" />\r\n                    </Nav.Item>}\r\n                    {false && <Form inline>\r\n                        <Form.Control type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    </Form>}\r\n                    <Brand className=\"d-block d-sm-none\" />\r\n                    <Nav.Link href=\"/+all\">\r\n                        <FontAwesomeIcon className=\"mr-1\" icon={faProjectDiagram} />\r\n                        Big Spaces\r\n                    </Nav.Link>\r\n                    <Nav.Link href=\"/+all\">\r\n                        <FontAwesomeIcon className=\"mr-1\" icon={faAddressCard} />\r\n                        Little Spaces\r\n                    </Nav.Link>\r\n                    <Nav.Link href=\"/about-and-faq\">Help</Nav.Link>\r\n                    <Nav.Link href=\"/+all\">Support Us</Nav.Link>\r\n                    <Nav.Item className=\"flex-grow-1 flex-row text-right py-2 p-md-0 d-flex d-md-flex _d-md-block justify-content-end\">\r\n                        <IconButton variant=\"\" icon={faDice} className=\"mr-2 px-md-4\" onClick={() => store.getRandomCommunity().then(t => history.push(`/+${t}`))} />\r\n                        {store.loggedIn && <InlineNavCard />}\r\n                        {!store.loggedIn ?\r\n                            ([\r\n                                <Link to=\"/login\">\r\n                                    <Button variant=\"\" className=\"mr-2 px-md-4\">Sign In</Button>\r\n                                </Link>,\r\n                                <Link to=\"/signup\">\r\n                                    <Button variant=\"primary\" className=\"px-md-4\">Sign Up</Button>\r\n                                </Link>\r\n                            ]) : null}\r\n                        {/*store.loggedIn && <LinkButton to=\"/logout\">Log out</LinkButton>*/}\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </NavbarBase >\r\n    )\r\n})","import React from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nexport const Jumbosheet: React.FC<{ url?: Array<string> }> = ({ children }) => {\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col className=\"col-1 col-0 col-md-4\" style={{\r\n                    height: \"100vh\",\r\n                    backgroundSize: 'cover',\r\n                    backgroundImage: \"url('https://source.unsplash.com/5XOOcBrDvFE/800x1000')\"\r\n                    //\"url('https://source.unsplash.com/collection/541345/800x1000')\" //416021\r\n                }} />\r\n                <Col className=\"col-11 col-md-8 p-0 bg-white\">\r\n                    {children}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserLoginForm } from \"components/user/auth/login\"\r\nimport { useAppStore } from 'stores/app';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { SiteNavbar, NavbarBase } from \"components/navbar\"\r\nimport { Jumbosheet } from 'components/jumbosheet';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst ScreenLogin: React.FC = observer(({ }) => {\r\n    const store = useAppStore();\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <Jumbosheet>\r\n            <NavbarBase />\r\n            <div>\r\n                <Container className=\"py-md-5\" style={{ maxWidth: 700 }}>\r\n                    <h1 className=\"display-4 mb-5 mt-5\">Login</h1>\r\n                    {store.loggedIn && <div>\r\n                        <h4>Signed in as @{store.active?.username}</h4>\r\n                        <Button onClick={() => store.logout()} >You need to sign out first.</Button>\r\n                    </div>}\r\n                    {!store.loggedIn &&\r\n                        <UserLoginForm\r\n                            onSubmit={(name, key) =>\r\n                                store.login(name, key)\r\n                                    .then(t => history.length > 2 ? history.goBack() : history.push(\"/\"))} />}\r\n\r\n                    <div className=\"mt-4\">\r\n                        <a className=\"small\" href=\"/referral\">Referral Program</a>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        </Jumbosheet>\r\n    )\r\n})\r\n\r\nexport default ScreenLogin;","import React, { useState } from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport {\r\n    useHistory,\r\n} from \"react-router-dom\";\r\n\r\nexport const UserSignupForm:\r\n    React.FC<{ onSubmit: (username: string, email: string, password: string) => Promise<any> }> =\r\n    (props) => {\r\n        let history = useHistory();\r\n\r\n        const [state, set] = useState({\r\n            username: \"\",\r\n            email: \"\",\r\n            password: \"\"\r\n        })\r\n\r\n        const [error, setError] = useState<number>(0)\r\n\r\n        const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n            event?.preventDefault()\r\n            props.onSubmit(state.username, state.email, state.password).catch(t => {\r\n                //history.replace(\"/\")\r\n                setError(404)\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formBasicUsername\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        placeholder=\"Enter username\"\r\n                        onChange={(v) => set({ ...state, username: v.target.value })} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Think of a unique username, like ittykitty or DoomMaster1999\r\n                    </Form.Text>\r\n                    <Form.Text className=\"text-muted\">\r\n                        Whatever you want really.\r\n                     </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control type=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        onChange={(v) => set({ ...state, email: v.target.value })} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        We'll never share your email with anyone else, \r\n                            if you lose your password, we'll send a recovery email.\r\n                    </Form.Text>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a email.\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={(v) => set({ ...state, password: v.target.value })} />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a password.\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check\r\n                        required\r\n                        type=\"checkbox\"\r\n                        label=\"I agree with the terms and conditions\"\r\n                        feedback=\"You must agree before submitting.\"\r\n                    />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Sign up\r\n                </Button>\r\n                <p>{error > 0 && \"Something went wrong...\"}</p>\r\n            </Form>\r\n        )\r\n    }","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserSignupForm } from \"components/user/auth/signup\"\r\nimport { useAppStore } from 'stores/app';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Jumbosheet } from 'components/jumbosheet';\r\nimport { SiteNavbar, NavbarBase } from \"components/navbar\"\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst ScreenLogin: React.FC = observer(({ }) => {\r\n    const store = useAppStore();\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <Jumbosheet>\r\n            <NavbarBase />\r\n            <Container className=\"py-md-3\" style={{ maxWidth: 700 }}>\r\n                <h1 className=\"display-4 mb-5 mt-5\">Sign up</h1>\r\n                {store.loggedIn && <div>\r\n                    <h4>Signed in as @{store.active?.username}</h4>\r\n                    <Button onClick={() => store.logout()} >You need to sign out first.</Button>\r\n                </div>}\r\n                {!store.loggedIn && <UserSignupForm onSubmit={\r\n                    (name, email, key) => \r\n                        store.signup(name, email, key)\r\n                        .then(t => history.length > 2 ? history.goBack() : history.replace(\"/\")) } />}\r\n            </Container>\r\n        </Jumbosheet>\r\n    )\r\n})\r\n\r\nexport default ScreenLogin;","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { IEvent } from 'model/net';\r\n\r\nconst NotificationCard: React.FC<{ data: IEvent }> = ({ data }) => {\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <h6>{data.entityId}</h6>\r\n            <p>\r\n\r\n            </p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport const NotificationListObserver: React.FC = observer(() => {\r\n    const app = useAppStore();\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {app.displayableEvent.slice(0, 5).map(t => <NotificationCard key={t.entityId} data={t} />)}\r\n        </ul>\r\n    )\r\n})","import React from 'react';\r\n//import { DataSet, Network } from 'vis-network';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\n\r\nexport const ScreenExploreGraph: React.FC<{}> = () => {\r\n    const ref = React.useRef<HTMLDivElement>(null);\r\n    React.useEffect(() => {\r\n        let nodes = new DataSet([\r\n            { id: 1, label: 'Node 1' },\r\n            { id: 2, label: 'Node 2' },\r\n            { id: 3, label: 'Node 3' },\r\n            { id: 4, label: 'Node 4' },\r\n            { id: 5, label: 'Node 5' }\r\n        ]);\r\n        if (ref.current)\r\n            new Network(ref.current, { nodes: nodes }, {});\r\n    }, [ref])\r\n    return (\r\n        <div ref={ref} className=\"d-flex align-self-stretch\" \r\n            style={{ height: 'calc(100vh - 60px)'}}></div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Button, Modal, Form, Container, Row, Col } from 'react-bootstrap';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Board } from 'stores/board';\r\n\r\nimport { observer } from 'mobx-react';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\n\r\nimport _ from \"lodash\";\r\n\r\nconst CommunityList: React.FC<{ data: Array<Board> }> = ({ data }) => {\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {data.map((e) =>\r\n                <li className=\"list-group-item py-0\">\r\n                    <CircleAvatar src=\"\" size={32} />\r\n                    {e.uId}\r\n                </li>)\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst SpotlightArea: React.FC = (props) => {\r\n    return (\r\n        <div>\r\n            <h4>Spaces</h4>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Spotlight: React.FC = observer(() => {\r\n    const app = useAppStore();\r\n    //const store = useBoardStore();\r\n    const [search, setSearch] = React.useState(\"\");\r\n    const onChange = React.useCallback(_.debounce((v: any) => {\r\n        //store.spotlightQuery = v.target.value;\r\n        app.spotlightQuery(search);\r\n    }, 10), []);\r\n\r\n    return (\r\n        <div style={{ minHeight: \"50vh\" }}>\r\n            <Form.Control\r\n                type=\"text\"\r\n                className=\"mb-2\"\r\n                placeholder=\"Search Communities, Memberships, Messages, Users\"\r\n                required\r\n                onChange={(e) => {\r\n                    e.persist();\r\n                    setSearch(e.target.value);\r\n                    onChange(e);\r\n                }} />\r\n            <Container>\r\n                <Row>\r\n                    <Col lg={6}>\r\n                        <h4>Spaces</h4>\r\n                        <CommunityList data={app.communitySearch?.data ?? []} />\r\n                    </Col>\r\n                    <Col lg={6}>\r\n                        <h4>Spaces</h4>\r\n                        <CommunityList data={app.communitySearch?.data ?? []} />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const SpotlightModal: React.FC<{}> =\r\n    observer(({ children }) => {\r\n        const app = useAppStore();\r\n        return (\r\n            <Modal\r\n                show={app.UIShowSpotlight}\r\n                onHide={() => app.UIShowSpotlight = false}\r\n                //backdrop=\"static\"\r\n                size=\"lg\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header className=\"border-none d-none\" closeButton>\r\n                    <Modal.Title></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Spotlight />\r\n                </Modal.Body>\r\n            </Modal >\r\n        );\r\n    })","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Form, Button, InputGroup, Modal } from 'react-bootstrap';\r\nimport { IBoard, IThread, IComment, ICommunityUserRef } from 'model/compiled';\r\n\r\nexport const ModerateForm: React.FC<{ \r\n    src?: IBoard | IThread | IComment | ICommunityUserRef ,\r\n    //b?: IBoard, \r\n    //t?: IThread, \r\n    //c?: IComment \r\n}> = ({ src }) => {\r\n    const store = useAppStore();\r\n\r\n    const [banLength, setBan] = React.useState(0);\r\n    return (\r\n        <div>\r\n            <h5>For:</h5>\r\n\r\n            <div>\r\n                {JSON.stringify(src)}\r\n            </div>\r\n\r\n            <Form>\r\n                <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                    <Form.Label>Reasons</Form.Label>\r\n                    <Form.Control as=\"select\" multiple>\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                        <option>4</option>\r\n                        <option>5</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Check\r\n                    label=\"Is illegal content (any media is deleted, user is permanently banned)\"\r\n                    type=\"checkbox\"\r\n                />\r\n\r\n                <Form.Check\r\n                    onChange={() => setBan(banLength > 0 ? 0 : 10000)}\r\n                    checked={banLength > 0}\r\n                    type=\"checkbox\"\r\n                    label=\"Suspend this user from posting\" />\r\n\r\n                {banLength ? <input type=\"date\" /> : null}\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label>Your reason and any remarks (shown to poster, and visible in the ban log)</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label>A message to the user</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} />\r\n                </Form.Group>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <Button>Cancel</Button>\r\n                    <Button>Submit action</Button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const ModeratorActionsGlobal = observer(() => {\r\n    const store = useAppStore();\r\n    return (\r\n        <Modal show={store.moderate != undefined} onHide={() => store.moderate = undefined} >\r\n            <Modal.Header closeButton>\r\n                Moderation action\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <ModerateForm src={store.moderate} />\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { useAppStore } from 'stores/app';\r\nimport { ThreadStoreProvider } from 'stores/thread';\r\nimport { BoardStoreProvider } from 'stores/board';\r\n\r\nimport { ThreadView } from 'components/board/thread/thread';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { UserSignupForm } from \"components/user/auth/signup\"\r\nimport { UserLoginForm } from \"components/user/auth/login\"\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst BoardSingleAuthenticationOverlayObserver = observer(() => {\r\n    const store = useAppStore();\r\n    const [mode, setMode] = React.useState();\r\n    const history = useHistory();\r\n\r\n    console.log(\"[BoardSingleAuthenticationOverlayObserver]\")\r\n    //return store.overlayThread != undefined ? \r\n    return (\r\n        <Modal\r\n            //className=\"primary\"\r\n            show={store.loginOverlay}\r\n            onHide={() => store.loginOverlay = false}\r\n            size=\"lg\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                    Login/Signup\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"p-0\">\r\n                <div>\r\n                    {mode ? <UserSignupForm onSubmit={\r\n                        (name, email, key) =>\r\n                            store.signup(name, email, key)\r\n                                .then(t => history.length > 2 ? history.goBack() : history.replace(\"/\"))} /> :\r\n                        <UserLoginForm\r\n                            onSubmit={(name, key) =>\r\n                                store.login(name, key).then(t => history.length > 2 ? history.goBack() : history.push(\"/\"))} />\r\n                    }\r\n                </div>\r\n            </Modal.Body>\r\n        </Modal >\r\n    );\r\n});\r\n\r\nexport default BoardSingleAuthenticationOverlayObserver;","import React from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n  Navbar, Nav,\r\n  Container, Form,\r\n  ButtonGroup, Button,\r\n  Row, Col, NavDropdown\r\n} from 'react-bootstrap';\r\n\r\nimport { ModalSheetWrapper } from \"components/modal\";\r\nimport { RouterBoard } from './board';\r\nimport { useAppStore, AppStoreProvider } from '../stores/app';\r\n\r\nimport { ScreenFrontpage } from './home/front';\r\nimport { SubscriptionListWithSearch } from '../components/user/sub';\r\nimport ScreenCreate from 'screens/board/create';\r\n\r\nimport ScreenAccount from \"screens/user/account\"\r\nimport ScreenLogin from \"screens/user/login\"\r\nimport ScreenSignup from \"screens/user/signup\"\r\nimport { SiteNavbar } from \"components/navbar\"\r\nimport { NotificationListObserver } from 'components/user/notification';\r\nimport { ScreenExploreGraph } from 'screens/home/explore';\r\nimport { SpotlightModal } from 'components/spotlight';\r\nimport classNames from 'classnames';\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\nimport Sticky from 'react-stickynode';\r\nimport { SidebarDefault } from 'components/app/sidebar';\r\nimport { ModeratorActionsGlobal } from 'components/board/moderator/actions';\r\nimport BoardSingleAuthenticationOverlayObserver from 'components/user/overlay';\r\n\r\nimport ScreenDonateRouter from 'screens/about/donate';\r\nimport ScreenStaticRouter from 'screens/static/scaffold';\r\n\r\n//import info from './gitinfo.js';\r\n\r\nconst info = \"\";\r\n\r\n// scaffold the navigation sidebar around the main screen\r\nconst Scaffold: React.FC = observer(({ children }) => {\r\n  const app = useAppStore()\r\n  const ref = React.useRef();\r\n  document.body.className = \"fadeIn \" + app.themeName;\r\n\r\n  return (\r\n    <>\r\n      <SiteNavbar />\r\n      <Container fluid id=\"screen-wrapper\" className=\"_header-spacer _no-gutters _p-0\" style={{\r\n        maxWidth: app.UIconstrainContainer ? 1500 : undefined\r\n      }}>\r\n        <Row id=\"screen-row\" className={\"justify-content-around flex-xl-nowrap \" +\r\n          (app.UIconstrainContainer && \"_m-auto\")}\r\n          style={{\r\n            //maxWidth: app.UIconstrainContainer ? 1400 : undefined\r\n          }}>\r\n          <Col id=\"wrapper-screen-left\"\r\n            className={classNames(\"d-none d-block border-right bg-white\",\r\n              app.UIconstrainContainer ? \"col-md-4\" : \"col-12 col-md-2 col-xl-1\")} style={{\r\n                maxWidth: \"80px\",\r\n                minWidth: \"64px\"\r\n              }}>\r\n            <Sticky>\r\n              <SubscriptionListWithSearch />\r\n            </Sticky>\r\n            <div id=\"screen-left\" className=\"sticky\"></div>\r\n          </Col>\r\n          <Col className=\"_h-100 main-content p-0 _p-md-3\">\r\n            {children}\r\n          </Col>\r\n          <Col id=\"wrapper-screen-right\"\r\n            className={classNames(\"d-none d-lg-block border-left _p-0 bg-white\",\r\n              app.UIconstrainContainer ? \"col-md-3\" : \"col-12 col-md-2 col-xl-2\")}>\r\n            <div className=\"_sticky mt-2\">\r\n              <Sticky>\r\n                <SidebarDefault />\r\n                <NotificationListObserver />\r\n              </Sticky>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n})\r\n\r\nexport const BoardRouterWrapper: React.FC = () => {\r\n  return (\r\n    <Scaffold>\r\n      <Switch>\r\n        <Route path=\"/+:boardId\" component={RouterBoard} />\r\n        <Route path=\"/c/:boardId\" component={RouterBoard} />\r\n        <Route path=\"/post/:threadId/:title\" component={() => null} />\r\n        <Route path=\"/@:userId\" component={() => null} />\r\n        <Route path=\"/u/:userId\" component={() => null} />\r\n        <BoardSingleAuthenticationOverlayObserver />\r\n      </Switch>\r\n      <ModeratorActionsGlobal />\r\n    </Scaffold>\r\n  )\r\n}\r\n\r\nexport const CommunityWrapper: React.FC = () => {\r\n  return (\r\n    <>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport const RouterRoot: React.FC = observer(({ }) => {\r\n  return (\r\n    <Router>\r\n      <SpotlightModal />\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={ScreenLogin} />\r\n        <Route exact path=\"/login/recover\" component={ScreenLogin} />\r\n        <Route exact path=\"/signup\" component={ScreenSignup} />\r\n        <Route path=\"/+:pathId\" component={BoardRouterWrapper} />\r\n        <Route path=\"/c/:pathId\" component={BoardRouterWrapper} />\r\n        <Scaffold>\r\n          <Route exact path=\"/create\" component={ScreenCreate} />\r\n          <Route exact path=\"/explore/graph\" component={ScreenExploreGraph} />\r\n          <Route exact path=\"/account\" component={ScreenAccount} />\r\n          <Route exact path=\"/@:userId\" component={ScreenAccount} />\r\n\r\n          <Route exact path=\"/all\" component={ScreenFrontpage} />\r\n          <Route exact path=\"/\" component={ScreenFrontpage} />\r\n        </Scaffold>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n})\r\n\r\n// add AppStore context into tree so it can be found by any widget\r\nexport const RouterScaffold: React.FC = () => {\r\n  return (\r\n    <AppStoreProvider>\r\n      <ParallaxProvider>\r\n        <RouterRoot />\r\n      </ParallaxProvider>\r\n    </AppStoreProvider>\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\n\n\nimport { Provider, Observer } from 'mobx-react';\nimport 'mobx-react-lite/batchingForReactDom'\n\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nimport { RouterScaffold } from \"screens/scaffold\"\n\nfunction App() {\n  return (\n    <RouterScaffold />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./types.d.ts\";\nimport \"./types.js\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}