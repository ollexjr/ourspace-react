{"version":3,"sources":["components/button.tsx","stores/user.tsx","service/api.ts","stores/app.tsx","stores/board.tsx","stores/thread.tsx","components/editor/editor.tsx","components/board/vote.tsx","components/network/gateway.tsx","components/user/avatar.tsx","components/media.tsx","components/board/user.tsx","components/board/thread/thread.tsx","components/screen.tsx","components/board/thread/create.tsx","screens/board/thread/create.tsx","components/board/avatar.tsx","components/dropdown.tsx","components/scroll.tsx","components/board/overlay.tsx","components/board/board.tsx","screens/board/edit.tsx","components/app/messages.tsx","components/uisettings.tsx","components/modal.tsx","components/user/card.tsx","components/app/sidebar.tsx","components/header.tsx","screens/board/index.tsx","screens/home/front.tsx","components/user/sub.tsx","components/board/create.tsx","screens/board/create.tsx","screens/user/account.tsx","components/user/auth/login.tsx","components/navbar.tsx","components/jumbosheet.tsx","screens/user/login.tsx","components/user/auth/signup.tsx","screens/user/signup.tsx","components/user/notification.tsx","screens/home/explore.tsx","components/spotlight.tsx","components/board/moderator/actions.tsx","screens/scaffold.tsx","App.tsx","serviceWorker.ts","index.tsx","model/compiled.js","types.js"],"names":["LinkButton","withRouter","props","Button","onClick","location","pathname","to","history","push","icon","children","PromiseButton","React","useState","loading","setState","variant","finally","Spinner","animation","IconButton","className","AccountStore","app","username","defaults","this","addDefaults","sync","_","map","mapSubscriptions","addSubscription","boardId","e","uId","api","endpointGet","then","r","subscriptions","forEach","observable","UserStore","userId","loggedIn","active","userStoreContext","createContext","UserStoreProvider","useAppStore","store","setStore","useEffect","Provider","value","Jwt","token","raw","decode","console","log","JwtDecode","header","Date","now","exp","AccessJwt","rawToken","http","request","init","expects","a","fetch","catch","res","o","response","message","Promise","reject","status","json","API","NetworkService","socket","getToken","timer","retryFactor","f","undefined","jwt","encoded","resolve","WebSocket","addEventListener","event","ev","JSON","stringify","setTimeout","initWebSocket","data","t","setupSocket","path","args","encodedArgs","serialize","method","headers","body","getHeaders","h","file","formData","FormData","append","obj","prefix","str","p","hasOwnProperty","k","v","encodeURIComponent","join","ObservableRequestState","isFetching","error","AppStore","accessToken","refreshToken","_api","accounts","auto","autorun","persist","getTokenCallback","_access","expired","basicPost","_refresh","invalidToken","loadOther","openSocket","setupLogin","themeName","Notification","requestPermission","parse","addEvent","entityId","commentReply","commentReplyEvent","displayableEvent","comment","user","content","array","trending","toJson","window","localStorage","setItem","tearDownLogin","name","email","key","length","endpointPost","login","password","tokens","unsetGetToken","setGetToken","spotlightQuery","closeWebSocket","uid","s","query","limit","communitySearch","UIShowSpotlight","action","appStoreContext","AppStoreProvider","getItem","hydrateAppStore","useContext","Error","BoardStore","headerImage","iconImage","backgroundRepeat","backgroundSize","filtersPrev","autoQuery","filters","Object","keys","rankMethod","UIconstrainContainer","entries","info","endpointPostEx","isMember","ignore","page","withContext","wrap","getCollection","board","threads","threadId","vote","type","typeCode","endpointPostFile","moderate","c","overlayThread","sortDirection","ThreadSelectFilters","SortDirection","DESC","Method","TOP","boardStoreContext","BoardStoreProvider","useBoardStore","ThreadStore","threadctx","flatComments","_flattenComments","i","n","load","parentId","wrapper","insertComment","commentId","voteThread","thread","commentsGraph","threadStoreContext","ThreadStoreProvider","initData","useThreadStore","TextEditor","source","onAccept","onCancel","buttons","readOnly","template","state","isWaiting","setWaiting","target","useRef","ref","style","visibility","position","top","right","left","bottom","pointerEvents","display","justifyContent","alignItems","backgroundColor","defaultValue","onChange","faTimes","faPaperPlane","codeMap","InlineVoter","preview","votes","table","size","setLoading","valueState","setValue","fire","nv","def","cls","OverlayTrigger","rootClose","trigger","placement","overlay","Popover","id","Title","as","Content","isThis","count","padding","classNames","document","click","onMouseLeave","onMouseEnter","role","NetworkGateway","observer","retry","minHeight","faSync","CircleAvatar","src","label","Tooltip","Image","width","height","objectFit","borderRadius","substr","MediaSource","onOpen","aspectRatio","thumb","onEvent","isVideo","ReactPlayer","canPlay","loader","child","debounce","once","offset","innerHeight","light","controls","onPlay","onPause","url","u","URL","hostname","lang","data-id","href","async","paddingBottom","frameBorder","allowFullScreen","UserBadge","Badge","CommunityUserInline","isAdmin","faHammer","isMod","faUserShield","CommentPadding","depth","index","borderLeft","ThreadCommentCard","debug","reply","setReply","edit","setEditing","canReply","canEdit","moment","unix","createdAt","fromNow","acceptText","cancelText","addComment","acceptedCommentVotes","voteComment","me","faEdit","faReply","editComment","ThreadCommentView","ExternalFrame","setLoaded","onLoadStart","onScroll","marginWidth","marginHeight","onLoad","ThreadNavbar","Navbar","bg","zIndex","fontSize","whiteSpace","members","overflowY","textOverflow","title","ThreadView","showModal","setModal","link","Container","Modal","show","onHide","Header","closeButton","network","acceptedVotes","faRandom","faExpand","faShare","ScreenScaffold","ThreadCreateForm","onSubmit","onDraft","set","Form","Group","controlId","Label","Control","placeholder","Text","dark","isDarkTheme","err","ScreenCreate","useHistory","createThread","replace","getThreadLink","CommunityAvatar","wrapperClassName","CommunityLinkPopover","EnumToArray","DropdownEnum","values","labels","onSelect","DropdownButton","Dropdown","Item","eventKey","CustomToggle","forwardRef","preventDefault","faEllipsisV","ButtonDropdown","items","Toggle","Menu","ScrollEventProvider","listener","onScrollBottom","isBottom","onScrollDebounce","useCallback","getBoundingClientRect","removeEventListener","BoardSingleThreadOverlayObserver","Body","isImage","RegExp","CardButtons","buttonClass","commentNum","isModerator","moderateThread","setOverlay","faCommentAlt","faLink","ThreadCard","showContext","test","host","faExternalLinkAlt","Card","thumbAspectRatio","numComments","ThreadsView","layout","getElementById","requestMore","statusText","elementType","isConstrained","BoardTextSearch","BoardNavbar","faWindowMaximize","faStream","faPortrait","UIdatalayout","faSave","search","getQueryParams","faSortAmountDown","faSortAmountUp","faPlus","faUsersSlash","faUsers","unsubscribe","subscribe","BoardView","requests","FileInput","waiting","File","files","required","isInvalid","feedback","feedbackTooltip","custom","ScreenEdit","uploadIcon","uploadBanner","SystemMessages","AppSettingsForm","Check","checked","UIshowEventDebug","UIanimatedHeader","UIdarkTheme","SidebarSettings","ModalSheetWrapper","onConfirm","setShow","handleClose","backdrop","keyboard","Footer","InlineNavCard","logout","Divider","UserNotifications","faEnvelope","TrendingCommunitiesList","faChartLine","SiteCard","Portal","ReactDOM","createPortal","SidebarDefault","getFullYear","ImageHeader","animated","Jumbotron","backgroundImage","ImageHeaderParallax","layers","image","amount","RouterThread","useParams","BoardScaffold","component","fluid","backgroundAttachment","UIcontainerFluid","banner","description","exact","Subtitle","ListGroup","ListGroupItem","posts","faSearch","RouterBoard","match","ScreenFrontpage","SubscriptionIcon","SubscriptionList","params","pathId","SubscriptionListWithSearch","setFilter","showOverlay","getCommunityLink","showSpotlight","slice","filter","startsWith","faArrowRight","BoardCreateForm","Alert","Heading","createCommunity","unknown","ProvideUserScaffold","UserScaffold","useUserStore","isSelf","ScreenAccount","UserLoginForm","validated","identifier","setError","currentTarget","checkValidity","Feedback","Brand","NavbarBase","expand","SiteNavbar","aria-controls","Collapse","Nav","Link","faProjectDiagram","faAddressCard","Jumbosheet","Row","Col","ScreenLogin","maxWidth","goBack","UserSignupForm","signup","NotificationCard","NotificationListObserver","ScreenExploreGraph","nodes","DataSet","current","Network","CommunityList","Spotlight","setSearch","SpotlightModal","ModerateForm","banLength","setBan","multiple","rows","ModeratorActionsGlobal","Scaffold","minWidth","BoardRouterWrapper","RouterRoot","ScreenSignup","RouterScaffold","App","Boolean","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","User","properties","prototype","rId","avatar","create","encode","writer","call","uint32","string","encodeDelimited","ldelim","reader","end","len","pos","tag","skipType","decodeDelimited","verify","isInteger","isString","fromObject","object","String","toObject","options","toJSON","constructor","toJSONOptions","UserRef","AccountState","emptyArray","karma","Long","fromBits","upvotes","downvotes","BoardSubscription","fork","int64","Array","isArray","low","high","TypeError","fromValue","unsigned","parseInt","LongBits","toNumber","arrays","long","longs","toString","Number","j","LoginRequest","TokenPair","JwtTokenPair","LoginResponse","ThreadCreateRequest","createdAtHint","ThreadCreateResponse","ThreadWithBoardContext","comments","Thread","Board","CommentSelectResponse","CommentSelectGraphResponse","BanInfo","bannedBy","banReason","approvedBy","reason","ReportInfo","report","Vote","int32","CommentActionedContext","bool","ThreadActionedContext","CommentEditRequest","Comment","CommentCreateResponse","commentuId","CommentCreateRequest","CommentNode","clipped","emptyObject","end2","tag2","isObject","keys2","objects","CommentSelectHistoryResponse","commentEdits","mod","unhandledReports","reports","CommunityUserRef","CommentSelectFilters","enums","valuesById","ReportsSelectResponse","CommunitySelectRequest","CommunitySelectResponse","isOwner","isBanned","moderators","rules","lockType","awards","flair","linkType","isKicked","isLocked","isArchived","lastCommentAt","float","isFinite","EntityVoteRequest","useBoolean","createdStart","createdEnd","ThreadContentFilter","ContentWarning","ThreadSelectRequest","ThreadsSelectResponse","users","ThreadsSelectResponseWithBoardContext","UserCreate","acceptEmail","subscribeNewsletter","UserSubscribedRequest","BlogSubscription","UserMod","BoardMod","BoardCreate","UserModerationAction","endsAt","ModerationAction","category","ThreadModerationAction","CommentModerationAction","BoardModerationAction","UserInBoardContext","communityOpinion","theirUpvotes","theirDownvotes","format","ImageModifyRequest","item","DraftJsBlock","inlineStyleRanges","entityRanges","text","DraftJsEntity","DraftJsRawContent","blocks","Event","eventId","newBuffer","bytes","base64","CommentReplyEvent","CommentCreateEvent","UserMentionEvent","ThreadVoteEvent","totalVotes","EventContextUpdate","threadViewportRange","commentViewportRange","code","module","exports","trimMax","max"],"mappings":"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","file":"static/js/main.6041b5de.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { Button, ButtonProps, OverlayTrigger, Spinner, Tooltip } from 'react-bootstrap';\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst _LinkButton: React.FC<{ icon?: any, to: string } & RouteComponentProps & ButtonProps> = (props) => {\r\n    return <Button\r\n        {...props} onClick={() => props.location.pathname == props.to || props.history.push(props.to)}>\r\n            {props.icon && <FontAwesomeIcon icon={props.icon} />}\r\n            {props.children}\r\n    </Button>\r\n}\r\n\r\nexport const LinkButton = withRouter(_LinkButton);\r\n\r\n// button that is very basically network aware via a promise result, \r\n// and reflects that in with a loading and result indicator\r\nexport const NetworkedButton: React.FC<{ onClick: () => Promise<any>, message: string, successMessage: string }> = ({ message, successMessage, children, onClick }) => {\r\n    const [state, setState] = React.useState(0);\r\n    return <Button onClick={() => {\r\n        setState(1)\r\n        onClick().then(t => {\r\n            setState(2);\r\n        }).catch(t => {\r\n            setState(3);\r\n        })\r\n    }}> {children}\r\n        {state == 1 && <Spinner animation=\"border\" />}\r\n        {state > 1 && <FontAwesomeIcon icon={state == 2 ? faCheck : faTimes} />}\r\n        {state < 2 ? message : successMessage}\r\n    </Button>\r\n}\r\n\r\nexport const PromiseButton: React.FC<{\r\n    onClick: () => Promise<any>,\r\n    icon?: any,\r\n} & ButtonProps> = ({ children, icon, onClick }, props) => {\r\n    const [loading, setState] = React.useState<boolean>(false);\r\n    return <Button {...props} variant={\"\"} onClick={() => {\r\n        if (loading)\r\n            return;\r\n        setState(true)\r\n        onClick().finally(() => {\r\n            setState(false);\r\n        })\r\n    }}>\r\n        {icon && <FontAwesomeIcon icon={icon} />}\r\n        {loading ? <Spinner animation=\"border\" /> : children}\r\n    </Button>\r\n}\r\n\r\nexport const IconButton: React.FC<{\r\n    onClick?: () => any,\r\n    icon?: any,\r\n} & ButtonProps> = ({ onClick, icon, variant, children }, props) => {\r\n    return (\r\n        <Button //variant=\"outline-primary\"\r\n            onClick={onClick}  \r\n            variant={variant}\r\n            {...props}>\r\n            <FontAwesomeIcon icon={icon} />\r\n            <span className=\"ml-1 d-none d-sm-inline\">\r\n                {children}\r\n            </span>\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport const TooltipButton: React.FC<{\r\n    onClick: () => Promise<any>, tooltip: string, text: string\r\n} & ButtonProps> = ({ onClick, children, tooltip }, props) => {\r\n    return (\r\n        <OverlayTrigger\r\n            placement=\"right\"\r\n            delay={{ show: 250, hide: 400 }}\r\n            overlay={\r\n                (\r\n                    <Tooltip id=\"button-tooltip\">\r\n                        {tooltip}\r\n                    </Tooltip>\r\n                )}\r\n        >\r\n            <PromiseButton {...props}>{children}{tooltip}</PromiseButton>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport const Fab = () => {\r\n\r\n}\r\n\r\nexport const FabContainer: React.FC = ({ children }) => {\r\n    return (\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '1em',\r\n        }}>\r\n            {children}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { observable } from 'mobx';\r\nimport { useAppStore, AppStore } from './app';\r\nimport { IBoard, IBoardSubscription } from 'model/compiled';\r\nimport _ from 'lodash';\r\n\r\nexport interface UserRef {\r\n    username: string\r\n}\r\n\r\n//subscriptions: Array<BoardSubscription>\r\ninterface AcccountState {\r\n    subscriptions: Array<IBoardSubscription>;\r\n    karma: number\r\n    authorityLevel: number\r\n}\r\n\r\nexport class AccountStore {\r\n    readonly app: AppStore\r\n    username: string\r\n\r\n    @observable\r\n    invalidToken: boolean = false;\r\n\r\n    defaults: Array<IBoardSubscription> = [];\r\n\r\n    // display array with order\r\n    //@observable subscriptions: Array<IBoardSubscription> = [];\r\n\r\n    // reduced array\r\n    @observable mapSubscriptions: {\r\n        [k: string]: IBoardSubscription\r\n    } = {};\r\n\r\n    get subscriptions() {\r\n        return _.map(this.mapSubscriptions);\r\n    }\r\n\r\n    //{ boardId: \"all\", createdAt: 0 }, \r\n    //{ boardId: \"listentothis\", createdAt: 0 },\r\n    //{ boardId: \"news\", createdAt: 0 }\r\n    constructor(app: AppStore, username: string) {\r\n        this.app = app;\r\n        this.username = username;\r\n        //this.subscriptions.concat(this.defaults);\r\n        this.addDefaults();\r\n        this.sync();\r\n    }\r\n\r\n    addDefaults() {\r\n        this.addSubscription({ boardId: 'news' });\r\n        this.addSubscription({ boardId: 'pics' });\r\n        this.addSubscription({ boardId: 'listentothis' });\r\n        this.addSubscription({ boardId: 'activities' });\r\n    }\r\n\r\n    addSubscriptionB(e: IBoard) {\r\n        if (this.mapSubscriptions[e.uId!]) {\r\n            return;\r\n        }\r\n        this.mapSubscriptions[e.uId!] = {\r\n            boardId: e.uId,\r\n        }\r\n    }\r\n\r\n    addSubscription(e: IBoardSubscription) {\r\n        //if (this.mapSubscriptions[e.boardId!]) {\r\n        //    return;\r\n        //}\r\n        this.mapSubscriptions[e.boardId!] = e\r\n        //this.subscriptions.push(e);\r\n    }\r\n\r\n    sync(): Promise<void> {\r\n        return this.app.api.endpointGet(\"me/state\", null, 200).then((r: AcccountState) => {\r\n            if (r.subscriptions) {\r\n                r.subscriptions.forEach(e => {\r\n                    this.addSubscription(e);\r\n                });\r\n                return;\r\n            }\r\n            return;\r\n        })\r\n    }\r\n    toJson(): any {\r\n        return {\r\n            'username': this.username,\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class UserStore {\r\n    readonly app: AppStore\r\n    userId: string\r\n\r\n    @observable\r\n    invalidToken: boolean = false;\r\n    constructor(app: AppStore, userId: string) {\r\n        this.app = app;\r\n        this.userId = userId;\r\n\r\n        //if this.isSelf()\r\n\r\n    }\r\n\r\n    load() {\r\n\r\n    }\r\n\r\n    isSelf() {\r\n        return this.app.loggedIn && this.app?.active?.username == this.userId;\r\n    }\r\n}\r\n\r\n\r\nconst userStoreContext = React.createContext<UserStore | null>(null);\r\nexport const UserStoreProvider: React.FC<{ userId: string }> = ({ children, userId }) => {\r\n    const app = useAppStore();\r\n\r\n    const [store, setStore] = React.useState<UserStore>();\r\n    React.useEffect(() => {\r\n        setStore(new UserStore(app, userId));\r\n    }, [app, userId]);\r\n\r\n    if (store) {\r\n        return <userStoreContext.Provider value={store}>\r\n            {children}\r\n        </userStoreContext.Provider>\r\n    }\r\n    return (\r\n        <>\r\n            Loading...\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useUserStore = () => {\r\n    const store = React.useContext(userStoreContext)\r\n    if (!store) {\r\n        throw new Error('userStoreContext must be used within a UserStoreProvider')\r\n    }\r\n    return store\r\n}\r\n\r\nconst fetch_retry = async (url: string, options: any, n: number) => {\r\n    let error;\r\n    for (let i = 0; i < n; i++) {\r\n        try {\r\n            return await fetch(url, options);\r\n        } catch (err) {\r\n            error = err;\r\n        }\r\n    }\r\n    throw error;\r\n};\r\n","import { observable } from 'mobx';\r\nimport JwtDecode from 'jwt-decode';\r\nimport { observer } from \"mobx-react\";\r\ninterface Token {\r\n    exp: number\r\n}\r\n\r\ninterface AccessToken extends Token {\r\n    username: string\r\n    avatar: string\r\n    exp: number\r\n    uid: string\r\n}\r\n\r\nexport interface TokenPair {\r\n    accessToken: string\r\n    refreshToken: string\r\n}\r\n\r\nexport interface Response {\r\n    data: Array<any>\r\n    token: string\r\n}\r\n\r\nexport class Jwt {\r\n    readonly token: Token;\r\n    protected raw: string\r\n    constructor(token: string) {\r\n        this.raw = token;\r\n        this.token = this.decode(token);\r\n    }\r\n    protected decode<T>(token: string): T {\r\n        console.log(\"[jwt decode] => \", token)\r\n        //let header = JwtDecode<T>(token, { header: true });\r\n        let body = JwtDecode<T>(token, { header: false });\r\n        return body;\r\n    }\r\n    public get encoded(): string {\r\n        return this.raw;\r\n    }\r\n    public expired(): boolean {\r\n        // undefined bug, todo: fix this\r\n        let o = Date.now() / 1000;\r\n        return o >= this.token.exp;\r\n    }\r\n}\r\n\r\nexport class AccessJwt extends Jwt {\r\n    readonly token: AccessToken;\r\n    //protected raw: string\r\n    constructor(rawToken: string) {\r\n        super(rawToken);\r\n        this.token = this.decode<AccessToken>(rawToken);\r\n    }\r\n}\r\n\r\nexport interface RequestState {\r\n    networkError: false,\r\n    response: globalThis.Response;\r\n    message: string;\r\n}\r\n\r\nexport interface APIError {\r\n    response: globalThis.Response;\r\n    message: string\r\n}\r\n\r\nexport async function http(\r\n    request: RequestInfo,\r\n    init: RequestInit,\r\n    expects: number,\r\n): Promise<any> {\r\n    const response = await fetch(request, init).catch(res => {\r\n        let o: APIError = {\r\n            response: res,\r\n            message: `network error`,\r\n        }\r\n        return Promise.reject(o);\r\n    });\r\n    if (response.status != expects) {\r\n        let o: APIError = {\r\n            response: response,\r\n            message: `expected ${expects} got ${response.status}`,\r\n        }\r\n        return Promise.reject(o);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nexport interface TokenPair {\r\n    accessToken: string\r\n    refreshToken: string\r\n}\r\n\r\nexport interface Response {\r\n    data: Array<any>\r\n    token: string\r\n}\r\n\r\nconst debug = false;\r\nconst subdomain = debug ? \"dev.\" : \"www.\";\r\nexport const HOST = `https://${subdomain}ourspace.dev/`;\r\nexport const API = `https://${subdomain}ourspace.dev/api/v1/`;\r\nexport const WEBSOCKET_HOST = `wss://event.ourspace.dev/api/v1/socket`;\r\n\r\nexport class NetworkService {\r\n    socket?: WebSocket\r\n    private getToken?: () => Promise<Jwt>;\r\n    constructor() { }\r\n    setGetToken(f: () => Promise<Jwt>) {\r\n        this.getToken = f;\r\n    }\r\n    unsetGetToken() {\r\n        this.getToken = undefined;\r\n    }\r\n    async getHeaders(): Promise<any> {\r\n        console.log(\"[api] get headers...\")\r\n        if (this.getToken) {\r\n            let jwt = await this.getToken();\r\n            return {\r\n                'Authorization': 'Bearer ' + jwt.encoded,\r\n            }\r\n        }\r\n        return Promise.resolve({});\r\n    }\r\n\r\n    timer?: NodeJS.Timeout\r\n    retryFactor: number = 1\r\n\r\n    async closeWebSocket() {\r\n        this.socket = undefined;\r\n    }\r\n\r\n    setupSocket(token?: string) {\r\n        this.socket = token ? new WebSocket(WEBSOCKET_HOST, [\"Bearer\", token]) : new WebSocket(WEBSOCKET_HOST);\r\n        this.socket.addEventListener('open', (event) => {\r\n            console.log(\"[NetworkService] opened socket connection\");\r\n            //new Notification(`Connected to event server`, {});\r\n            this.retryFactor = 1;\r\n        });\r\n        this.socket.addEventListener('close', (ev) => {\r\n            console.log(\"[socket] close: \", JSON.stringify(ev))\r\n            //new Notification(`Disconnected from event server`, {});\r\n            this.socket = undefined;\r\n            if (this.retryFactor < 10) {\r\n                this.retryFactor += .8;\r\n            }\r\n            console.log(\"[NetworkService] retry scale: \", this.retryFactor, (1000 * this.retryFactor) / 1000)\r\n            this.timer = setTimeout(() => this.initWebSocket(), 1000 * this.retryFactor);\r\n        });\r\n        this.socket.addEventListener('error', (ev) => {\r\n            console.log(\"[socket] error: \", JSON.stringify(ev))\r\n        })\r\n        this.socket.addEventListener('message', (ev) => {\r\n            console.log(\"[socket] message: \", JSON.stringify(ev.data))\r\n        })\r\n        return this.socket;\r\n    }\r\n\r\n    getSocket(): WebSocket | undefined {\r\n        return this.socket;\r\n    }\r\n\r\n    async initWebSocket(): Promise<WebSocket> {\r\n        if (this.socket) {\r\n            return this.socket;\r\n        }\r\n\r\n        console.log(\"[NetworkService] trying socket connection ...\");\r\n        try {\r\n            return this.setupSocket(this.getToken ? await this.getToken().then(t => t.encoded) : undefined);\r\n        } catch {\r\n            return this.setupSocket(undefined);\r\n        }\r\n        //let token = this.getToken ? this.getToken().then(t => this.setupSocket(t.encoded)) : this.setupSocket(undefined);\r\n        //this.setupSocket(token ?? undefined);\r\n        //return this.socket!;\r\n    }\r\n\r\n    basicGet(path: string, args: any, expects: number): Promise<any> {\r\n        const encodedArgs = args ? serialize(args) : undefined;\r\n        path = encodedArgs ? (path + \"?\" + encodedArgs) : path;\r\n        return http(API + path, {\r\n            method: 'GET',\r\n        }, expects);\r\n    }\r\n    basicPost(path: string, json: any, expects: number, headers: any = {}): Promise<any> {\r\n        return http(API + path, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(json),\r\n            headers: headers\r\n        }, expects)\r\n    }\r\n    endpointGet(path: string, args: any, expects: number): Promise<any> {\r\n        const encodedArgs = args ? serialize(args) : undefined;\r\n        path = encodedArgs ? (path + \"?\" + encodedArgs) : path;\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            method: \"GET\",\r\n            headers: h,\r\n        }, expects))\r\n    }\r\n    endpointPost(path: string, json: any, expects: number): Promise<any> {\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            headers: h,\r\n            method: \"POST\",\r\n            body: JSON.stringify(json)\r\n        }, expects));\r\n    }\r\n    endpointPostFile(path: string, file: File, expects: number): Promise<any> {\r\n        let formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            headers: h,\r\n            method: \"POST\",\r\n            body: formData,\r\n        }, expects));\r\n    }\r\n    endpointPostEx(path: string, json: any, args: any, expects: number): Promise<any> {\r\n        const encodedArgs = args ? serialize(args) : undefined;\r\n        path = encodedArgs ? (path + \"?\" + encodedArgs) : path;\r\n        return this.getHeaders().then(h => http(API + path, {\r\n            headers: h,\r\n            method: \"POST\",\r\n            body: JSON.stringify(json)\r\n        }, expects));\r\n    }\r\n}\r\n\r\nfunction serialize(obj: any, prefix: any = undefined): any {\r\n    var str = [];\r\n    for (var p in obj) {\r\n        if (obj.hasOwnProperty(p)) {\r\n            var k = prefix ? prefix + \"[\" + p + \"]\" : p, v = obj[p];\r\n            str.push(typeof v == \"object\" ? serialize(v, k) : encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\r\n        }\r\n    }\r\n    return str.join(\"&\");\r\n}\r\n\r\n\r\nexport class ObservableRequestState {\r\n    @observable isFetching: boolean = false\r\n    @observable requests: number = 0\r\n    @observable error?: APIError\r\n    @observable ignore: boolean = false\r\n    wrap(f: () => Promise<any>): Promise<any> {\r\n        if (this.isFetching) {\r\n            console.log(\"[networkwrapper] rejecting, already fetching\")\r\n            return Promise.reject();\r\n        }\r\n        this.isFetching = true;\r\n        return f().catch((t: APIError) => {\r\n            this.error = t;\r\n            throw t;\r\n        }).finally(() => this.isFetching = false)\r\n    }\r\n\r\n    loadedOk(): boolean {\r\n        return this.isFetching == false && !this.error;\r\n    }\r\n}","import React from 'react';\r\nimport { observable, action, autorun, IObservableArray } from 'mobx';\r\nimport { useLocalStore } from 'mobx-react';\r\nimport { AccountStore, UserRef } from './user';\r\nimport { NetworkService, TokenPair, AccessJwt, Jwt } from '../service/api';\r\nimport JwtDecode from 'jwt-decode';\r\nimport { IEvent, join } from 'model/net';\r\nimport {\r\n    ILoginResponse,\r\n    ILoginRequest,\r\n    IBoardCreate,\r\n    IComment,\r\n    IBoard,\r\n    IThread,\r\n    ICommunityUserRef,\r\n    IBoardSubscription,\r\n    ICommunitySelectRequest,\r\n    ICommunitySelectResponse,\r\n    ICommentReplyEvent\r\n} from 'model/compiled'\r\n\r\nconst hydrateAppStore = (): AppStore => {\r\n    // load a new app object, or\r\n    // if we can find one, load it from local storage\r\n    let o = window.localStorage.getItem(\"app\")\r\n    if (!o) {\r\n        return new AppStore(undefined, undefined);\r\n    }\r\n    let json = JSON.parse(o);\r\n    return new AppStore(json['access'], json['refresh']);\r\n}\r\n\r\nexport class AppStore {\r\n    protected _api: NetworkService = new NetworkService();\r\n\r\n    @observable UIanimatedHeader: boolean = true;\r\n    @observable UIconstrainContainer: boolean = true;\r\n    @observable UIshowEventDebug: boolean = false;\r\n    @observable UIdarkTheme: boolean = false;\r\n\r\n\r\n    @observable protected _access?: AccessJwt;\r\n    @observable protected _refresh?: Jwt;\r\n    \r\n    @observable isBottomOfPage: boolean = false;\r\n    @observable displayableEvent: IObservableArray<IEvent> = observable.array([]);\r\n    @observable commentReplyEvent: IObservableArray<ICommentReplyEvent> = observable.array([]);\r\n\r\n    @observable moderate?: IComment | IBoard | IThread | ICommunityUserRef;\r\n    @observable loginOverlay: boolean = false;\r\n\r\n    @observable trending: IObservableArray<IBoard> = observable.array([\r\n        { uId: 'news' },\r\n        { uId: 'pics' },\r\n        { uId: 'development' },\r\n        { uId: 'wiki' },\r\n    ]);\r\n\r\n    @observable defaults: IObservableArray<IBoardSubscription> = observable.array([\r\n        { boardId: 'news' },\r\n        { boardId: 'pics' },\r\n        { boardId: 'development' },\r\n        { boardId: 'wiki' },\r\n    ]);\r\n    @observable themeName: string = \"light\";\r\n\r\n    isDarkTheme(): boolean {\r\n        return this.themeName == 'dark';\r\n    }\r\n\r\n    async openSocket() {\r\n        Notification.requestPermission();\r\n        await this._api.initWebSocket().then(t => t.addEventListener('message', (ev) => {\r\n            //debugger;\r\n            let event: IEvent = JSON.parse(ev.data);\r\n            this.addEvent(event);\r\n        }))\r\n    }\r\n\r\n    addEvent(data: IEvent) {\r\n        //debugger;\r\n        let nop: NotificationOptions = {}\r\n        switch (data.entityId) {\r\n            case \"comment.reply\":\r\n                let commentReply: ICommentReplyEvent = data.data;\r\n                this.commentReplyEvent.push();\r\n                this.displayableEvent.push(data);\r\n                if (this.loggedIn && this.active?.username == commentReply.comment?.user?.username)\r\n                    break;\r\n                new Notification(\r\n                    `@${commentReply.comment?.user?.username ?? \"unknown\"} replied to your comment with: \"${commentReply.comment?.content ?? \"\"}\"\\n`, {});\r\n                break;\r\n            case \"comment.moderate\":\r\n                break\r\n            case \"comment.user.mention\":\r\n                new Notification(\r\n                    `@someone mentioned you in a thread`);\r\n                break\r\n            case \"board.subscribe\":\r\n                new Notification(\r\n                    `You subscribed to a community`, {});\r\n                break\r\n            case \"board.unsubscribe\":\r\n                new Notification(\r\n                    `You unsubscribed to a community`, {});\r\n                break\r\n            case \"comment.vote\":\r\n                new Notification(\r\n                    `You voted on a comment`, {});\r\n                this.displayableEvent.push(data);\r\n            case \"thread.vote\":\r\n                new Notification(\r\n                    `Thread vote`, {});\r\n                this.displayableEvent.push(data);\r\n            case \"thread.crosspost\":\r\n                this.displayableEvent.push(data);\r\n                break;\r\n            case \"thread.reply.crosspost\":\r\n                new Notification(\r\n                    `Your thread was crossposted`, {});\r\n                break;\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        accessToken: string | undefined,\r\n        refreshToken: string | undefined) {\r\n        console.log(\"[app store] constructed with tokens =>\", accessToken, refreshToken)\r\n        //document.title = \"ourspace\";\r\n\r\n        this.loadOther();\r\n        this.openSocket();\r\n\r\n        if (accessToken == undefined || refreshToken == undefined) {\r\n            return\r\n        }\r\n\r\n        this.setupLogin(accessToken, refreshToken);\r\n    }\r\n\r\n    loadOther() {\r\n        this.api.endpointGet(\"communities/default\", {}, 200)\r\n            .then((t: ICommunitySelectResponse) => {\r\n                if (t.data)\r\n                    this.defaults = observable.array(t.data.map(t => {\r\n                        let o: IBoardSubscription = t;\r\n                        o.boardId = t.uId;\r\n                        return o;\r\n                    }));\r\n            })\r\n        this.api.endpointGet(\"communities/trending\", {}, 200)\r\n            .then((t: ICommunitySelectResponse) => {\r\n                if (!t.data)\r\n                    return;\r\n                this.trending = observable.array(t.data);\r\n            }).catch(e => { });\r\n    }\r\n\r\n    accounts: Array<UserRef> = []\r\n    auto = autorun((r) => this.persist())\r\n    get api(): NetworkService {\r\n        return this._api;\r\n    }\r\n\r\n    @observable active?: AccountStore | null;\r\n    get loggedIn(): boolean {\r\n        return this.active != null;\r\n    }\r\n\r\n    toJson(): any {\r\n        return JSON.stringify({\r\n            'access': this._access?.encoded,\r\n            'refresh': this._refresh?.encoded,\r\n            //'accounts': this.accounts,\r\n            'active': this.active?.toJson(),\r\n        });\r\n    }\r\n\r\n    persist() {\r\n        console.log(\"persisting\")\r\n        if (this.active) { }//trick mobx\r\n        window.localStorage.setItem(\"app\", this.toJson())\r\n    }\r\n\r\n    @action\r\n    logout(): Promise<void> {\r\n        //delete refresh token\r\n        this.tearDownLogin();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @action\r\n    signup(name: string, email: string, key: string): Promise<any> {\r\n        if (name.length < 1 || email.length < 1) {\r\n            return Promise.reject();\r\n        }\r\n        return this.api.endpointPost(\r\n            \"auth/signup\",\r\n            {\r\n                username: name,\r\n                email: email,\r\n                key: key,\r\n            },\r\n            200\r\n        ).then(() => {\r\n            console.log(\"[app store] signed up successfully\")\r\n            this.login(name, key);\r\n        });//.catch(() => false)\r\n    }\r\n\r\n    @action\r\n    login(name: string, key: string): Promise<void> {\r\n        return this.api.endpointPost(\r\n            \"auth/jwt/login\",\r\n            { username: name, password: key } as ILoginRequest,\r\n            200,\r\n        ).then((json: ILoginResponse) => {\r\n            console.log(\"[app store] logged in\");\r\n            this.setupLogin(json.tokens!.accessToken!, json.tokens!.refreshToken!);\r\n        })\r\n    }\r\n\r\n    private tearDownLogin() {\r\n        this._refresh = undefined;\r\n        this._access = undefined;\r\n        this.active = undefined;\r\n        this.api.unsetGetToken();\r\n        this.persist();\r\n    }\r\n\r\n    private setupLogin(accessToken: string, refreshToken: string) {\r\n        this._access = new AccessJwt(accessToken);\r\n        this._refresh = new Jwt(refreshToken);\r\n        this.api.setGetToken(this.getTokenCallback);\r\n        this.persist();\r\n\r\n        this.spotlightQuery(\"\");\r\n\r\n        this.api.closeWebSocket();\r\n        this.openSocket();\r\n        this.active = new AccountStore(this, this._access.token.uid);\r\n    }\r\n\r\n    protected getTokenCallback = (): Promise<Jwt> => {\r\n        //console.log(\"[app] getting token\");\r\n        if (!this._access) {\r\n            throw \"error\";\r\n        }\r\n        if (this._access?.expired()) {\r\n            console.log(\"[app] getting NEW access token\");\r\n            return this.api.basicPost(\"auth/jwt/renewtoken\", {\r\n                'RefreshToken': this._refresh?.encoded,\r\n            }, 200, {\r\n                'Authorization': 'Bearer ' + this._access?.encoded\r\n            }).then((json: TokenPair) => {\r\n                console.log(\"[app] got new access token\")\r\n                this._access = new AccessJwt(json.accessToken);\r\n                this.persist()\r\n                return this._access!;\r\n            }).catch(t => {\r\n                if (t.response == 401) {\r\n                    // new refresh token required\r\n                    // set user logged out\r\n                    this.active!.invalidToken = true;\r\n                }\r\n                throw t;\r\n            });\r\n        }\r\n        console.log(\"[app] using existing access token\");\r\n        return Promise.resolve(this._access);\r\n    }\r\n\r\n    @observable UIShowSpotlight: boolean = false\r\n\r\n    @observable communitySearch?: ICommunitySelectResponse\r\n\r\n    @action\r\n    spotlightQuery(s: string): Promise<any> {\r\n\r\n        let o: ICommunitySelectRequest = {\r\n            query: s,\r\n            limit: 5,\r\n        }\r\n\r\n        this.api.endpointGet(\"communities/search\", o, 200).then((t: ICommunitySelectResponse) => {\r\n            this.communitySearch = t;\r\n            //this.communitySearch = join(this.communitySearch ?? { data: [], token: \"\" }, t);\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @action\r\n    showSpotlight() {\r\n        this.UIShowSpotlight = true;\r\n    }\r\n\r\n    @action\r\n    createCommunity(o: IBoardCreate): Promise<any> {\r\n        return this.api.endpointPost(\"createcommunity\", o, 200);\r\n    }\r\n\r\n    getCommunityLink(boardId: string) {\r\n        return `/+${boardId}/`\r\n    }\r\n}\r\n\r\nfunction useClassStore<T>(init: T): T {\r\n    const [store] = React.useState<T>(init)\r\n    return store\r\n}\r\n\r\nconst appStoreContext = React.createContext<AppStore | null>(null);\r\nexport const AppStoreProvider: React.FC = (props) => {\r\n    const store = hydrateAppStore();\r\n    //const store = useLocalStore(() => hydrateAppStore());\r\n    return (\r\n        <appStoreContext.Provider value={store}>\r\n            {props.children}\r\n        </appStoreContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useAppStore = () => {\r\n    const store = React.useContext(appStoreContext)\r\n    if (!store) {\r\n        throw new Error('appStoreContext must be used within a StoreProvider.')\r\n    }\r\n    return store\r\n}","import React from 'react';\r\nimport { observable, computed, action, IObservableArray, autorun, IReactionDisposer } from 'mobx';\r\nimport { observer, useLocalStore, useAsObservableSource, Provider } from \"mobx-react\";\r\nimport { AppStore, useAppStore } from \"stores/app\";\r\nimport { ObservableRequestState, Response, APIError } from \"service/api\";\r\nimport {\r\n    IThread,\r\n    IBoard,\r\n    IComment,\r\n    IThreadSelectFilters,\r\n    ThreadSelectFilters,\r\n    IThreadCreateRequest,\r\n    IThreadsSelectResponse,\r\n    IThreadsSelectResponseWithBoardContext,\r\n    IEntityVoteRequest,\r\n    IVote\r\n} from 'model/compiled';\r\n\r\nimport { useHistory } from 'react-router';\r\nexport type {\r\n    IThread as Thread,\r\n    IUser as User,\r\n    IBoard as Board\r\n} from 'model/compiled';\r\n\r\nexport class BoardStore extends ObservableRequestState {\r\n    app: AppStore\r\n    token?: string\r\n    boardId: string\r\n\r\n    @observable overlayThread?: IThread\r\n\r\n    //\"_masonry\" \r\n    @observable UIdatalayout: number = 0;\r\n    @observable UIcontainerFluid: boolean = true;\r\n    @observable backgroundImage?: string;// = `url(\"https://dev.ourspace.dev/res/bg-2.png\")`;\r\n    headerImage?: string = `url(https://source.unsplash.com/pCcGpVsOHoo/1090x130)`;\r\n    //\"url(https://source.unsplash.com/collection/street-photography/1280x200)\"; //\"url('https://dev.ourspace.dev/res/bg-1.png')\"\r\n    iconImage?: string;\r\n\r\n    //`url(\"https://source.unsplash.com/collection/wallpapers/1280x800\")`;\r\n    backgroundRepeat: string = \"repeat\";\r\n    backgroundSize: string = 'unset'; //\"cover\";\r\n\r\n    @observable info?: IBoard\r\n    @observable debug: boolean = false\r\n    @observable filters: IThreadSelectFilters = {\r\n        sortDirection: ThreadSelectFilters.SortDirection.DESC,\r\n        rankMethod: ThreadSelectFilters.Method.TOP,\r\n        limit: 25,\r\n        query: \"\",\r\n        page: 0,\r\n        //createdStart: 0,\r\n        //createdEnd: 0,\r\n        //token: \"\"\r\n    }\r\n\r\n    isConstrained() {\r\n        return this.app.UIconstrainContainer;// || !this.UIcontainerFluid;\r\n    }\r\n\r\n    filtersPrev?: IThreadSelectFilters\r\n    autoQuery: IReactionDisposer = autorun((r) => {\r\n        //history.push({ pathname: \"\" })\r\n        console.log(\"autorun => \", this.filters);\r\n        this.filtersPrev = this.filters;\r\n\r\n        // diff keys\r\n        Object.keys(this.filters).forEach(t => {\r\n            //if (this.filters[t] != this.filtersPrev[t]) {}\r\n            console.log(\"key => \", t);\r\n        });\r\n\r\n        if (this.filters.rankMethod) {\r\n            //const history = useHistory();\r\n            //history.push(\"test\");\r\n        }\r\n\r\n    })\r\n\r\n    static getDefaultQueryParams(): string {\r\n        let o: IThreadSelectFilters = {}\r\n        return Object.entries(o).map(([key, value]) => `${key}=${value}`).join(\"&\");\r\n    }\r\n\r\n    getQueryParams(): string {\r\n        return Object.entries(this.filters).map(([key, value]) => `${key}=${value}`).join(\"&\");\r\n    }\r\n\r\n    @observable data: IObservableArray<IThread> = observable.array([])\r\n    constructor(app: AppStore, boardId: string) {\r\n        super();\r\n\r\n        console.log(\"[boardstore] init => \", boardId);\r\n        this.app = app;\r\n        this.boardId = boardId;\r\n        //this.filters.boardId = boardId;\r\n        this.request();\r\n    }\r\n\r\n    @action\r\n    unsubscribe(): Promise<void> {\r\n        if (!this.info) {\r\n            return Promise.reject();\r\n        }\r\n        return this.app.api.endpointPostEx(\"board/subscription\", null, {\r\n            action: \"unsubscribe\",\r\n            boardId: this.boardId,\r\n        }, 200).then(t => {\r\n            this.info!.isMember = false;\r\n        })\r\n    }\r\n\r\n    @action\r\n    subscribe(): Promise<void> {\r\n        if (!this.info) {\r\n            return Promise.reject();\r\n        }\r\n        return this.app.api.endpointPostEx(\"board/subscription\", null, {\r\n            action: \"subscribe\",\r\n            boardId: this.boardId,\r\n        }, 200).then(t => {\r\n            this.info!.isMember = true;\r\n        });\r\n    }\r\n\r\n    getCollection(s: string): string {\r\n        switch (s) {\r\n            case \"all\":\r\n                return \"all\"\r\n            case \"popular\":\r\n                return \"collections/all\"\r\n            default:\r\n                return \"board/threads\"\r\n        }\r\n    }\r\n\r\n    @action\r\n    request(): Promise<void> {\r\n        this.token = undefined;\r\n        this.error = undefined;\r\n        this.ignore = false;\r\n        this.filters.page = 0;\r\n\r\n        const withContext = this.info == null && this.boardId != 'all';\r\n        return this.wrap(() => this.app.api.endpointGet(\r\n            this.getCollection(this.boardId), {\r\n            ...{\r\n                'withContext': withContext,\r\n                'boardId': this.boardId,\r\n                'token': this.token,\r\n            }, ...this.filters\r\n        }, 200).then((res: any) => {\r\n            console.log(\"[board] got data\");\r\n            if (withContext) {\r\n                this.info = res.board;\r\n                res = res.threads;\r\n            }\r\n            this.token = res.token;\r\n            this.data = observable.array<IThread>(res.data);\r\n            return\r\n        }))\r\n    }\r\n\r\n    @action\r\n    requestMore() {\r\n        this.ignore = true;\r\n        this.filters!.page!++;\r\n        return this.wrap(() => this.app.api.endpointGet(this.getCollection(this.boardId), {\r\n            ...{\r\n                'boardId': this.boardId,\r\n                'sort': this.filters,\r\n                'token': this.token,\r\n            }, ...this.filters\r\n        }, 200).then((res: Response) => {\r\n            this.token = res.token;\r\n            if (res.data?.length > 0)\r\n                this.data.push(...res.data);\r\n        })).finally(() => this.ignore = false)\r\n    }\r\n\r\n    @action\r\n    event(event: string) {\r\n        this.app.api.endpointPost(`board/event`, { boardId: this.boardId, action: event, }, 200);\r\n    }\r\n\r\n    @action\r\n    voteThread(threadId: string, action: string): Promise<IVote> {\r\n        if (!this.app.loggedIn)\r\n            return Promise.reject();\r\n        let v: IVote = {\r\n            type: 1,\r\n            typeCode: action,\r\n        }\r\n        let vote: IEntityVoteRequest = {\r\n            type: \"thread\",\r\n            entityId: threadId,\r\n            vote: v,\r\n        }\r\n        return this.app.api.endpointPost(\"board/thread/vote\", vote, 200);\r\n    }\r\n\r\n    createThread(s: IThreadCreateRequest): Promise<any> {\r\n        return this.app.api.endpointPost(\"board/newthread?boardId=\" + s.boardId, s, 200);\r\n    }\r\n\r\n\r\n    getThreadLink(threadId: string) {\r\n        return `/+${this.boardId}/${threadId}`;\r\n    }\r\n\r\n    @action\r\n    uploadIcon(file: File): Promise<any> {\r\n        return this.app.api.endpointPostFile(`board/media?area=icon&boardId=${this.boardId}`, file, 200);\r\n    }\r\n\r\n    @action\r\n    uploadBanner(file: File): Promise<any> {\r\n        return this.app.api.endpointPostFile(`board/media?area=banner&boardId=${this.boardId}`, file, 200);\r\n    }\r\n\r\n    moderateThread() {\r\n        this.app.moderate = this.info; \r\n    }\r\n\r\n    moderateComment(c: IComment) {\r\n        this.app.moderate = c; \r\n    }\r\n\r\n    @action setOverlay(t: IThread) {\r\n        console.log(\"[store/setOverlay] => \", t)\r\n        this.overlayThread = t;\r\n    }\r\n}\r\n\r\nexport const boardStoreContext = React.createContext<BoardStore | null>(null);\r\nexport const BoardStoreProvider: React.FC<{ boardId: string }> = ({ boardId, children }) => {\r\n\r\n    console.log(\"[BoardStoreProvider] called with => \", boardId)\r\n    const app = useAppStore();\r\n    const store = new BoardStore(app, boardId);\r\n\r\n    /*\r\n    const [store, setStore] = React.useState<BoardStore>();\r\n    \r\n    React.useEffect(() => {\r\n        console.log(\"[BoardStoreProvider] creating new state for \", boardId);\r\n        setStore(undefined);\r\n        setStore(new BoardStore(app, boardId));\r\n    }, [app, boardId]);\r\n    */\r\n\r\n    //const [store] = React.useState(new BoardStore(app, boardId))\r\n    //const store = useLocalStore<BoardStore>(() => new BoardStore(app, props.boardId));\r\n    if (store) {\r\n        return (\r\n            <boardStoreContext.Provider value={store}>\r\n                {children}\r\n            </boardStoreContext.Provider>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            Loading\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const useBoardStore = (): BoardStore => {\r\n    const store = React.useContext(boardStoreContext)\r\n    if (!store) {\r\n        throw new Error('useBoardStore must be used within a \"boardStore\" StoreProvider.')\r\n    }\r\n    return store\r\n}\r\n\r\nexport const useBoardStoreUnsafe = (): BoardStore | null => {\r\n    return React.useContext(boardStoreContext)\r\n}","import React, { useEffect } from 'react';\r\nimport { useLocalStore } from 'mobx-react';\r\nimport { AppStore, useAppStore } from \"./app\";\r\nimport { ObservableRequestState, APIError, Response } from \"service/api\"\r\nimport { useBoardStore, useBoardStoreUnsafe, BoardStore, Board, Thread } from \"./board\";\r\nimport {\r\n    IThread, IThreadWithBoardContext,\r\n    ICommentSelectGraphResponse, IComment, ICommentNode,\r\n    ICommentCreateRequest, ICommentSelectResponse,\r\n    IEntityVoteRequest, IVote, IThreadsSelectResponse\r\n} from 'model/compiled'\r\nimport { observable } from 'mobx';\r\n\r\ninterface ThreadResponse {\r\n    thread: Thread,\r\n    board: Board,\r\n    comments: Array<any>\r\n}\r\n\r\nexport class ThreadStore extends ObservableRequestState {\r\n    app: AppStore\r\n    board?: BoardStore\r\n    threadId: string\r\n    @observable\r\n    requests: number = 0\r\n    threadctx?: IThreadWithBoardContext\r\n    @observable\r\n    thread?: IThread\r\n    //@observable\r\n    //comments?: ICommentSelectResponse\r\n    @observable\r\n    commentsGraph?: ICommentSelectGraphResponse\r\n    flatComments: Array<IComment> = [];\r\n\r\n    constructor(app: AppStore, threadId: string, board?: BoardStore, init?: IThreadWithBoardContext) {\r\n        super();\r\n        this.board = board;\r\n        this.app = app;\r\n        this.threadId = threadId;\r\n        console.log(\"[thread-store] => construct\");\r\n        this.load();\r\n    }\r\n\r\n    event(event: string) {\r\n        this.app.api.endpointPost(`board/event/thread`, { threadId: this.threadId, action: event }, 200);\r\n    }\r\n\r\n    addComment(content: string, parentId?: string): Promise<void> {\r\n        let comment: IComment = {\r\n            content: content,\r\n            parentId: parentId,\r\n        }\r\n        let wrapper: ICommentCreateRequest = {\r\n            threadId: this.threadId,\r\n            comment: comment,\r\n        }\r\n        // this is a bit silly\r\n        //this.ignore = true;\r\n        //return this.wrap(() => this.app.api.endpointPost(\"board/thread/comment\", wrapper, 200)\r\n        //    .then(t => this.insertComment(comment))\r\n        //    .finally(() => this.ignore = false));\r\n        return this.app.api.endpointPost(\"board/thread/comment\", wrapper, 200)\r\n            .then(t => this.insertComment(comment))\r\n    }\r\n\r\n    insertComment(comment: IComment) {\r\n        if (!comment.parentId) {\r\n            this.flatComments.push(comment);\r\n        }\r\n    }\r\n\r\n    editComment(content: string, commentId: string): Promise<void> {\r\n        if (this.isFetching) {\r\n            return Promise.reject();\r\n        }\r\n        this.isFetching = true;\r\n        return this.app.api.endpointPost(\"board/thread/comment\", {}, 200).\r\n            then((t: IComment) => {\r\n                //inject into data\r\n            }).finally(() => this.isFetching = false);\r\n    }\r\n\r\n    voteThread(action: string): Promise<any> {\r\n        return this.board?.voteThread(this.threadId, action) ?? Promise.reject();\r\n    }\r\n\r\n    loadComments(more: boolean = false) { }\r\n\r\n    voteComment(commentId: string, action: string): Promise<void> {\r\n        let v: IVote = {\r\n            type: 1,\r\n            typeCode: action,\r\n        }\r\n        let vote: IEntityVoteRequest = {\r\n            type: \"comment\",\r\n            entityId: commentId,\r\n            vote: v,\r\n        }\r\n        return this.app.api.endpointPost(\"board/thread/comment/vote\", vote, 200).finally(() => this.isFetching = false);\r\n    }\r\n\r\n    _flattenComments = (\r\n        map: Array<IComment>,\r\n        v: {\r\n            [k: string]: ICommentNode\r\n        }) => {\r\n        for (let i in v) {\r\n            let n = v[i]\r\n            if (!n.comment) {\r\n                continue\r\n            }\r\n            map.push(n.comment)\r\n            if (n.children) {\r\n                this._flattenComments(map, n.children)\r\n            }\r\n        }\r\n    }\r\n\r\n    load(): Promise<void> {\r\n        const withContext: boolean = (this.thread == undefined);\r\n        this.event(\"open\");\r\n        return this.wrap(() => this.app.api.endpointGet(\"board/thread\", {\r\n            'threadId': this.threadId,\r\n            'withContext': withContext,\r\n        }, 200).then((t: IThreadWithBoardContext) => {\r\n            this.thread = t.thread ?? undefined;\r\n            //this.comments = t.comments ?? undefined;\r\n            this.commentsGraph = t.commentsGraph ?? undefined;\r\n            if (this.commentsGraph) {\r\n                this._flattenComments(this.flatComments, this.commentsGraph!.data!)\r\n            }\r\n        }))\r\n    }\r\n\r\n    requestMore(commentId: string): Promise<void> {\r\n        return Promise.reject();\r\n    }\r\n}\r\n\r\nconst threadStoreContext = React.createContext<ThreadStore | null>(null);\r\nexport const ThreadStoreProvider: React.FC<{ threadId: string, initData?: Thread }> = ({ children, threadId, initData }) => {\r\n    //const store = useLocalStore(() => new ThreadStore(props.app));\r\n    const app = useAppStore();\r\n    const board = useBoardStoreUnsafe();\r\n    const [store, setStore] = React.useState<ThreadStore>();\r\n    React.useEffect(() => {\r\n        setStore(new ThreadStore(app, threadId, board ?? undefined, undefined));\r\n    }, [app, board, threadId]);\r\n\r\n    if (store) {\r\n        return <threadStoreContext.Provider value={store}>\r\n            {children}\r\n        </threadStoreContext.Provider>\r\n    }\r\n    return (\r\n        <>\r\n            Loading...\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useThreadStore = () => {\r\n    const store = React.useContext(threadStoreContext)\r\n    if (!store) {\r\n        throw new Error('threadStoreContext must be used within a ThreadStoreProvider')\r\n    }\r\n    return store\r\n}","import React from 'react';\r\n\r\nimport { Editor as DraftJSEditor, EditorState, convertFromHTML, convertToRaw } from 'draft-js';\r\nimport { Navbar, Nav, Container, Button, Row, Col, Modal, Overlay, Spinner } from 'react-bootstrap';\r\nimport Editor from 'rich-markdown-editor';\r\nimport { dark } from './theme';\r\n\r\nimport { faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const RichEditor: React.FC = () => {\r\n    const [state, setState] = React.useState<EditorState>(() => EditorState.createEmpty())\r\n    return (\r\n        <DraftJSEditor editorState={state} onChange={(editorState) => setState(editorState)} />\r\n    )\r\n}\r\n\r\nexport const TextEditor: React.FC<{\r\n    source?: string,\r\n    cancelText: string,\r\n    acceptText: string,\r\n    buttons?: any,\r\n    onAccept: (data: any) => Promise<any>,\r\n    onCancel?: () => any\r\n}> = ({ source, onAccept, onCancel, buttons }) => {\r\n    //const [state, setState] = React.useState<EditorState>(() => EditorState.createEmpty())\r\n    const [state, setState] = React.useState<{\r\n        value: string,\r\n        readOnly: boolean,\r\n        template: boolean\r\n    }>({\r\n        readOnly: false,\r\n        template: false,\r\n        //dark: localStorage.getItem(\"dark\") === \"enabled\",\r\n        value: \"\",\r\n    });\r\n    const [isWaiting, setWaiting] = React.useState<boolean>(false);\r\n    const target = React.useRef(null);\r\n\r\n    return (\r\n        <div className=\"border rounded px-2 py-2 d-flex flex-row\" /*style={{ position: 'relative' }}*/ ref={target}>\r\n            <div style={{\r\n                visibility: isWaiting ? \"visible\" : \"hidden\",\r\n                position: 'fixed',\r\n                top: 0, right: 0, left: 0, bottom: 0,\r\n                pointerEvents: 'none',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                backgroundColor: 'rgba(255, 255, 255, .5)'\r\n\r\n            }}>\r\n                <Spinner animation=\"border\" variant=\"primary\" />\r\n            </div>\r\n            <div className=\"flex-grow-1 pl-3 mx-2\">\r\n                <Editor\r\n                    //theme={dark}\r\n                    defaultValue={source}\r\n                    onChange={(v) => setState({ ...state, value: v() })}\r\n                    //onSave={(v) => v()}\r\n                    template={true}\r\n                />\r\n            </div>\r\n            <div className=\"d-flex flex-column justify-content-end button-column\">\r\n                {onCancel && <Button variant=\"outline-dark\" onClick={() => onCancel()} >\r\n                    <FontAwesomeIcon icon={faTimes} />\r\n                </Button>}\r\n                <Button className=\"\" variant=\"primary\" onClick={() => {\r\n                    setWaiting(true);\r\n                    onAccept(state.value).finally(() => setWaiting(false))\r\n                }} >\r\n                    <FontAwesomeIcon icon={faPaperPlane} />\r\n                </Button>\r\n                {buttons}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TextEditorDraftJs: React.FC<{ onAccept: (data: any) => Promise<any>, onCancel?: () => any }> = ({ onAccept }) => {\r\n    const [state, setState] = React.useState<EditorState>(() => EditorState.createEmpty())\r\n    const [isWaiting, setWaiting] = React.useState<boolean>(false);\r\n    const target = React.useRef(null);\r\n\r\n    return (\r\n        <div className=\"border rounded p-3\" style={{ position: 'relative' }} ref={target}>\r\n            <div style={{\r\n                visibility: isWaiting ? \"visible\" : \"hidden\",\r\n                position: 'fixed',\r\n                top: 0, right: 0, left: 0, bottom: 0,\r\n                pointerEvents: 'none',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                backgroundColor: 'rgba(255, 255, 255, .5)'\r\n\r\n            }}>\r\n                <Spinner animation=\"border\" variant=\"primary\" />\r\n            </div>\r\n            <DraftJSEditor\r\n                placeholder={\"Leave a comment\"}\r\n                editorState={state} onChange={(editorState) => setState(editorState)} />\r\n            <Button onClick={() => {\r\n                setWaiting(true);\r\n                onAccept(convertToRaw(state.getCurrentContent())).finally(() => setWaiting(false))\r\n            }} >Accept</Button>\r\n        </div >\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from \"classnames\";\r\nimport { Spinner, OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { IVote } from 'model/compiled';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//😀 😃 😄 😁 😆 😅 😂 🤣 ☺️ 😊 😇 🙂 🙃 😉\r\n\r\nconst codeMap: { [k: string]: string } = {\r\n    'up': '👍',\r\n    'down': '👎',\r\n    'funny': '🤣',\r\n    'crazy': '🤪',\r\n    'thinking': '🤔',\r\n    'love': '❤️',\r\n    'angry': '😠',\r\n    'vangry': '👿'\r\n}\r\n\r\nexport const InlineVoter: React.FC<{\r\n    className?: string\r\n    size?: string\r\n    preview?: boolean\r\n    onClick: (a: string) => Promise<any>,\r\n    table: Array<string>,\r\n    votes?: { [k: string]: number },\r\n    value: string\r\n}> = ({ onClick, preview, value, votes, table, className, size }) => {\r\n\r\n    const [state, setLoading] = React.useState(false);\r\n    const [valueState, setValue] = React.useState<string>(value);\r\n    const [pop, setPop] = React.useState<boolean>(false);\r\n\r\n    const fire = (v: string): Promise<any> => {\r\n        const nv = (valueState == v) ? \"unset\" : v;\r\n        setLoading(true);\r\n        return onClick(nv)\r\n            .then((t: IVote) => setValue(nv))\r\n            .catch(t => setLoading(false))\r\n            .finally(() => setLoading(false));\r\n    }\r\n    let overlay = React.useRef(null);\r\n\r\n    const def = \" rounded border\";\r\n    const cls = className ? className + def : def;\r\n\r\n    // https://stackoverflow.com/questions/38467848/react-bootstrap-how-to-manually-close-overlaytrigger\r\n    // https://stackoverflow.com/a/47636953\r\n    return (\r\n        <OverlayTrigger\r\n            rootClose={true}\r\n\r\n            //componentRef={(ref: any) => this.overlay = ref}\r\n            //ref={ref}\r\n            //trigger={[\"hover\", \"focus\"]}\r\n            trigger={preview ? [\"click\"] : [\"hover\", \"focus\"]}\r\n            placement=\"auto\"\r\n            overlay={\r\n                <Popover id={`popover${state}`}>\r\n                    <Popover.Title as=\"h3\">\r\n                        Opinion\r\n                    </Popover.Title>\r\n                    <Popover.Content>\r\n                        {table.map((v, i) => {\r\n                            const isThis = (v == valueState);\r\n                            let count = (votes && votes[v]) ?? 0;\r\n                            return (\r\n                                <button\r\n                                    key={v}\r\n                                    style={{ padding: size }}\r\n                                    type=\"button\" className={\r\n                                        classNames(\"btn btn-sm\",\r\n                                            { \"btn-outline\": !isThis },\r\n                                            { \"btn-outline-primary\": isThis },\r\n                                            { \"selected\": isThis })}\r\n                                    onClick={() => {\r\n                                        fire(v).then(t => document.body.click())\r\n                                        //.then(t => ref!.current!.hide())\r\n                                    }}>\r\n                                    {codeMap[v] ?? \"\"}\r\n                                    <span>{count}</span>\r\n                                </button>\r\n                            );\r\n                        })}\r\n                    </Popover.Content>\r\n                    <Link className=\"px-2\" to=\"/about\"><small>Read more here</small></Link>\r\n                </Popover>\r\n            }\r\n        >\r\n            <div className={cls}\r\n                onMouseLeave={(e) => { }}\r\n                onMouseEnter={(e) => { }} >\r\n                {table.map((v, i) => {\r\n                    if (preview && i > 1) {\r\n                        return;\r\n                    }\r\n                    const isThis = (v == valueState);\r\n                    let count = (votes && votes[v]) ?? 0;\r\n                    //if (!isThis && count > 0) {\r\n                    //    count--;\r\n                    //}\r\n                    return (\r\n                        <button\r\n                            key={v}\r\n                            style={{ padding: size }}\r\n                            type=\"button\" className={\r\n                                classNames(\"btn btn-sm\",\r\n                                    { \"btn-outline\": !isThis },\r\n                                    { \"btn-outline-primary\": isThis },\r\n                                    { \"selected\": isThis })}\r\n                            onClick={() => !preview && fire(v)}>\r\n                            {codeMap[v] ?? \"\"}\r\n                            {count}\r\n                        </button>\r\n                    )\r\n                })}\r\n                {state && <Spinner animation=\"border\" role=\"status\" size=\"sm\" />}\r\n            </div>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport const VerticalVoter: React.FC<{\r\n    table: Array<string>,\r\n}> = ({ table }) => {\r\n    return (\r\n        <div className=\"vote-vertical _d-flex _flex-column _justify-content-around rounded border p-1 overflow-hidden\" style={{ maxHeight: 100 }}>\r\n            {\r\n                /*\r\n                <FontAwesomeIcon icon={faArrowUp} color=\"grey\" />\r\n                <FontAwesomeIcon icon={faArrowDown} color=\"grey\" />\r\n                */\r\n            }\r\n            <div className=\"d-flex flex-column vote-inner\">\r\n                {table.map((v, i) =>\r\n                    <button\r\n                        key={v}\r\n                        className=\"btn btn-outline\"\r\n                        type=\"button\">{codeMap[v] ?? \"\"}</button>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { ObservableRequestState } from \"service/api\";\r\nimport { Spinner, Button } from 'react-bootstrap';\r\nimport { observer } from 'mobx-react';\r\nimport { IconButton } from 'components/button';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const NetworkGateway: React.FC<{ retry: () => any, state: () => ObservableRequestState }> =\r\n    observer(({ retry, state, children }) => {\r\n        return (\r\n            <>\r\n                {(state().isFetching && !state().ignore) || state().error ?\r\n                    <div className=\"d-flex flex-column justify-content-center align-items-center\" style={{\r\n                        minHeight: '50vh'\r\n                    }}>\r\n                        {state().error ? <div>\r\n                            <div>\r\n                                <small>Failed to load something: {JSON.stringify(state().error)}</small>\r\n                            </div>\r\n                            <IconButton icon={faSync} onClick={() => retry()}>Retry</IconButton>\r\n                        </div>\r\n                            : <Spinner animation=\"border\" />}\r\n                    </div> : children\r\n                }\r\n            </>\r\n        )\r\n    })\r\n","import React from 'react';\r\nimport { Image, OverlayTrigger, Tooltip, Popover, Badge } from 'react-bootstrap';\r\nimport { IUserRef } from 'model/compiled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const CircleAvatar: React.FC<{\r\n    onClick?: () => any,\r\n    className?: string,\r\n    src?: string,\r\n    size?: number,\r\n    label?: string\r\n}> = ({ className, onClick, src, size, label }) => {\r\n    if (!src) {\r\n        src = \"https://www.ourspace.dev/img/static/bg-128.png\"; \r\n        //src = \"https://source.unsplash.com/pCcGpVsOHoo/64x64\"\r\n        //src = \"https://source.unsplash.com/random\"\r\n    }\r\n    if (!size) {\r\n        size = 128\r\n    }\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\",\"focus\"]}\r\n            overlay={\r\n                <Tooltip id=\"overlay-example\">\r\n                    @{label}\r\n                </Tooltip>\r\n            }\r\n        >\r\n            <span className=\"circle-avatar\">\r\n                <Image\r\n                    className={className}\r\n                    onClick={onClick}\r\n                    src={src} style={{\r\n                        width: size,\r\n                        height: size,\r\n                        objectFit: \"cover\",\r\n                        borderRadius: size,\r\n                    }} />\r\n                {label && <span>{label.substr(0, 2)}</span>}\r\n            </span>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\n\r\nexport const UserLink: React.FC<{ user: IUserRef }> = ({ user, children }) => {\r\n    const debug = false;\r\n    return (\r\n        <OverlayTrigger\r\n        trigger={[\"hover\",\"focus\"]}\r\n            overlay={\r\n                <Popover id={`popopover-${user.username}`}>\r\n                    <Popover.Content>\r\n                        <h6>\r\n                            @{user.username} (Join x days ago)\r\n                        </h6>\r\n                        <div>\r\n                            Community Karma:\r\n                        </div>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            }\r\n        >\r\n            <Link to={`/@${user.username}`}>\r\n                {debug && <strong>@{user.username}</strong>}\r\n                {children}\r\n            </Link>\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport LazyLoad from 'react-lazyload';\r\n\r\nexport const MediaSource: React.FC<{\r\n    width?: number,\r\n    height?: number,\r\n    preview: boolean\r\n    size?: string\r\n    network?: string,\r\n    aspectRatio?: number,\r\n    thumb?: string,\r\n    src?: string,\r\n    onOpen?: () => any,\r\n    onEvent?: (ev: string) => any\r\n}> = ({ onOpen, width, height, aspectRatio, preview, src, thumb, onEvent }) => {\r\n    preview = false;\r\n    const maxHeight = preview ? '350px' : undefined;\r\n\r\n    if (thumb && aspectRatio && !height) {\r\n        height = (320 * aspectRatio);\r\n        if (preview && height > 350) {\r\n            height = 350;\r\n        }\r\n    }\r\n\r\n    const overflowWrapper = (child: any) => {\r\n        if (preview) {\r\n            return (\r\n                <div onClick={onOpen}\r\n                    className=\"rounded\"\r\n                    style={{\r\n                        maxHeight: height,\r\n                        boxShadow: '1px 1px 1px 1px black',\r\n                        overflowY: 'hidden',\r\n                    }}>\r\n                    {child}\r\n                </div>\r\n            )\r\n        }\r\n        return child;\r\n    }\r\n    const isVideo = src && ReactPlayer.canPlay(src);\r\n\r\n\r\n\r\n    if (isVideo) {\r\n        // from inspecting the DOM, youtube placeholders render with a height of 358\r\n        height = 358;\r\n    }\r\n\r\n\r\n    if (!thumb && !isVideo) {\r\n        return null;\r\n    }\r\n\r\n    const loader = (child: any) => {\r\n        return (\r\n            <LazyLoad\r\n                debounce\r\n                once\r\n                height={height}\r\n                offset={window.innerHeight * 2}>\r\n                {overflowWrapper(child)}\r\n            </LazyLoad>\r\n        )\r\n    }\r\n\r\n    if (isVideo) {\r\n        return (\r\n            loader(\r\n                <div className=\"d-flex justify-content-center rounded-iframe-container mb-2\">\r\n                    <ReactPlayer\r\n                        light\r\n                        controls\r\n                        className=\"border rounded\"\r\n                        width='100%'\r\n                        onPlay={() => onEvent && onEvent(\"link/playing\")}\r\n                        onPause={() => onEvent && onEvent(\"link/pause\")}\r\n                        url={src} />\r\n                </div>\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    const u = src && new URL(src);\r\n    //u && console.log(u.hostname, u);\r\n    if (u && u.hostname == \"twitter.com\") { }\r\n\r\n    if (u && u.hostname == \"imgur.com\") {\r\n        return loader(\r\n            <>\r\n                <blockquote\r\n                    className=\"imgur-embed-pub\"\r\n                    lang=\"en\"\r\n                    data-id=\"a/Ugbg1ZM\">\r\n                    <a href={src}>No More Free Lunch</a>\r\n                </blockquote>\r\n                <script async src=\"//s.imgur.com/min/embed.js\"></script>\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (u && u.hostname == \"giphy.com\") {\r\n        return loader(\r\n            <div style={{ width: \"100%\", height: 0, paddingBottom: \"178%\", position: 'relative' }}>\r\n                <iframe\r\n                    onClick={() => onOpen && onOpen()}\r\n                    src=\"https://giphy.com/embed/XbVE8H818ckOWuHTEU\"\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    style={{ position: \"absolute\" }}\r\n                    frameBorder=\"0\"\r\n                    className=\"giphy-embed\" allowFullScreen>\r\n                </iframe>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        loader(<img\r\n            onClick={() => onOpen && onOpen()}\r\n            style={{\r\n                objectFit: 'cover',\r\n                width: width,\r\n                height: height,\r\n            }}\r\n           \r\n            className=\"card-img rounded border\"\r\n            src={thumb} />)\r\n    )\r\n}","import React from 'react';\r\nimport { Badge, OverlayTrigger, Tooltip, Popover } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { IUserRef, ICommunityUserRef } from 'model/compiled';\r\nimport { faHammer, faUserShield, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const UserBadge: React.FC<{ variant?: string, icon: any, label?: string }> = ({ variant, icon, label, children }) => {\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={\r\n                <Tooltip id=\"user-badge-label\">\r\n                    {label}\r\n                </Tooltip>\r\n            }\r\n        >\r\n            <Badge variant={variant} className=\"ml-1\">\r\n                <FontAwesomeIcon icon={icon} />\r\n            </Badge>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport const CommunityUserInline: React.FC<{ className?: string, user?: ICommunityUserRef }> = ({ className, user }) => {\r\n    if (!user) {\r\n        return <span>user undefined</span>;\r\n    }\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={\r\n                <Popover id=\"user-badge-label\" className=\"p-2\">\r\n                    <div>@{user.username}</div>\r\n                    <div className=\"card-title\">Community Karma: ???</div>\r\n                    <div>\r\n                        {user.isAdmin && <UserBadge label=\"Admin\" variant=\"danger\" icon={faHammer} />}\r\n                        {user.isMod && <UserBadge label=\"Moderator\" icon={faUserShield} />}\r\n                    </div>\r\n                </Popover>\r\n            }\r\n        >\r\n            <span className={`${className} d-flex flex-row button-row`}>\r\n                <Link to={\"/@\" + user.username}>\r\n                    <span className=\"username font-weight-bold\">\r\n                        @{user.username}\r\n                    </span>\r\n                </Link>\r\n                {user.isAdmin && <UserBadge label=\"Admin\" variant=\"danger\" icon={faHammer} />}\r\n                {user.isMod && <UserBadge label=\"Moderator\" icon={faUserShield} />}\r\n            </span>\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useThreadStore, ThreadStoreProvider } from '../../../stores/thread';\r\nimport { useBoardStore, Thread, User } from \"../../../stores/board\";\r\n\r\nimport { Navbar, Nav, Container, Button, Row, Col, Modal, Overlay, Spinner } from 'react-bootstrap';\r\nimport { TextEditor } from 'components/editor/editor';\r\nimport { IComment, IThread, ICommentNode } from 'model/compiled';\r\nimport { InlineVoter, VerticalVoter } from '../vote';\r\nimport moment from 'moment';\r\n\r\nimport ReactMarkdown from 'react-markdown';\r\nimport ReactPlayer from 'react-player';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExpand, faExternalLinkAlt, faSync, faReply, faPen, faEdit, faRandom, faShare, faWindowRestore } from '@fortawesome/free-solid-svg-icons';\r\nimport { NetworkGateway } from 'components/network/gateway';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { MediaSource } from 'components/media';\r\nimport { CommunityUserInline } from 'components/board/user';\r\nimport { PromiseButton, IconButton } from 'components/button';\r\n\r\nconst CommentPadding: React.FC<{ depth: number }> = ({ depth }) => {\r\n    let e = [];\r\n    for (let index = 0; index < depth; index++) {\r\n        e.push(<span key={index} style={{ width: 10, borderLeft: `1px solid hsl(${index * 20}, 50%, 50%)` }}></span>)\r\n    }\r\n    return <div className=\"d-flex flex-row\">{e}</div>\r\n}\r\n\r\nconst ThreadCommentCard: React.FC<{ data: IComment }> = ({ data }) => {\r\n    const store = useThreadStore();\r\n    const [debug, setDebug] = React.useState(false);\r\n    const [reply, setReply] = React.useState(false);\r\n    const [edit, setEditing] = React.useState(false);\r\n\r\n    const canReply = store.app.loggedIn;\r\n    const canEdit = canReply && (data.user!.username == store.app.active?.username);\r\n    let depth = (data?.depth ?? 0);\r\n    return (\r\n        <li id={data.uId!} className=\"thread-link-card list-group-item comment-container p-0 px-2 d-flex flex-row\">\r\n            <CommentPadding depth={depth} />\r\n            <div className=\"flex-grow-1\">\r\n                <div className=\"poster-info d-flex justify-content-between\">\r\n                    <CommunityUserInline user={data?.user ?? undefined} />\r\n                    <span>{moment.unix(data?.createdAt ?? 0).fromNow()}</span>\r\n                </div>\r\n                {debug && <pre>\r\n                    {JSON.stringify(data)}\r\n                </pre>}\r\n                {edit ? <TextEditor\r\n                    acceptText=\"Submit\" cancelText=\"cancel\"\r\n                    source={data.content ?? \"error, editing with no content\"} onAccept={(t) => store.addComment(t, data?.uId ?? \"\")} /> :\r\n                    <ReactMarkdown\r\n                        className=\"wrap-all\"\r\n                        source={data.content ?? \"%undefined%\"} />\r\n                }\r\n                <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                    <InlineVoter\r\n                        table={store.thread?.acceptedCommentVotes ?? []}\r\n                        votes={data?.votes ?? undefined}\r\n                        onClick={(v) => store.voteComment(data?.uId ?? \"undefined\", v)} value={data?.me?.vote ?? \"\"} />\r\n                    <div className=\"rounded button-row\">\r\n                        {false || canEdit && !reply && <Button size=\"sm\" variant=\"outline-dark\" onClick={() => setEditing(!edit)}>\r\n                            {!edit ? <FontAwesomeIcon icon={faEdit} /> : \"Cancel Edit\"}\r\n                        </Button>}\r\n                        {canReply && !edit && <Button size=\"sm\" variant=\"outline-dark\" onClick={() => setReply(!reply)}>\r\n                            {!reply ? <FontAwesomeIcon icon={faReply} /> : \"Cancel\"}\r\n                        </Button>}\r\n                    </div>\r\n                </div>\r\n                {reply && <div className=\"comment-reply mb-2\">\r\n                    <small>Replying... </small>\r\n                    <TextEditor\r\n                        acceptText=\"Submit\" cancelText=\"cancel\"\r\n                        onCancel={() => setReply(false)}\r\n                        onAccept={(t) => edit ?\r\n                            store.editComment(t, data?.uId ?? \"\").then(t => setEditing(false)) :\r\n                            store.addComment(t, data?.uId ?? \"\").then(t => setReply(false))} /></div>}\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport const ThreadCommentView: React.FC = observer(() => {\r\n    const store = useThreadStore();\r\n    if (!store.commentsGraph || !store.commentsGraph.data) {\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: 200 }}>\r\n                <h5>No comments yet...</h5>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {store.flatComments.map(comment => <ThreadCommentCard key={comment.uId ?? \"\"} data={comment} />)}\r\n        </ul>\r\n    )\r\n})\r\n\r\nexport const ExternalFrame: React.FC<{ src: string }> = ({ src }) => {\r\n    const [loaded, setLoaded] = React.useState(false);\r\n    return (\r\n        <iframe className=\"external-link\"\r\n            onLoadStart={(v) => console.log(\"[iframe]\", v)}\r\n            onScroll={(v) => console.log(\"[iframe]\", v)}\r\n            marginWidth={0}\r\n            marginHeight={0}\r\n            frameBorder={0}\r\n            onLoad={() => setLoaded(true)}\r\n            style={{\r\n                minHeight: \"82vh\",\r\n            }} src={src} />\r\n    )\r\n}\r\n\r\nconst ThreadNavbar: React.FC<{}> = ({ }) => {\r\n    const store = useBoardStore();\r\n    const thread = useThreadStore();\r\n    return (\r\n        <Navbar bg=\"white\" variant=\"dark\"\r\n            className=\"shadow-sm justify-content-between border-y no-gutters mb-1 px-4 p-0\"\r\n            style={{\r\n                zIndex: 4,\r\n                position: 'sticky',\r\n                top: 0,\r\n            }}>\r\n            <div className=\"d-flex flex-row align-items-center board-header mr-2\">\r\n                <CircleAvatar size={48} />\r\n                <div className=\"d-flex flex-column p-2\">\r\n                    <span className=\"font-weight-bold\">+{store.boardId}</span>\r\n                    <span style={{ fontSize: \".78em\", whiteSpace: \"nowrap\" }}>{store.info?.members} Members</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex-grow-1\">\r\n                <h6 style={{\r\n                    overflowY: 'hidden',\r\n                    whiteSpace: 'nowrap',\r\n                    textOverflow: 'ellipsis'\r\n                }}>\r\n                    {thread.thread?.title ?? \"?\"}\r\n                </h6>\r\n                <CommunityUserInline user={thread.thread?.user ?? undefined} />\r\n            </div>\r\n            <PromiseButton\r\n                onClick={() => thread.load()}\r\n                icon={faSync}></PromiseButton>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport const ThreadView: React.FC<{ threadId: string }> = observer(({ threadId }) => {\r\n    const store = useThreadStore();\r\n    const [showModal, setModal] = React.useState(false);\r\n    const canShowMedia = store.thread?.link && store.thread.link != null && ReactPlayer.canPlay(store.thread.link);\r\n    return (\r\n        <NetworkGateway retry={() => store.load()} state={() => store}>\r\n            <ThreadNavbar />\r\n            <Container className=\"p-0 pt-2 h-100\">\r\n                <Modal size=\"xl\" className=\"iframe-container\" show={showModal} onHide={() => setModal(false)}>\r\n                    <Modal.Header closeButton>\r\n                        <div>\r\n                            <Modal.Title>\"{store.thread?.title ?? \"\"}\"</Modal.Title>\r\n                            <small>{store.thread?.link ?? \"\"}</small>\r\n                        </div>\r\n                    </Modal.Header>\r\n                    <ExternalFrame\r\n                        src={store.thread?.link ?? \"\"} />\r\n                </Modal>\r\n\r\n                <div className=\"px-2 px-md-4 mb-2\">\r\n                    <div className=\"user-info mb-2 d-flex flex-row text-muted\">\r\n                        <span className=\"mr-1\">\r\n                            +{store.thread?.boardId}\r\n                        </span>\r\n                        <span className=\"mr-1\">{moment.unix(store.thread?.createdAt ?? 0).fromNow()}</span>\r\n                        <span>by</span>\r\n                        <CommunityUserInline user={store.thread?.user ?? undefined} />\r\n                        {store.thread?.link &&\r\n                            <a\r\n                                target=\"_blank\"\r\n                                href={store.thread.link}>\r\n                                <small>({(new URL(store.thread!.link)).hostname})</small>\r\n                            </a>\r\n                        }\r\n                    </div>\r\n                    <br></br>\r\n                    <div className=\"mb-2\" style={{ minHeight: '300px' }}>\r\n                        <h4>{store.thread?.title ?? \"%notset%\"}</h4>\r\n                        {store.thread?.content && <ReactMarkdown source={store.thread!.content!} />}\r\n\r\n                        {store.thread?.link && <div className=\"container mb-2 px-0 _px-sm-2\">\r\n                            <MediaSource\r\n                                //onOpen={() => setModal(true)}\r\n                                preview\r\n                                network=\"save\"\r\n                                thumb={store.thread.thumb ?? undefined}\r\n                                src={store.thread.link} />\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"px-2 px-md-4 mb-4 _border-bottom mb-1\">\r\n                    <InlineVoter\r\n                        preview\r\n                        size=\"sm\"\r\n                        className=\"d-flex flex-row mb-4\"\r\n                        table={store.thread?.acceptedVotes ?? []}\r\n                        votes={store.thread?.votes ?? undefined}\r\n                        onClick={(v) => store.voteThread(v)}\r\n                        //onClick={(v) =>\r\n                        //    store.voteThread(store.thread?.uId ?? \"undefined\", v)\r\n                        //        .then(\r\n                        //            t => store.thread!.me!.vote = t)} \r\n                        value={store.thread?.me?.vote ?? \"unset\"} />\r\n                    <div className=\"d-flex flex-row button-row\">\r\n                        <IconButton variant=\"outline-primary\" size=\"sm\" onClick={() => setModal(true)} icon={faRandom}>\r\n                            Crosspost\r\n                        </IconButton>\r\n                        <IconButton variant=\"outline-primary\" size=\"sm\" onClick={() => setModal(true)} icon={faExpand} >\r\n                            Open Link\r\n                        </IconButton>\r\n                        <IconButton size=\"sm\" onClick={() => setModal(true)} icon={faShare}>\r\n                            Share\r\n                        </IconButton>\r\n                        <IconButton size=\"sm\" onClick={() => setModal(true)} icon={faShare}>\r\n                            Save\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"reply\" className=\"px-2 px-md-4 pb-4 border-bottom\">\r\n                    {store.app.loggedIn ?\r\n                        <small>Comment as @{store.app.active!.username} </small>\r\n                        : <small>You need to login to comment</small>\r\n                    }\r\n                    <TextEditor acceptText=\"Submit\" cancelText=\"cancel\" onAccept={(t) => store.addComment(t)} />\r\n                </div>\r\n\r\n                <ThreadCommentView />\r\n            </Container>\r\n        </NetworkGateway>\r\n    )\r\n})","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const ScreenScaffold: React.FC<{ title: string }> = ({ children, title }) => {\r\n    return (\r\n        <Container className=\"\">\r\n            <h1 className=\"py-4\">{title}</h1>\r\n            <div className=\"ml-2\">\r\n                {children}\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { TextEditor } from 'components/editor/editor';\r\nimport Editor from 'rich-markdown-editor';\r\nimport { PromiseButton } from 'components/button';\r\nimport { useAppStore } from 'stores/app';\r\n\r\nimport { IThreadCreateRequest } from 'model/compiled';\r\n\r\nconst ThreadCreateForm: React.FC<{\r\n    boardId: string, \r\n    onSubmit: (v: IThreadCreateRequest) => Promise<any>,\r\n    onDraft?: (v: IThreadCreateRequest) => Promise<any>\r\n}> = ({ boardId, onSubmit, onDraft }) => {\r\n    const store = useAppStore();\r\n\r\n    const [validated, setValidated] = React.useState(false);\r\n    const [state, set] = React.useState<{\r\n        title: string,\r\n        link: string,\r\n        comment: string,\r\n        error: any\r\n    }>({\r\n        title: \"\",\r\n        link: \"\",\r\n        comment: \"\",\r\n        error: null,\r\n    })\r\n\r\n    const preSubmit = (): Promise<any> => {\r\n        var o: IThreadCreateRequest = {\r\n            boardId: boardId,\r\n            title: state.title,\r\n            link: state.link,\r\n            content: state.comment,\r\n        };\r\n        return onSubmit(o).catch(err => set({ ...state, error: err }));\r\n    }\r\n\r\n    const preDraft = (): Promise<any> => {\r\n        return Promise.reject();\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formThreadTitle\">\r\n                <Form.Label>Title</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"Title\"\r\n                    onChange={(v) => set({ ...state, title: v.target.value })} />\r\n                <Form.Text className=\"text-muted\"></Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formThreadLink\">\r\n                <Form.Label>Link</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"Link\"\r\n                    onChange={(v) => set({ ...state, link: v.target.value })} />\r\n                <Form.Text className=\"text-muted\">\r\n                    A link to something on the web, it could be a news article, or an image.\r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n\r\n            <Form.Group controlId=\"formThreadLink\">\r\n                <Form.Label>Comment</Form.Label>\r\n                <div className=\"rounded pl-4\">\r\n                    <Editor\r\n                        dark={store.isDarkTheme()}\r\n                        defaultValue=\"\"\r\n                        onChange={(v) => set({ ...state, comment: v() })}\r\n                        template={false}\r\n                    />\r\n                </div>\r\n                <Form.Text className=\"text-muted\">\r\n                    Your comment...\r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <div className=\"d-flex flex-row justify-content-end\">\r\n                <PromiseButton onClick={preSubmit} variant=\"primary\" type=\"submit\">\r\n                    Create\r\n                </PromiseButton>\r\n                <PromiseButton onClick={preDraft} variant=\"primary\" type=\"submit\">\r\n                    Save Draft\r\n                </PromiseButton>\r\n            </div>\r\n\r\n            {state.error && <p>\r\n                {JSON.stringify(state.error)}\r\n            </p>}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ThreadCreateForm;","import React from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { useBoardStore, BoardStore } from 'stores/board';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ThreadCreateForm from 'components/board/thread/create';\r\nimport { IThreadCreateResponse } from 'model/compiled';\r\n\r\nconst ScreenCreate: React.FC = () => {\r\n    const store = useBoardStore();\r\n    const history = useHistory();\r\n    return (\r\n        <ScreenScaffold title=\"Create new discussion\">\r\n            <ThreadCreateForm\r\n                boardId={store.boardId}\r\n                onSubmit={(t) => \r\n                    store.createThread(t).then(\r\n                        (t: IThreadCreateResponse) => \r\n                            history.replace(store.getThreadLink(t.threadId ?? \"error\")))} />\r\n        </ScreenScaffold>\r\n    )\r\n}\r\n\r\nexport default ScreenCreate;","import React from 'react';\r\nimport { Image, Badge, OverlayTrigger, Popover, Tooltip } from 'react-bootstrap';\r\nimport { IBoard } from 'model/compiled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const CommunityAvatar: React.FC<{\r\n    onClick?: () => any,\r\n    wrapperClassName?: string,\r\n    className?: string,\r\n    src?: string,\r\n    size?: number,\r\n    label?: string\r\n}> = ({ wrapperClassName, className, onClick, src, size, label }) => {\r\n    if (!src) {\r\n        \r\n        src = \"https://www.ourspace.dev/img/static/bg-128.png\"; \r\n        //\"https://source.unsplash.com/pCcGpVsOHoo/64x64\"\r\n        //src = \"https://source.unsplash.com/random/64x64\"\r\n    }\r\n    if (!size) {\r\n        size = 128\r\n    }\r\n    const c = wrapperClassName ? wrapperClassName + \" circle-avatar\" : \"circle-avatar\";\r\n    return (\r\n        <span className={c}>\r\n            <Image\r\n                className={className}\r\n                onClick={onClick}\r\n                src={src} style={{\r\n                    width: size,\r\n                    height: size,\r\n                    objectFit: \"cover\",\r\n                    borderRadius: size,\r\n                }} />\r\n            {label && <span>{label.substr(0, 2)}</span>}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CommunityLinkPopover: React.FC<{ icon?: string, boardId: string }> = ({ icon, boardId, children }) => {\r\n    const debug = false;\r\n    return (\r\n        <OverlayTrigger\r\n            trigger={[\"hover\", \"focus\"]}\r\n            overlay={\r\n                <Popover id={`popopover-${boardId}`}>\r\n                    <Popover.Content className=\"d-flex flex-row align-items-center\">\r\n                        <CommunityAvatar size={48} src={`https://www.ourspace.dev/img/communityicon/${boardId}.apng`} />\r\n                        <h6 className=\"ml-2\">\r\n                            +{boardId}\r\n                        </h6>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            }\r\n        >\r\n            <Link to={`/+${boardId}`}>{children}</Link>\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport { Button, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEllipsisH, faEllipsisV } from '@fortawesome/free-solid-svg-icons';\r\n// Helper\r\n//const StringIsNumber = value: string => isNaN(Number(value)) === false;\r\n\r\n// Turn enum into array\r\nexport function EnumToArray(e: any) {\r\n    return Object.keys(e)\r\n        .map(key => e[key]);\r\n}\r\n\r\n\r\nexport interface ButtonDropdownItem {\r\n    label: string,\r\n    icon: any,\r\n    key?: string,\r\n    onClick?: () => any\r\n}\r\n\r\nexport const DropdownEnum: React.FC<{\r\n    icon?: any,\r\n    title: string,\r\n    labels: Array<ButtonDropdownItem>,\r\n    //labels: Array<string>,\r\n    values: Array<number>,\r\n    value: number,\r\n    onSelect: (key: number) => void\r\n}> = ({ title, values, value, labels, onSelect }) => {\r\n    //const history = useHistory();\r\n    return (\r\n        <DropdownButton\r\n            variant=\"outline-muted\"\r\n            //onSelect={(key, event) => onSelect(key)\r\n            id=\"dropdown-basic-button\"\r\n            title={<>\r\n                {labels[value].icon && <FontAwesomeIcon icon={labels[value].icon} className=\"mr-1\" />}\r\n                <span className=\"d-none d-md-inline\">\r\n                    {labels[value].label}\r\n                </span>\r\n            </>\r\n            }>\r\n            <Dropdown.Header>{title}</Dropdown.Header>\r\n            {\r\n                values.map(t => labels[t] &&\r\n                    <Dropdown.Item eventKey={labels[t].key} onClick={() => onSelect(t)}>\r\n                        {labels[t].icon && <FontAwesomeIcon icon={labels[t].icon} className=\"mr-1\" />}\r\n                        <span className=\"d-none d-md-inline\">\r\n                            {labels[t].label ?? t}\r\n                        </span>\r\n                    </Dropdown.Item>\r\n                )\r\n            }\r\n        </DropdownButton >\r\n    )\r\n}\r\n\r\n\r\nexport interface DropDownItem {\r\n    label: string,\r\n    key: string,\r\n}\r\n\r\nexport const Dropdown2: React.FC<{\r\n    items: Array<DropDownItem>,\r\n    onSelected: (key: number) => void,\r\n    value: number\r\n}> = ({ items }) => {\r\n    const set = (t: string | null, e: any): void => {\r\n        //store.filters.sortTime = t!\r\n    }\r\n    return (\r\n        <DropdownButton variant=\"outline-white\" id=\"dropdown-basic-button\" title={\"\"}>\r\n            <Dropdown.Header>Time span</Dropdown.Header>\r\n            {items.map((t) => <Dropdown.Item eventKey={t.key} onSelect={set}>{t.label}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n    )\r\n}\r\n\r\nconst CustomToggle = React.forwardRef<{}, { onClick: (e: any /*React.MouseEvent<HTMLAnchorElement, MouseEvent>*/) => any }>(({ children, onClick }, ref) => (\r\n    <Button\r\n        //\r\n        variant=\"outline\"\r\n        ref={ref as any}\r\n        onClick={(e) => {\r\n            e.preventDefault();\r\n            onClick(e);\r\n        }}\r\n    >\r\n        {children}\r\n        <FontAwesomeIcon icon={faEllipsisV} />\r\n    </Button>\r\n));\r\n\r\nexport const ButtonDropdown: React.FC<{\r\n    //values: Array<any>,\r\n    //onSelect: (key: number) => any,\r\n    items: Array<ButtonDropdownItem>\r\n}> = ({ items }) => {\r\n    return (\r\n        <Dropdown\r\n            title=\"\"\r\n        //variant=\"white\"\r\n        >\r\n            <Dropdown.Toggle className=\"text-center\" variant=\"white\" as={CustomToggle} />\r\n            <Dropdown.Menu>\r\n                {items.map((e) => (\r\n                    <Dropdown.Item eventKey={e.label} onSelect={e.onClick}>\r\n                        <FontAwesomeIcon className=\"ml-2\" icon={e.icon ?? undefined} />\r\n                        {e.label}\r\n                    </Dropdown.Item>\r\n                ))}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\n/*\r\nexport const ThreadFilterTime: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <DropDown\r\n            items={[]}\r\n            value={store.filters?.sortDirection ?? 0}\r\n            onSelected={(k) => store.filters.sortDirection = k} />\r\n    )\r\n})*/","import React from 'react';\r\nimport _ from \"lodash\";\r\n\r\nexport const ScrollEventProvider: React.FC<{\r\n    listener: any,\r\n    target: any,\r\n    onScrollBottom: () => Promise<any>\r\n}> = ({ listener, target, onScrollBottom, children }) => {\r\n    //const [event, setEvent] = React.useState(undefined);\r\n    const [isWaiting, setWaiting] = React.useState(false);\r\n    const [isBottom, setState] = React.useState(false);\r\n    const checkIsBottom = (el: any) => {\r\n        //event.target.scrollHeight - event.target.scrollTop == event.target.clientHeight\r\n        return el.getBoundingClientRect().bottom <= window.innerHeight;\r\n    }\r\n    const onScrollDebounce = React.useCallback(_.debounce((ev) => {\r\n        if (isWaiting == false && isBottom == false && checkIsBottom(target)) {\r\n            setWaiting(true)\r\n            setState(true);\r\n            console.log(\"Bottom of page\");\r\n            onScrollBottom().finally(() => setWaiting(false));\r\n            return;\r\n        }\r\n        if (isBottom == true) {\r\n            setState(false);\r\n            console.log(\"Not at bottom of page\");\r\n        }\r\n    }, 50), []);\r\n    React.useEffect(() => {\r\n        listener.addEventListener('scroll', onScrollDebounce)\r\n        return () => {\r\n            console.log(\"[ScrollEventProvider] unhook\");\r\n            listener.removeEventListener('scroll', onScrollDebounce);\r\n        }\r\n    }, [listener]);\r\n    console.log(\"[ScrollEventProvider] construct\");\r\n    return <>{children}</>;\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { useBoardStore } from 'stores/board';\r\nimport { ThreadStoreProvider } from 'stores/thread';\r\nimport { BoardStoreProvider } from 'stores/board';\r\n\r\nimport { ThreadView } from 'components/board/thread/thread';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nconst BoardSingleThreadOverlayObserver = observer(() => {\r\n    const store = useBoardStore();\r\n\r\n    console.log(\"[BoardSingleThreadOverlayObserver]\")\r\n    //return store.overlayThread != undefined ? \r\n    return (\r\n        <Modal\r\n            //className=\"primary\"\r\n            show={store.overlayThread != undefined}\r\n            onHide={() => store.overlayThread = undefined}\r\n            //backdrop=\"static\"\r\n            size=\"lg\"\r\n            >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                    {//store.overlayThread?.title\r\n                    }\r\n                Discussion...\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"p-0\">\r\n                {false && <Switch>\r\n                    <Route path={`/+${store.boardId}/:threadId/`} component={undefined} />\r\n                </Switch>}\r\n                {store.overlayThread && <BoardStoreProvider boardId={store.overlayThread!.boardId!}>\r\n                    <ThreadStoreProvider threadId={store.overlayThread!.uId!}>\r\n                        {store.overlayThread &&\r\n                            <ThreadView threadId={store.overlayThread!.uId!} />}\r\n                    </ThreadStoreProvider>\r\n                </BoardStoreProvider>}\r\n            </Modal.Body>\r\n        </Modal >\r\n    );\r\n});\r\n\r\nexport default BoardSingleThreadOverlayObserver;","import React from 'react';\r\n\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport moment from 'moment';\r\nimport '@fortawesome/react-fontawesome';\r\nimport { useBoardStore, Thread, User } from \"../../stores/board\";\r\nimport { Form, Container, Tooltip, OverlayTrigger, Navbar, Button, Card, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { trace } from \"mobx\";\r\nimport { InlineVoter } from 'components/board/vote';\r\nimport { CommunityLinkPopover } from 'components/board/avatar';\r\nimport { IUserRef, ThreadSelectFilters } from 'model/compiled';\r\nimport { EnumToArray, DropdownEnum, ButtonDropdown, ButtonDropdownItem } from 'components/dropdown';\r\nimport { ScrollEventProvider } from 'components/scroll';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faReply, faBookmark, faCommentAlt, faShare,\r\n    faSave, faLink, faPlus, faCompress,\r\n    faSync, faExternalLinkAlt, faUsers, faUsersSlash,\r\n    faSortAmountDown, faSortAmountUp, faWindowMaximize, faStream, faPortrait\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport Masonry from 'react-masonry-component';\r\nimport ReactPlayer from 'react-player';\r\nimport { NetworkGateway } from 'components/network/gateway';\r\nimport { PromiseButton, LinkButton, IconButton } from 'components/button';\r\nimport _ from 'lodash';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { CommunityUserInline } from 'components/board/user';\r\nimport { MediaSource } from 'components/media';\r\nimport classNames from 'classnames';\r\nimport BoardSingleThreadOverlayObserver from 'components/board/overlay';\r\n\r\n\r\nvar isImage = RegExp(\"(gif|jpe?g|tiff?|png|webp|bmp)$\")\r\n\r\nconst CardButtons: React.FC<{\r\n    t: Thread,\r\n    buttonClass: string,\r\n    commentNum: number,\r\n}> = ({ buttonClass, t, commentNum }) => {\r\n    const store = useBoardStore();\r\n\r\n    let items: Array<ButtonDropdownItem> = [\r\n        { label: \"Hide\", icon: \"\" },\r\n        { label: \"Bookmark\", icon: \"\" },\r\n        //{ label: \"CrossPost\", icon: \"\" },\r\n        //{ label: \"Share\", icon: \"\" },\r\n        { label: \"Copy to clipboard\", icon: \"\" },\r\n        { label: \"Open in new tab\", icon: \"\" },\r\n    ];\r\n\r\n    if (store.info?.isModerator) {\r\n        items.push({ key: \"m\", label: \"Moderate [M]\", icon: \"\", onClick: () => store.moderateThread() });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ButtonDropdown\r\n                items={items}\r\n            />\r\n            <IconButton variant=\"outline\" icon={faShare}\r\n                className={buttonClass}>\r\n            </IconButton>\r\n            <IconButton variant=\"outline\"\r\n                onClick={() => store.setOverlay(t)}\r\n                className={buttonClass}\r\n                icon={faCommentAlt} >\r\n                {commentNum}\r\n            </IconButton>\r\n            <IconButton variant=\"outline\" className={buttonClass} icon={faLink}>\r\n            </IconButton>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ThreadCard: React.FC<{\r\n    type?: number,\r\n    className?: string,\r\n    data: Thread, showContext: boolean\r\n}> = ({\r\n    type,\r\n    className,\r\n    data,\r\n    showContext }) => {\r\n        const store = useBoardStore();\r\n        const history = useHistory();\r\n        const cls = \"_list-group-item _border-none p-0 p-sm-1 p-md-2 post-container \" + className ?? className;\r\n\r\n        if (!data || !data.title || !data.createdAt || !data.user) {\r\n            return null;\r\n        }\r\n\r\n        const src = data.thumb;\r\n\r\n        const canShowImage = isImage.test(src ?? \"\");\r\n        const canShowMedia = data.link && ReactPlayer.canPlay(data.link);\r\n\r\n        let url: URL\r\n        try {\r\n            if (data.link)\r\n                // TODO: handle weird urls on the server\r\n                // amend self urls to point to the hostname\r\n                url = new URL(data.link)\r\n        } catch {\r\n            return null;\r\n        }\r\n\r\n        const onClick = (e: any) => { //React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n            if (e.target.id == 'thread-card' || e.target.id == 'thread-card-inner' || e.target.id == 'thread-card-title') {\r\n                history.push(data.url!);\r\n                //store.overlayThread = data;\r\n            }\r\n            //\r\n            //store.overlayThread = undefined;\r\n        }\r\n\r\n        const width = type == 1 ? 100 : undefined;\r\n        const height = type == 1 ? 100 : undefined;\r\n\r\n        return (\r\n            <div className={cls}>\r\n                <div\r\n                    onClick={onClick}\r\n                    id=\"thread-card\"\r\n                    className=\"card border-y border-md-x border-md-y d-flex flex-column rounded-iframe-container shadow-sm page-link text-dark\">\r\n                    <div className={\r\n                        classNames(\"d-flex justify-content-between \",\r\n                            { \"flex-column\": type == 0 },\r\n                            { \"flex-row\": type == 1 })} >\r\n                        <div className=\"d-flex mb-1\">\r\n                            <div className=\"mr-1 mr-md-2\">\r\n                                <InlineVoter\r\n                                    preview\r\n                                    size=\"sm\"\r\n                                    className=\"d-flex flex-column\"\r\n                                    table={data?.acceptedVotes ?? []}\r\n                                    votes={data?.votes ?? undefined}\r\n                                    onClick={(v) =>\r\n                                        //store.voteThread(data?.uId ?? \"undefined\", v)\r\n                                        //    .then(\r\n                                        //        t => data!.me!.vote = t.typeCode)} \r\n                                        //value={data?.me?.vote ?? \"unset\"} \r\n                                        store.voteThread(data?.uId ?? \"undefined\", v)}\r\n                                    value={data?.me?.vote ?? \"unset\"}\r\n                                />\r\n                                {false && <div className=\"_d-flex flex-row flex-md-column justify-content-center align-items-center d-none\">\r\n                                    <CardButtons\r\n                                        t={data}\r\n                                        commentNum={data.numComments ?? 0}\r\n                                        buttonClass=\"d-none d-md-none\" />\r\n                                </div>}\r\n                            </div>\r\n                            <div id=\"thread-card-inner\" className=\"card-block text-left w-100\">\r\n                                <div className=\"post-meta text-left d-flex flex-row flex-wrap justify-content-left\">\r\n                                    <CommunityLinkPopover boardId={data.boardId!}>\r\n                                        <span className=\"mr-2\">+{data.boardId}</span>\r\n                                    </CommunityLinkPopover>\r\n                                    <span className=\"mr-1\">{moment.unix(data.createdAt).fromNow()} by </span>\r\n                                    <CommunityUserInline className=\"mr-1\" user={data.user} />\r\n                                    {data.link && <a\r\n                                        className=\"small\"\r\n                                        onClick={() => store.event(\"link/open\")}\r\n                                        target=\"_blank\"\r\n                                        href={data.link}>\r\n                                        {url!.host}\r\n                                        <FontAwesomeIcon className=\"ml-1\" size=\"xs\" icon={faExternalLinkAlt} />\r\n                                    </a>}\r\n                                </div>\r\n                                <Card.Title\r\n                                    id=\"thread-card-title\"\r\n                                    className=\"post-title text-left w-lg-75 mb-0 mb-md-2\">\r\n                                    {data.title}\r\n                                </Card.Title>\r\n                            </div>\r\n                        </div>\r\n                        <MediaSource\r\n                            width={width}\r\n                            height={height}\r\n                            preview\r\n                            network=\"save\"\r\n                            aspectRatio={data.thumbAspectRatio ?? undefined}\r\n                            thumb={data.thumb ?? undefined}\r\n                            src={data.link ?? undefined} />\r\n                    </div>\r\n                    <div className=\"d-flex flex-row justify-content-left\">\r\n                        <CardButtons\r\n                            t={data}\r\n                            commentNum={data.numComments ?? 0}\r\n                            buttonClass=\"d-block\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nconst ThreadCardWrapper: React.FC = ({ children }) => {\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {children}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport const ThreadsView: React.FC<{\r\n    layout: number,\r\n    data: Array<Thread>\r\n}> = observer(({ layout, data }) => {\r\n    const store = useBoardStore();\r\n\r\n    const getCardClass = () => {\r\n        if (store.isConstrained()) {\r\n            //return \"col-12 col-md-6 col-lg-4\";\r\n            return \"col-12 col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-4\";\r\n            //return \"col-xl-4 col-lg-6 col-md-6 col-sm-12 col-xs-12\";\r\n        }\r\n        return \"col-xl-3 col-lg-6 col-md-6 col-sm-12 col-xs-12\";\r\n    }\r\n\r\n    const getLayout = () => {\r\n        if (layout == 0) {\r\n            return (\r\n                <Masonry\r\n                    elementType=\"div\"\r\n                    className={\r\n                        \"_h-100 _list-group _list-group-flush p-0 \"\r\n                        //    + store.isConstrained() && \"container\"\r\n                    }\r\n                >\r\n                    {data.map((t) => t.uId &&\r\n                        <ThreadCard\r\n                            type={layout}\r\n                            className={getCardClass()}\r\n                            showContext={false} key={t.uId} data={t} />)}\r\n                </Masonry>\r\n            )\r\n        }\r\n\r\n        return data.map(\r\n            (t) => t.uId && <ThreadCard\r\n                type={layout}\r\n                showContext={false}\r\n                key={t.uId}\r\n                data={t} />)\r\n\r\n    }\r\n\r\n    return (\r\n        <ScrollEventProvider\r\n            listener={document}\r\n            target={document.getElementById(\"screen-row\")}\r\n            onScrollBottom={() => store.requestMore()}\r\n        >\r\n            {store.error && <div className=\"d-flex flex-column justify-content-center p-4 rounded border m-5\">\r\n                <h2>Uh Oh</h2>\r\n                <h5>Something went wrong while loading the board +{store.boardId}</h5>\r\n                <p>{store.error.message}\" ({store.error.response.statusText})</p>\r\n                <Button onClick={() => store.request()} >Try again</Button>\r\n            </div>}\r\n            {getLayout()}\r\n        </ScrollEventProvider>\r\n    )\r\n})\r\n\r\nexport const BoardModPreview: React.FC<{ users: Array<IUserRef> }> = ({ users }) => {\r\n    return (\r\n        <div>\r\n            <h6>Moderators</h6>\r\n            <div>\r\n                {users.map(u => <small>@{u.username}</small>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst BoardTextSearch: React.FC<{ value?: string, boardId?: string }> = observer(({ value, boardId }) => {\r\n    const store = useBoardStore();\r\n    const [state, setState] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n        setState(\"\");\r\n    }, [boardId])\r\n    const onChange = _.debounce((v: any) => {\r\n        store.filters.query = v.target.value;\r\n        store.request();\r\n    }, 100);\r\n\r\n    return (\r\n        <Form.Control\r\n            className=\"mr-2\"\r\n            type=\"text\"\r\n            value={state}\r\n            onSubmit={() => {\r\n                onChange(state);\r\n            }}\r\n            //https://stackoverflow.com/questions/46986259/react-lodash-debounce-always-return-null\r\n            placeholder=\"Search\"\r\n            onChange={(e) => {\r\n                e.persist();\r\n                setState(e.target.value);\r\n                onChange(e);\r\n            }} />\r\n    )\r\n})\r\n\r\nconst BoardNavbar: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    const history = useHistory();\r\n    //const params: { boardId: string } = useParams();\r\n    return (\r\n        <Navbar bg=\"white\" variant=\"dark\"\r\n            className=\"shadow-sm justify-content-between border-bottom no-gutters mb-1 px-1 px-md-4 p-0\" style={{\r\n                zIndex: 4,\r\n                position: 'sticky',\r\n                top: 0,\r\n            }}>\r\n            <div className=\"d-flex flex-row align-items-center board-header mr-2\">\r\n                <CircleAvatar className=\"d-block d-md-block\" src={store.info?.icon ?? undefined} size={48} />\r\n                <div className=\"d-flex flex-column p-2\">\r\n                    <span className=\"font-weight-bold\">+{store.boardId}</span>\r\n                    <span style={{ fontSize: \".78em\", whiteSpace: \"nowrap\" }}>{store.info?.members ?? \"?\"} Members</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-none d-md-flex flex-row\">\r\n                <DropdownEnum\r\n                    title=\"Layout\"\r\n                    labels={[\r\n                        { label: \"Cards\", icon: faWindowMaximize },\r\n                        { label: \"Compact\", icon: faStream },\r\n                        { label: \"Gallery\", icon: faPortrait }\r\n                    ]}\r\n                    values={[0, 1, 2]}\r\n                    value={store.UIdatalayout}\r\n                    onSelect={(t: number) => store.UIdatalayout = t} />\r\n                <DropdownEnum\r\n                    title=\"Ranking\"\r\n                    labels={[{ label: \"Hot\", icon: faSave }, { label: \"Top\", icon: faSave }, { label: \"Controversial\", icon: faSave }]}\r\n                    values={EnumToArray(ThreadSelectFilters.Method)}\r\n                    value={store.filters.rankMethod!}\r\n                    onSelect={(t: number) => {\r\n                        store.filters.rankMethod = t;\r\n                        history.push({\r\n                            search: store.getQueryParams(),\r\n                        });\r\n                    }} />\r\n                <DropdownEnum\r\n                    title=\"Direction\"\r\n                    labels={[\r\n                        { label: \"Decending\", icon: faSortAmountDown },\r\n                        { label: \"Ascending\", icon: faSortAmountUp }\r\n                    ]}\r\n                    values={EnumToArray(ThreadSelectFilters.Method)}\r\n                    value={store.filters.sortDirection!}\r\n                    onSelect={(t: number) => {\r\n                        store.filters.sortDirection = t;\r\n                        history.push({\r\n                            search: store.getQueryParams(),\r\n                        });\r\n                    }} />\r\n            </div>\r\n            <BoardTextSearch boardId={store.boardId} />\r\n            <Button className=\"mr-2\" variant=\"outline-primary\" onClick={() => store.request()}>\r\n                <FontAwesomeIcon icon={faSync} />\r\n            </Button>\r\n            <LinkButton to={`+${store.boardId}/create`}>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </LinkButton>\r\n            {\r\n\r\n                /*!store.info?.isMember && <NetworkedButton\r\n                    message=\"Join\"\r\n                    successMessage=\"Unsubscribe\"\r\n                    onClick={() => store.subscribe()} />\r\n                    */\r\n                //store.info?.isMember && <Button onClick={() => store.unsubscribe()}>Unsubscribe</Button>\r\n                store.info && <PromiseButton\r\n                    icon={store.info.isMember ? faUsersSlash : faUsers}\r\n                    variant={(store.info.isMember ? \"primary\" : \"danger\")}\r\n                    onClick={() => store.info!.isMember ? store.unsubscribe() : store.subscribe()}>\r\n                </PromiseButton>\r\n            }\r\n        </Navbar>\r\n    )\r\n})\r\n\r\nexport const BoardView: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <>\r\n            <BoardNavbar />\r\n            <BoardSingleThreadOverlayObserver />\r\n            <NetworkGateway retry={() => store.request()} state={() => store}>\r\n                {store.debug && <div>\r\n                    <p>Id: {store.boardId}</p>\r\n                    <p>Length: {store.data.length}</p>\r\n                    <p>fetching: {store.isFetching} {store.requests} </p>\r\n                </div>}\r\n                <ThreadsView\r\n                    layout={store.UIdatalayout}\r\n                    data={store.data} />\r\n            </NetworkGateway>\r\n        </>\r\n    )\r\n})\r\n\r\nexport const ThreadFilterSort: React.FC = observer(() => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <DropdownButton variant=\"outline-dark\" id=\"dropdown-basic-button\" title=\"Sort\">\r\n            <Dropdown.Header>Sort filter</Dropdown.Header>\r\n            <Dropdown.Item href=\"?action-1=true\">Top</Dropdown.Item>\r\n            <Dropdown.Item href=\"?action-2=true\">Another action</Dropdown.Item>\r\n            <Dropdown.Item href=\"?action-3=true\">Something else</Dropdown.Item>\r\n        </DropdownButton>\r\n    )\r\n})","import React from 'react';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { useBoardStore } from 'stores/board';\r\n\r\nimport { Form, Button, Spinner } from 'react-bootstrap';\r\n\r\n\r\nconst FileInput: React.FC<{\r\n    onPreview?: () => Promise<any>,\r\n    onSubmit: (event: File) => Promise<any>\r\n}> = ({ onSubmit, children }) => {\r\n    const [value, setValue] = React.useState<File>();\r\n    const [waiting, setWaiting] = React.useState<boolean>(false);\r\n\r\n    const preSubmit = (e: any): Promise<any> => {\r\n        e.preventDefault();\r\n        setWaiting(true);\r\n        if (value)\r\n            return onSubmit(value).finally(() => setWaiting(false))\r\n        return Promise.reject();\r\n    }\r\n    return (\r\n        <Form onSubmit={preSubmit}>\r\n            <div className=\"d-flex flex-row justify-content-between\">\r\n                <Form.File\r\n                    id=\"image\"\r\n                    className=\"mr-2\"\r\n                    label={value ? value.name : \"\"}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => e.target\r\n                        && e.target.files\r\n                        && setValue(e.target?.files[0])}\r\n                    required\r\n                    isInvalid={false}\r\n                    feedback=\"none\"\r\n                    feedbackTooltip\r\n                    custom\r\n                />\r\n                <Button type=\"submit\">Upload {waiting && <Spinner animation=\"border\" />}</Button>\r\n            </div>\r\n            <small>Images larger than 128x128 will be resized</small>\r\n            {value && <p>{value.name}</p>}\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\nconst RestrictionSelector: React.FC = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ScreenEdit: React.FC = () => {\r\n\r\n    const store = useBoardStore();\r\n\r\n    return (\r\n        <ScreenScaffold title=\"Settings\">\r\n            <h3>Set community icon</h3>\r\n            <FileInput onSubmit={(e) => store.uploadIcon(e)} />\r\n            <FileInput onSubmit={(e) => store.uploadBanner(e)} />\r\n        </ScreenScaffold>\r\n    )\r\n}\r\n\r\nexport default ScreenEdit;","import React from 'react';\r\n\r\nexport const SystemMessages: React.FC = () => {\r\n    return null;\r\n    \r\n    return (\r\n        <div>\r\n            <small>\r\n                If you create a community named with the porn prefix or suffix, and it's not actually about porn\r\n                eg: (earthporn, houseporn, computerporn)\r\n                You <i>will</i> end up getting your board renamed - admins.\r\n                Think of a better name!\r\n            </small>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\n\r\nexport const AppSettingsForm: React.FC = observer(() => {\r\n    const app = useAppStore();\r\n    return (\r\n        <div>\r\n\r\n            <Form.Check\r\n                //onChange={() => }\r\n                onChange={(v: any) => app.UIconstrainContainer = !app.UIconstrainContainer} // v.currentTarget.value}\r\n                checked={!app.UIconstrainContainer}\r\n                type=\"switch\"\r\n                id=\"app-fullwidth\"\r\n                label=\"Full width\"\r\n            />\r\n\r\n            <small>Dev settings</small>\r\n\r\n            <Form.Check\r\n                onChange={(v: any) => app.UIshowEventDebug = !app.UIshowEventDebug} // v.currentTarget.value}\r\n                checked={app.UIshowEventDebug}\r\n                type=\"switch\"\r\n                id=\"app-event-debug\"\r\n                label=\"Show event debug\"\r\n            />\r\n\r\n            <Form.Check\r\n                onChange={(v: any) => app.UIanimatedHeader = !app.UIanimatedHeader} // v.currentTarget.value}\r\n                checked={app.UIanimatedHeader}\r\n                type=\"switch\"\r\n                id=\"app-animated-header\"\r\n                label=\"Animated header\"\r\n            />\r\n\r\n            <Form.Check\r\n                onChange={(v: any) => app.UIdarkTheme = !app.UIdarkTheme} // v.currentTarget.value}\r\n                checked={app.UIdarkTheme}\r\n                type=\"switch\"\r\n                id=\"app-theme\"\r\n                label=\"Dark Mode\"\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const SidebarSettings: React.FC = () => {\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            <div className=\"card-body\">\r\n                <AppSettingsForm />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nexport const ModalSheetWrapper: React.FC<{\r\n    // callbacks for children to modify this state\r\n    // could cause infinite loops?\r\n    children: [\r\n        (show: () => void) => React.ReactElement,\r\n        () => React.ReactElement\r\n    ],\r\n    onConfirm: () => Promise<any>,\r\n    title: string,\r\n    acceptText?: string,\r\n}> = ({ children, onConfirm, title, acceptText }) => {\r\n    const [show, setShow] = React.useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {children[1]()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                </Button>\r\n                    <Button variant=\"primary\" onClick={() => onConfirm().then(t => handleClose())}>{acceptText ?? \"Accept\"}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            {children[0](handleShow)}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { useAppStore } from 'stores/app';\r\nimport { CircleAvatar } from './avatar';\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { ModalSheetWrapper } from \"components/modal\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { IconBadge } from 'components/badge';\r\nimport { IconButton } from 'components/button';\r\n\r\nexport const NavUserCard: React.FC = () => {\r\n    const app = useAppStore();\r\n    return <span className=\"pr-4\"><strong>@{app.active?.username}</strong></span>\r\n}\r\n\r\nexport const InlineNavCard: React.FC = ({ }) => {\r\n    const store = useAppStore();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            {store.loggedIn && <ModalSheetWrapper\r\n                title=\"Confirm sign out\"\r\n                onConfirm={() => store.logout()}\r\n                acceptText=\"Logout\">\r\n                {[(show) => (\r\n                    <div className=\"d-inline-block d-flex flex-row flex-grow-1 flex-md-grow-0 p-1 rounded align-items-center\">\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"white\" id=\"dropdown-basic\"></Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={() => history.push(\"/account\")}>Account</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => history.push(\"/account/inbox\")}>Inbox</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => history.push(\"/create\")}>Create Community</Dropdown.Item>\r\n                                <Dropdown.Divider />\r\n                                <Dropdown.Item variant=\"primary\" onClick={() => show()}>Logout</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <CircleAvatar size={36} label={store.active?.username ?? \"\"} />\r\n                        <span className=\"ml-2\">\r\n                            <strong>@</strong>{store.active!.username ?? \"unknown_username?\"}\r\n                        </span>\r\n                    </div>\r\n                ), () => (\r\n                    <p>Logout</p>\r\n                )]}\r\n            </ModalSheetWrapper>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const UserNotifications = () => {\r\n    const store = useAppStore();\r\n    if (!store.loggedIn) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <IconButton icon={faEnvelope}>\r\n                    Messages\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { SystemMessages } from 'components/app/messages';\r\nimport { SidebarSettings } from 'components/uisettings';\r\nimport { useAppStore } from 'stores/app';\r\nimport { IBoard } from 'model/compiled';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\nimport { faChartLine } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { UserNotifications } from 'components/user/card';\r\nimport { LinkButton } from 'components/button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const SidebarCard: React.FC = ({ children }) => {\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TrendingCommunitiesList: React.FC<{}> = observer(({ }) => {\r\n    //data: Array<IBoard>\r\n\r\n    const app = useAppStore();\r\n\r\n    return (\r\n        <div className=\"card mb-2\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title d-flex align-items-center\">\r\n                    <FontAwesomeIcon icon={faChartLine} className=\"mr-2\" />\r\n                    Trending\r\n                </h5>\r\n                <p className=\"mb-0\">Popular communities</p>\r\n            </div>\r\n            <ul className=\"list-group list-group-flush\">\r\n                {app.trending.map(e => <li className=\"list-group-item\">\r\n                    <Link to={`/+${e.uId}`}>\r\n                        <CommunityAvatar size={32} src={e.icon!} className=\"mr-2\" />\r\n                        <span>+{e.uId}</span>\r\n                    </Link>\r\n                </li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst SiteCard: React.FC<{}> =\r\n    observer(() => {\r\n        const app = useAppStore();\r\n        if (app.loggedIn) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"card mb-2\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Welcome to our/space</h5>\r\n                    <div className=\"btn-group d-flex justify-content-between\">\r\n                        <LinkButton to=\"/login\">Login</LinkButton>\r\n                        <LinkButton to=\"/signup\">Signup</LinkButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\nexport const Portal: React.FC<{ target: string }> = ({ children, target }) => {\r\n    const v = document.getElementById(target);\r\n    if (!v) {\r\n        return <div></div>\r\n    }\r\n    return ReactDOM.createPortal(children, v);\r\n}\r\n\r\nexport const SidebarDefault: React.FC = () => {\r\n    const app = useAppStore();\r\n\r\n    return (\r\n        <div className=\"mt-2\">\r\n            <div id=\"screen-right\" ></div>\r\n            <SystemMessages />\r\n            <SiteCard />\r\n            <SidebarSettings />\r\n            <TrendingCommunitiesList />\r\n            <UserNotifications />\r\n            <div>\r\n                <small className=\"p-2\">Copyright ourspace {new Date().getFullYear()}</small>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport { ParallaxBanner } from 'react-scroll-parallax';\r\n\r\nexport const ImageHeader: React.FC<{ animated?: boolean, src: string }> = ({ animated, src, children }) => {\r\n    if (animated)\r\n        // \"https://source.unsplash.com/pCcGpVsOHoo/1090x400\"\r\n        return (\r\n            <ImageHeaderParallax src={src} >\r\n                {children}\r\n            </ImageHeaderParallax>\r\n        )\r\n    return (\r\n        <Jumbotron\r\n            className=\"mb-0 p-4\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: src,\r\n                //backgroundImage: `url(\"https://dev.ourspace.dev/res/bg-2.png\")` \r\n            }}>\r\n            {children}\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport const ImageHeaderParallax: React.FC<{ src: string }> = ({ src, children }) => {\r\n    return (\r\n        <ParallaxBanner\r\n            style={{ height: \"auto\" }}\r\n            className=\"jumbotron mb-0 px-1 py-4 px-md-4 _text-stroke-children\"\r\n            layers={[\r\n                {\r\n                    //image: \"https://source.unsplash.com/random\",\r\n                    image: src,\r\n                    amount: .8,\r\n                    props: {\r\n                        style: {\r\n                            zIndex: 0,\r\n                        }\r\n                    }\r\n                }]}\r\n        >\r\n            {/* fix child being hidden by parallax layers*/}\r\n            <div style={{ position: 'relative' }}>\r\n                {children}\r\n            </div>\r\n        </ParallaxBanner >\r\n    )\r\n}","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router, Route,\r\n    Switch,\r\n    RouteComponentProps,\r\n    useParams,\r\n    useHistory,\r\n} from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\nimport { observer, useAsObservableSource } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Col,\r\n    Row,\r\n    Form,\r\n    Container,\r\n    Navbar,\r\n    Card,\r\n    Jumbotron,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Modal\r\n} from 'react-bootstrap';\r\n\r\nimport { NetworkedButton, LinkButton, IconButton } from 'components/button'\r\nimport { BoardStoreProvider, useBoardStore } from \"../../stores/board\";\r\nimport { ThreadStoreProvider } from '../../stores/thread';\r\nimport { ThreadView } from \"../../components/board/thread/thread\";\r\nimport ScreenCreate from 'screens/board/thread/create';\r\nimport { BoardView, BoardModPreview } from \"../../components/board/board\";\r\nimport ScreenEdit from 'screens/board/edit';\r\nimport { Portal } from 'components/app/sidebar';\r\nimport { EnumToArray, DropdownEnum } from 'components/dropdown';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { useWindowSize } from 'components/layout';\r\n\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IUserRef, ThreadSelectFilters } from 'model/compiled';\r\nimport { ParallaxProvider, Parallax } from 'react-scroll-parallax';\r\nimport { ImageHeader } from 'components/header';\r\nimport { ModerateForm } from 'components/board/moderator/actions';\r\n\r\nimport BoardSingleThreadOverlayObserver from 'components/board/overlay';\r\n\r\nconst ScreenBoard: React.FC = () => {\r\n    return (\r\n        <BoardView />\r\n    )\r\n}\r\n\r\nexport const RouterThread: React.FC<{}> = ({ }) => {\r\n    const { threadId } = useParams();\r\n    return (\r\n        <ThreadStoreProvider threadId={threadId}>\r\n            <ThreadView threadId={threadId} />\r\n        </ThreadStoreProvider>\r\n    )\r\n}\r\n\r\nconst TwoPaneScaffold: React.FC<{ renderPane: () => any, onHandle?: () => any }> = ({ onHandle, renderPane, children }) => {\r\n    const [width, height] = useWindowSize();\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <p>{width}{height}</p>\r\n                {children}\r\n            </Col>\r\n            {width > 800 && <Col>\r\n                {renderPane()}\r\n            </Col>}\r\n        </Row>\r\n    )\r\n}\r\n\r\nconst BoardThreadOverlay: React.FC<{}> = observer(({ }) => {\r\n    const store = useBoardStore();\r\n    return (\r\n        <Modal show={false}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\"\"</Modal.Title>\r\n                <Modal.Body>\r\n                    <Switch>\r\n                        <Route path={`/+${store.boardId}/:threadId/`} component={RouterThread} />\r\n                    </Switch>\r\n                </Modal.Body>\r\n            </Modal.Header>\r\n        </Modal>\r\n    )\r\n})\r\n\r\nconst BoardScaffold: React.FC<{ boardId: string }> = observer(({ boardId }) => {\r\n    const store = useBoardStore();\r\n    const history = useHistory();\r\n    //const source = useAsObservableSource();\r\n    React.useEffect(() => {\r\n        console.log(\"scaffold arguments changed\");\r\n    }, [store]);\r\n\r\n    return (\r\n        <Container\r\n            fluid\r\n            className=\"m-0 p-0\"\r\n            style={{\r\n                backgroundImage: store.backgroundImage,\r\n                backgroundSize: store.backgroundSize,\r\n                backgroundRepeat: store.backgroundRepeat,\r\n                backgroundAttachment: 'fixed',\r\n            }}\r\n        >\r\n            <Container\r\n                className=\"border-none _border-y p-0 rounded\"\r\n                fluid={store.UIcontainerFluid}\r\n                style={{\r\n                    minHeight: 'calc(100vh - 20px);'\r\n                }}\r\n            >\r\n                <ImageHeader animated src={store.info?.banner ?? \"\"}>\r\n                    <div className=\"d-flex flex-row align-items-center\">\r\n                        <CircleAvatar size={84} src={store.info?.icon ?? undefined} className=\"border\" />\r\n                        <div className=\"ml-4\">\r\n                            <h2 className=\"_display-5\">{store.info?.title ?? boardId}</h2>\r\n                            <h4 className=\"lead\">{store.info?.description ?? \"\"}</h4>\r\n                            <h6>+{boardId}</h6>\r\n                        </div>\r\n                    </div>\r\n                </ImageHeader>\r\n                <Switch>\r\n                    <Route exact path={`/+${boardId}/create`} component={ScreenCreate} />\r\n                    <Route exact path={`/+${boardId}/settings`} component={ScreenEdit} />\r\n                    <Route path={`/+${boardId}/:threadId/(/@:commentId)`} component={RouterThread} />\r\n                    <Route path={`/+${boardId}/:threadId/`} component={RouterThread} />\r\n                    <Route exact path={`/+${boardId}`} component={BoardView} />\r\n                </Switch>\r\n            </Container>\r\n            \r\n            <Portal target=\"screen-right\">\r\n                <Card className=\"mb-2\">\r\n                    <Card.Header>\r\n                        About this Space\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>{store.info?.title}</Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{store.info?.description}</Card.Subtitle>\r\n                    </Card.Body>\r\n                    <ListGroup className=\"list-group-flush\">\r\n                        <ListGroupItem>Created {moment.unix(store.info?.createdAt ?? 0).fromNow()}</ListGroupItem>\r\n                        <ListGroupItem>{store.info?.members ?? '?'} Members</ListGroupItem>\r\n                        <ListGroupItem>{store.info?.posts ?? '?'} Posts</ListGroupItem>\r\n                    </ListGroup>\r\n                    <Card.Body className=\"d-none d-md-block\">\r\n                        <LinkButton to={`/+${store.boardId}/create`}>Post</LinkButton>\r\n                        {!store.info?.isMember &&\r\n                            <IconButton icon={faSearch} onClick={() => store.subscribe()}>Subscribe</IconButton>}\r\n                        {store.info?.isMember &&\r\n                            <IconButton icon={faSearch} onClick={() => store.unsubscribe()}>Unsubscribe</IconButton>}\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card className=\"mb-2\">\r\n                    <Card.Header>\r\n                        Moderators\r\n                    </Card.Header>\r\n                    <ListGroup className=\"list-group-flush\">\r\n                        {store.info?.preview?.map((e) => <ListGroupItem>@{e.username}</ListGroupItem>)}\r\n                    </ListGroup>\r\n                </Card>\r\n\r\n                <Card className=\"mb-2\">\r\n                    <Card.Header>\r\n                        Community Rules\r\n                    </Card.Header>\r\n                </Card>\r\n            </Portal>\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport const RouterBoard: React.FC<RouteComponentProps<{}>> = ({ match }) => {\r\n    console.log(\"[router/board] constructing, \", useParams())\r\n    const { boardId } = useParams();\r\n    return (\r\n        <BoardStoreProvider boardId={boardId}>\r\n            {console.log(\"[router/board] render\")}\r\n            <BoardScaffold boardId={boardId} />\r\n        </BoardStoreProvider>\r\n    )\r\n}","import React from 'react';\r\nimport { Router, Route, Switch, RouteComponentProps } from \"react-router\";\r\nimport { BoardView } from \"components/board/board\";\r\nimport { BoardStoreProvider } from \"../../stores/board\"\r\n\r\nexport const ScreenFrontpage: React.FC<RouteComponentProps<{}>> = () => {\r\n    console.log(\"[frontpage] constructing\")\r\n    return (\r\n        <BoardStoreProvider boardId=\"all\">\r\n            <BoardView />\r\n        </BoardStoreProvider>\r\n    )\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from '../../stores/app';\r\nimport { Link, useLocation, useHistory, useParams } from 'react-router-dom';\r\nimport { LinkButton } from 'components/button';\r\n\r\nimport { OverlayTrigger, Tooltip, Form, Button, Badge, Modal } from 'react-bootstrap';\r\nimport { CircleAvatar } from \"components/user/avatar\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faSearch, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { IBoardSubscription } from 'model/compiled';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\n\r\n/*\r\nconst CircleAvatar: React.FC<{ url: string }> = ({ url }) => {\r\n    return (\r\n        <a className=\"circle-avatar\" href=\"\" style={{ width: 32, height: 32 }} />\r\n    )\r\n}*/\r\n\r\nconst SubscriptionIcon: React.FC<{ data: IBoardSubscription, active: boolean }> = ({ active, data }) => {\r\n    const o = active ? \"border-primary community-icon-active\" : \"community-icon\";\r\n    return (\r\n        <div className=\"item\">\r\n            <Link to={`/+${data.boardId}`}>\r\n                <OverlayTrigger overlay={\r\n                    <Tooltip id=\"tooltip-disabled\">+{data.boardId}\r\n                        <Badge variant=\"primary\">\r\n                            100k\r\n                    </Badge>\r\n                    </Tooltip>\r\n                }>\r\n                    <CommunityAvatar\r\n                        className={o}\r\n                        src={data.icon ?? undefined}\r\n                        label={data.boardId ?? undefined}\r\n                        size={48} />\r\n                </OverlayTrigger>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Params {\r\n    pathId: string\r\n}\r\n\r\nconst SubscriptionList: React.FC<{ data: Array<any> }> = observer(({ data }) => {\r\n    const params: Params = useParams();\r\n    console.log(\"router params => \", params)\r\n    return (\r\n        <div className=\"subscription-items\">\r\n            {data.map(t =>\r\n                <SubscriptionIcon\r\n                    active={params.pathId == t.boardId}\r\n                    key={t.boardId}\r\n                    data={t} />)}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const SubscriptionListWithSearch: React.FC = observer(() => {\r\n    const store = useAppStore();\r\n    const [state, setFilter] = React.useState(\"\");\r\n    const [showOverlay, setOverlay] = React.useState<boolean>(false);\r\n    const history = useHistory();\r\n    const subscriptions = store.active?.subscriptions ?? store.defaults;\r\n    return (\r\n        <div className=\"subscription-list pt-2\">\r\n            <Modal\r\n                onHide={() => setOverlay(false)}\r\n                //size=\"lg\"\r\n                show={showOverlay}>\r\n                <Modal.Header className=\"border-none\" closeButton>\r\n                    <Modal.Title>\r\n                        Subscriptions\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"p-0\">\r\n                    {subscriptions.map(data => data && (\r\n                        <div className=\"p-1 mb-1 border-bottom d-flex justify-content-between align-content-center\">\r\n                            <div>\r\n                                <CommunityAvatar\r\n                                    wrapperClassName=\"mr-2\"\r\n                                    src={data.icon ?? undefined}\r\n                                    label={data.boardId ?? undefined}\r\n                                    size={48} />\r\n                                <span className=\"mr-2\">\r\n                                    +{data.boardId}\r\n                                </span>\r\n                                <span className=\"mr-2\">\r\n                                    {data.members} Members\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"d-flex align-content-center\">\r\n                                <LinkButton to={store.getCommunityLink(data.boardId!)} className=\"mr-1\">View</LinkButton>\r\n                                <Button>Mute</Button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            <div className=\"d-flex flex-column align-items-center mb-2 button-column\">\r\n                <Button onClick={() => store.showSpotlight()} >\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                </Button>\r\n                <Button onClick={() => history.push(\"/create\")} >\r\n                    <FontAwesomeIcon icon={faPlus} />\r\n                </Button>\r\n            </div>\r\n            <Form.Control type=\"text\"\r\n                className=\"mb-2 d-none\"\r\n                placeholder=\"Search subscriptions\"\r\n                onChange={(v) => setFilter(v.target.value)} />\r\n            <SubscriptionList\r\n                data={\r\n                    (state.length == 0) ? subscriptions.slice(0, 12) :\r\n                        subscriptions.filter((v, i) => (v.boardId?.startsWith(state) && i < 10) ? v : null) ?? []} />\r\n            {subscriptions.length > 0 && <div className=\"d-flex flex-column align-items-center button-column\">\r\n                <Button onClick={() => setOverlay(true)} >\r\n                    <FontAwesomeIcon icon={faArrowRight} />\r\n                </Button>\r\n            </div>}\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { TextEditor } from 'components/editor/editor';\r\nimport Editor from 'rich-markdown-editor';\r\nimport { PromiseButton } from 'components/button';\r\nimport { useAppStore } from 'stores/app';\r\nimport { IBoardCreate } from 'model/compiled';\r\n\r\nconst BoardCreateForm: React.FC<{\r\n    onSubmit: (v: IBoardCreate) => Promise<any>\r\n}> = ({ onSubmit }) => {\r\n\r\n    const store = useAppStore();\r\n    const [validated, setValidated] = React.useState(false);\r\n    const [state, set] = React.useState({\r\n        name: \"\",\r\n        description: \"test\",\r\n    })\r\n\r\n    const preSubmit = (): Promise<any> => {\r\n        var o: IBoardCreate = {\r\n            name: state.name,\r\n        };\r\n        return onSubmit(o);\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formThreadTitle\">\r\n                <Form.Label>Community Name</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    onChange={(v) => set({ ...state, name: v.target.value })} />\r\n                <Form.Text className=\"text-muted\"></Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formThreadLink\">\r\n                <Form.Label>Tag line/Title</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    placeholder=\"eg; A community for cats!\"\r\n                    onChange={(v) => set({ ...state, description: v.target.value })} />\r\n                <Form.Text className=\"text-muted\">\r\n                    A short description to go in the title and header.\r\n                </Form.Text>\r\n            </Form.Group>\r\n            <p>You can change everything else later!</p>\r\n\r\n            <Alert variant=\"warning\">\r\n                <Alert.Heading>\r\n                    You are restricted to moderating or owning 6 communities at the same time.\r\n                </Alert.Heading>\r\n                This is to stop community capture, when a small group of users hold control over large numbers of communities\r\n            </Alert>\r\n            <div className=\"d-flex flex-row justify-content-center\">\r\n                <PromiseButton onClick={preSubmit} variant=\"primary\" type=\"submit\">\r\n                    Create\r\n                </PromiseButton>\r\n            </div>\r\n\r\n            {state.name.length > 0 &&\r\n                <p>\r\n                    <h1 className=\"display-1\">{state.name}</h1> <span>a community by @you</span>\r\n                </p>}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default BoardCreateForm;","import React from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport BoardCreateForm from 'components/board/create';\r\n//import { IBoardCreateResponse } from 'model/compiled';\r\n\r\nconst ScreenCreate: React.FC<{ onSubmit: () => Promise<any> }> = ({ onSubmit }) => {\r\n    const app = useAppStore();\r\n    const history = useHistory();\r\n    return (\r\n        <ScreenScaffold title=\"Create a new Community\">\r\n            <BoardCreateForm onSubmit={(o) => app.createCommunity(o).then(\r\n                (unknown) => history.replace(app.getCommunityLink(o.name ?? \"error\")))} />\r\n        </ScreenScaffold>\r\n    )\r\n}\r\n\r\nexport default ScreenCreate;","import React from 'react';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { RequireSignInGateway } from 'components/user/gateway'\r\nimport { Figure, Container, Row, Col, Image, Card, Navbar, Nav, Button, Jumbotron } from 'react-bootstrap';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\nimport { ScreenScaffold } from 'components/screen';\r\nimport { UserStoreProvider, useUserStore } from 'stores/user';\r\nimport { ImageHeader } from 'components/header';\r\nimport { IconButton } from 'components/button';\r\n\r\nconst ProvideUserScaffold: React.FC = () => {\r\n    const { userId } = useParams();\r\n    return (\r\n        <UserStoreProvider userId={userId}>\r\n            <UserScaffold />\r\n        </UserStoreProvider>\r\n    )\r\n}\r\n\r\nconst UserScaffold: React.FC = observer(() => {\r\n    const store = useUserStore();\r\n    const isSelf = store.isSelf();\r\n    return (\r\n        <div>\r\n            <ImageHeader src=\"\">\r\n        \r\n            </ImageHeader>\r\n            <Navbar className=\"sticky shadow-light border-bottom d-flex flex-row justify-content-between align-items-center\">\r\n                <h5>@{store.userId}</h5>\r\n                <div className=\"button-row\">\r\n                    <IconButton variant=\"light\" className=\"rounded\">Follow</IconButton>\r\n                    <IconButton variant=\"light\" className=\"rounded\">Blog</IconButton>\r\n                    <IconButton variant=\"light\" className=\"rounded\">Block</IconButton>\r\n                    <IconButton variant=\"light\" className=\"rounded\">Report</IconButton>\r\n                </div>\r\n            </Navbar>\r\n            <Container>\r\n                <Card>\r\n                    {store.userId} moderates 5 communites.\r\n                </Card>\r\n                <Card>\r\n                    Comments from communities with comments visible from the users profile:\r\n                </Card>\r\n            </Container>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst ScreenAccount: React.FC = ({ }) => {\r\n    const appstore = useAppStore();\r\n    return (\r\n        <ProvideUserScaffold />\r\n    )\r\n}\r\n\r\nexport default ScreenAccount;","import React, { useState } from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport {\r\n    useHistory,\r\n    Link,\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport const UserLoginForm: React.FC<{ onSubmit: (email: string, password: string) => Promise<any> }> = ({ onSubmit }) => {\r\n    let history = useHistory();\r\n\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const [state, set] = useState({\r\n        identifier: \"\",\r\n        password: \"test\",\r\n    })\r\n\r\n    const [error, setError] = useState<number>(0)\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.currentTarget.checkValidity();\r\n        event?.preventDefault()\r\n        onSubmit(state.identifier, state.password).then(t => {\r\n            setError(0)\r\n        }).catch(() => setError(404))\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} validated={validated}>\r\n            <Form.Group controlId=\"formBasicUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"text\"\r\n                    required\r\n                    placeholder=\"Enter username\"\r\n                    onChange={(v) => set({ ...state, identifier: v.target.value })} />\r\n                <Form.Text className=\"text-muted\"></Form.Text>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    {state.identifier} is invalid\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\"\r\n                    required\r\n                    placeholder=\"Password\"\r\n                    onChange={(v) => set({ ...state, password: v.target.value })} />\r\n                <Form.Text className=\"text-muted\">\r\n                    <Link to=\"/login/recover\">I've forgotten my password</Link>\r\n                </Form.Text>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Password is invalid, try again, or if you've forgotten, you could reset it.\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Login\r\n            </Button>\r\n        </Form>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n} from \"react-router-dom\";\r\n\r\nimport { Navbar, Nav, Container, Form, ButtonGroup, Button, Row, Col } from 'react-bootstrap';\r\nimport { useAppStore, AppStoreProvider } from 'stores/app';\r\nimport { observer } from 'mobx-react';\r\nimport { InlineNavCard } from \"components/user/card\"\r\nimport { faAt, faPlus, faProjectDiagram, faAddressCard } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CommunityAvatar } from 'components/board/avatar';\r\n\r\n/**\r\n * favatar\r\n * forumly\r\n * react.site\r\n * discuss.ai\r\n * diskus.dev\r\n * \r\n */\r\n\r\nconst Brand: React.FC<{ className: string }> = ({ className }) => {\r\n    return (\r\n        <Link to=\"/\">\r\n            <Navbar.Brand href=\"/\" className={className} style={{\r\n                //fontWeight: 900,\r\n            }}>\r\n                <CommunityAvatar className=\"d-none _d-md-inline\" size={36} />\r\n                <FontAwesomeIcon className=\"d-none rounded ml-1 mr-1\" icon={faPlus} />\r\n                <span className=\"d-inline d-sm-inline ml-2\">\r\n                    our/space\r\n                </span>\r\n            </Navbar.Brand>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport const NavbarBase: React.FC = ({ children }) => {\r\n    const store = useAppStore();\r\n    const url = \"https://source.unsplash.com/collection/416021/1280x800\";\r\n    const wrap = (child: any) => {\r\n        if (!store.UIanimatedHeader) {\r\n            return child;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"bar gradient-horizontal\"></div>\r\n                {child}\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        wrap(<Navbar\r\n            expand=\"md\"\r\n            bg=\"white\"\r\n            //variant=\"dark\"\r\n            className=\"border-bottom sticky-header shadow-light\"\r\n            style={{\r\n                //backgroundImage: `url('${url}')`,\r\n                backgroundSize: \"cover\",\r\n            }}\r\n        >\r\n            <Container fluid={true}>\r\n                <Brand className=\"d-inline-block\" />\r\n                {children}\r\n            </Container>\r\n        </Navbar>)\r\n    )\r\n}\r\n\r\nexport const SiteNavbar: React.FC = observer(() => {\r\n    const store = useAppStore();\r\n    return (\r\n        <NavbarBase>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\" style={{\r\n                //flexGrow: 2,\r\n            }}>\r\n                <Nav className=\"d-flex flex-grow-1 align-items-center\">\r\n                    {false && <Nav.Item id=\"nav-center\" className=\"_flex-grow-1 py-4 p-md-0\">\r\n                        <Form.Control type=\"text\" placeholder=\"Search\" />\r\n                    </Nav.Item>}\r\n                    {false && <Form inline>\r\n                        <Form.Control type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    </Form>}\r\n                    <Brand className=\"d-block d-sm-none\" />\r\n                    <Nav.Link href=\"/+all\">\r\n                        <FontAwesomeIcon className=\"mr-1\" icon={faProjectDiagram} />\r\n                        Big Spaces\r\n                    </Nav.Link>\r\n                    <Nav.Link href=\"/+all\">\r\n                        <FontAwesomeIcon className=\"mr-1\" icon={faAddressCard} />\r\n                        Little Spaces\r\n                    </Nav.Link>\r\n                    <Nav.Link href=\"/about-and-faq\">Help</Nav.Link>\r\n                    <Nav.Link href=\"/+all\">Support Us</Nav.Link>\r\n                    <Nav.Item className=\"flex-grow-1 flex-row text-right py-2 p-md-0 d-flex d-md-flex _d-md-block justify-content-end\">\r\n                        {store.loggedIn && <InlineNavCard />}\r\n                        {!store.loggedIn ?\r\n                            ([\r\n                                <Link to=\"/login\">\r\n                                    <Button variant=\"primary\" className=\"mr-2 px-md-4\" style={{ borderRadius: '1em' }}>Sign In</Button>\r\n                                </Link>,\r\n                                <Link to=\"/signup\">\r\n                                    <Button variant=\"outline-dark\" className=\"px-md-4\" style={{ borderRadius: '1em' }}>Sign Up</Button>\r\n                                </Link>\r\n                            ]) : null}\r\n                        {/*store.loggedIn && <LinkButton to=\"/logout\">Log out</LinkButton>*/}\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </NavbarBase>\r\n    )\r\n})","import React from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nexport const Jumbosheet: React.FC<{ url?: Array<string> }> = ({ children }) => {\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col className=\"col-1 col-0 col-md-4\" style={{\r\n                    height: \"100vh\",\r\n                    backgroundSize: 'cover',\r\n                    backgroundImage: \"url('https://source.unsplash.com/collection/541345/800x1000')\" //416021\r\n                }} />\r\n                <Col className=\"col-11 col-md-8 p-0 bg-white\">\r\n                    {children}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserLoginForm } from \"components/user/auth/login\"\r\nimport { useAppStore } from 'stores/app';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { SiteNavbar, NavbarBase } from \"components/navbar\"\r\nimport { Jumbosheet } from 'components/jumbosheet';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst ScreenLogin: React.FC = observer(({ }) => {\r\n    const store = useAppStore();\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <Jumbosheet>\r\n            <NavbarBase />\r\n            <div>\r\n                <Container className=\"py-md-5\" style={{ maxWidth: 700 }}>\r\n                    <h1 className=\"display-4 mb-5 mt-5\">Login</h1>\r\n                    {store.loggedIn && <div>\r\n                        <h4>Signed in as @{store.active?.username}</h4>\r\n                        <Button onClick={() => store.logout()} >You need to sign out first.</Button>\r\n                    </div>}\r\n                    {!store.loggedIn && <UserLoginForm\r\n                        onSubmit={(name, key) => \r\n                            store.login(name, key).then(t => history.length > 2 ? history.goBack() : history.push(\"/\"))} />}\r\n                </Container>\r\n            </div>\r\n        </Jumbosheet>\r\n    )\r\n})\r\n\r\nexport default ScreenLogin;","import React, { useState } from 'react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport {\r\n    useHistory,\r\n} from \"react-router-dom\";\r\n\r\nexport const UserSignupForm:\r\n    React.FC<{ onSubmit: (username: string, email: string, password: string) => Promise<any> }> =\r\n    (props) => {\r\n        let history = useHistory();\r\n\r\n        const [state, set] = useState({\r\n            username: \"\",\r\n            email: \"\",\r\n            password: \"\"\r\n        })\r\n\r\n        const [error, setError] = useState<number>(0)\r\n\r\n        const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n            event?.preventDefault()\r\n            props.onSubmit(state.username, state.email, state.password).catch(t => {\r\n                //history.replace(\"/\")\r\n                setError(404)\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formBasicUsername\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        placeholder=\"Enter username\"\r\n                        onChange={(v) => set({ ...state, username: v.target.value })} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Think of a unique username, like ittykitty or DoomMaster1999\r\n                    </Form.Text>\r\n                    <Form.Text className=\"text-muted\">\r\n                        Whatever you want really.\r\n                     </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control type=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        onChange={(v) => set({ ...state, email: v.target.value })} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        We'll never share your email with anyone else, \r\n                            if you lose your password, we'll send a recovery email.\r\n                    </Form.Text>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a email.\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={(v) => set({ ...state, password: v.target.value })} />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a password.\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check\r\n                        required\r\n                        type=\"checkbox\"\r\n                        label=\"I agree with the terms and conditions\"\r\n                        feedback=\"You must agree before submitting.\"\r\n                    />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Sign up\r\n                </Button>\r\n                <p>{error > 0 && \"Something went wrong...\"}</p>\r\n            </Form>\r\n        )\r\n    }","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserSignupForm } from \"components/user/auth/signup\"\r\nimport { useAppStore } from 'stores/app';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Jumbosheet } from 'components/jumbosheet';\r\nimport { SiteNavbar, NavbarBase } from \"components/navbar\"\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst ScreenLogin: React.FC = observer(({ }) => {\r\n    const store = useAppStore();\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <Jumbosheet>\r\n            <NavbarBase />\r\n            <Container className=\"py-md-3\" style={{ maxWidth: 700 }}>\r\n                <h1 className=\"display-4 mb-5 mt-5\">Sign up</h1>\r\n                {store.loggedIn && <div>\r\n                    <h4>Signed in as @{store.active?.username}</h4>\r\n                    <Button onClick={() => store.logout()} >You need to sign out first.</Button>\r\n                </div>}\r\n                {!store.loggedIn && <UserSignupForm onSubmit={\r\n                    (name, email, key) => \r\n                        store.signup(name, email, key)\r\n                        .then(t => history.length > 2 ? history.goBack() : history.replace(\"/\")) } />}\r\n            </Container>\r\n        </Jumbosheet>\r\n    )\r\n})\r\n\r\nexport default ScreenLogin;","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { IEvent } from 'model/net';\r\n\r\nconst NotificationCard: React.FC<{ data: IEvent }> = ({ data }) => {\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <h6>{data.entityId}</h6>\r\n            <p>\r\n\r\n            </p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport const NotificationListObserver: React.FC = observer(() => {\r\n    const app = useAppStore();\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {app.displayableEvent.slice(0, 5).map(t => <NotificationCard key={t.entityId} data={t} />)}\r\n        </ul>\r\n    )\r\n})","import React from 'react';\r\n//import { DataSet, Network } from 'vis-network';\r\nimport { DataSet, Network } from 'vis-network/standalone';\r\n\r\nexport const ScreenExploreGraph: React.FC<{}> = () => {\r\n    const ref = React.useRef<HTMLDivElement>(null);\r\n    React.useEffect(() => {\r\n        let nodes = new DataSet([\r\n            { id: 1, label: 'Node 1' },\r\n            { id: 2, label: 'Node 2' },\r\n            { id: 3, label: 'Node 3' },\r\n            { id: 4, label: 'Node 4' },\r\n            { id: 5, label: 'Node 5' }\r\n        ]);\r\n        if (ref.current)\r\n            new Network(ref.current, { nodes: nodes }, {});\r\n    }, [ref])\r\n    return (\r\n        <div ref={ref} className=\"d-flex align-self-stretch\" \r\n            style={{ height: 'calc(100vh - 60px)'}}></div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Board } from 'stores/board';\r\n\r\nimport { observer } from 'mobx-react';\r\nimport { CircleAvatar } from 'components/user/avatar';\r\n\r\nimport _ from \"lodash\";\r\n\r\nconst CommunityList: React.FC<{ data: Array<Board> }> = ({ data }) => {\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {data.map((e) =>\r\n                <li className=\"list-group-item py-0\">\r\n                    <CircleAvatar src=\"\" size={32} />\r\n                    {e.uId}\r\n                </li>)\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst Spotlight: React.FC = observer(() => {\r\n    const app = useAppStore();\r\n    //const store = useBoardStore();\r\n    const [search, setSearch] = React.useState(\"\");\r\n    const onChange = React.useCallback(_.debounce((v: any) => {\r\n        //store.spotlightQuery = v.target.value;\r\n        app.spotlightQuery(search);\r\n    }, 10), []);\r\n\r\n    return (\r\n        <div style={{ minHeight: \"50vh\" }}>\r\n            <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Search Communities, Memberships, Messages, Users\"\r\n                required\r\n                onChange={(e) => {\r\n                    e.persist();\r\n                    setSearch(e.target.value);\r\n                    onChange(e);\r\n                }} />\r\n            <div>\r\n                <h4>Communities</h4>\r\n                <CommunityList data={app.communitySearch?.data ?? []} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const SpotlightModal: React.FC<{}> =\r\n    observer(({ children }) => {\r\n        const app = useAppStore();\r\n        return (\r\n            <Modal\r\n                show={app.UIShowSpotlight}\r\n                onHide={() => app.UIShowSpotlight = false}\r\n                //backdrop=\"static\"\r\n                size=\"lg\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header className=\"border-none\" closeButton>\r\n                    <Modal.Title></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Spotlight />\r\n                </Modal.Body>\r\n            </Modal >\r\n        );\r\n    })","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useAppStore } from 'stores/app';\r\nimport { Form, Button, InputGroup, Modal } from 'react-bootstrap';\r\nimport { IBoard, IThread, IComment, ICommunityUserRef } from 'model/compiled';\r\n\r\nexport const ModerateForm: React.FC<{ \r\n    src?: IBoard | IThread | IComment | ICommunityUserRef ,\r\n    //b?: IBoard, \r\n    //t?: IThread, \r\n    //c?: IComment \r\n}> = ({ src }) => {\r\n    const store = useAppStore();\r\n\r\n    const [banLength, setBan] = React.useState(0);\r\n    return (\r\n        <div>\r\n            <h5>For:</h5>\r\n\r\n            <div>\r\n                {JSON.stringify(src)}\r\n            </div>\r\n\r\n            <Form>\r\n                <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                    <Form.Label>Reasons</Form.Label>\r\n                    <Form.Control as=\"select\" multiple>\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                        <option>4</option>\r\n                        <option>5</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Check\r\n                    label=\"Is illegal content (any media is deleted, user is permanently banned)\"\r\n                    type=\"checkbox\"\r\n                />\r\n\r\n                <Form.Check\r\n                    onChange={() => setBan(banLength > 0 ? 0 : 10000)}\r\n                    checked={banLength > 0}\r\n                    type=\"checkbox\"\r\n                    label=\"Suspend this user from posting\" />\r\n\r\n                {banLength ? <input type=\"date\" /> : null}\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label>Your reason and any remarks (shown to poster, and visible in the ban log)</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label>A message to the user</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} />\r\n                </Form.Group>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <Button>Cancel</Button>\r\n                    <Button>Submit action</Button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const ModeratorActionsGlobal = observer(() => {\r\n    const store = useAppStore();\r\n    return (\r\n        <Modal show={store.moderate != undefined} onHide={() => store.moderate = undefined} >\r\n            <Modal.Header closeButton>\r\n                Moderation action\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <ModerateForm src={store.moderate} />\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { observer } from 'mobx-react';\r\n\r\nimport {\r\n  Navbar, Nav,\r\n  Container, Form,\r\n  ButtonGroup, Button,\r\n  Row, Col, NavDropdown\r\n} from 'react-bootstrap';\r\n\r\nimport { ModalSheetWrapper } from \"components/modal\";\r\nimport { RouterBoard } from './board';\r\nimport { useAppStore, AppStoreProvider } from '../stores/app';\r\n\r\nimport { ScreenFrontpage } from './home/front';\r\nimport { SubscriptionListWithSearch } from '../components/user/sub';\r\nimport ScreenCreate from 'screens/board/create';\r\n\r\nimport ScreenAccount from \"screens/user/account\"\r\nimport ScreenLogin from \"screens/user/login\"\r\nimport ScreenSignup from \"screens/user/signup\"\r\nimport { SiteNavbar } from \"components/navbar\"\r\nimport { NotificationListObserver } from 'components/user/notification';\r\nimport { ScreenExploreGraph } from 'screens/home/explore';\r\nimport { SpotlightModal } from 'components/spotlight';\r\nimport classNames from 'classnames';\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\nimport Sticky from 'react-stickynode';\r\nimport { SidebarDefault } from 'components/app/sidebar';\r\nimport { ModeratorActionsGlobal } from 'components/board/moderator/actions';\r\n\r\nimport ScreenDonateRouter from 'screens/about/donate';\r\nimport ScreenStaticRouter from 'screens/static/scaffold';\r\n\r\n//import info from './gitinfo.js';\r\n\r\nconst info = \"\";\r\n\r\n// scaffold the navigation sidebar around the main screen\r\nconst Scaffold: React.FC = observer(({ children }) => {\r\n  const app = useAppStore()\r\n  const ref = React.useRef();\r\n  document.body.className = \"fadeIn \" + app.themeName;\r\n\r\n  return (\r\n    <>\r\n      <SiteNavbar />\r\n      <Container fluid id=\"screen-wrapper\" className=\"_header-spacer _no-gutters _p-0\" style={{\r\n        maxWidth: app.UIconstrainContainer ? 1500 : undefined\r\n      }}>\r\n        <Row id=\"screen-row\" className={\"justify-content-around flex-xl-nowrap \" +\r\n          (app.UIconstrainContainer && \"_m-auto\")}\r\n          style={{\r\n            //maxWidth: app.UIconstrainContainer ? 1400 : undefined\r\n          }}>\r\n          <Col id=\"wrapper-screen-left\"\r\n            className={classNames(\"d-none d-md-block border-right bg-white\",\r\n              app.UIconstrainContainer ? \"col-md-4\" : \"col-12 col-md-2 col-xl-1\")} style={{\r\n                maxWidth: \"80px\",\r\n                minWidth: \"64px\"\r\n              }}>\r\n            <div id=\"screen-left\" className=\"sticky\">\r\n              <SubscriptionListWithSearch />\r\n            </div>\r\n          </Col>\r\n          <Col className=\"_h-100 main-content p-0 _p-md-3\">\r\n            {children}\r\n          </Col>\r\n          <Col id=\"wrapper-screen-right\"\r\n            className={classNames(\"d-none d-lg-block border-left _p-0 bg-white\",\r\n              app.UIconstrainContainer ? \"col-md-3\" : \"col-12 col-md-2 col-xl-2\")}>\r\n            <div className=\"_sticky mt-2\">\r\n              <Sticky>\r\n                <SidebarDefault />\r\n                <NotificationListObserver />\r\n              </Sticky>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n})\r\n\r\nexport const BoardRouterWrapper: React.FC = () => {\r\n  return (\r\n    <Scaffold>\r\n      <Switch>\r\n        <Route path=\"/+:boardId\" component={RouterBoard} />\r\n        <Route path=\"/c/:boardId\" component={RouterBoard} />\r\n        <Route path=\"/post/:threadId/:title\" component={() => null} />\r\n        <Route path=\"/@:userId\" component={() => null} />\r\n        <Route path=\"/u/:userId\" component={() => null} />\r\n      </Switch>\r\n      <ModeratorActionsGlobal/>\r\n    </Scaffold>\r\n  )\r\n}\r\n\r\nexport const CommunityWrapper: React.FC = () => {\r\n  return (\r\n    <>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport const RouterRoot: React.FC = observer(({ }) => {\r\n  return (\r\n    <Router>\r\n      <SpotlightModal />\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={ScreenLogin} />\r\n        <Route exact path=\"/login/recover\" component={ScreenLogin} />\r\n        <Route exact path=\"/signup\" component={ScreenSignup} />\r\n        <Route path=\"/+:pathId\" component={BoardRouterWrapper} />\r\n        <Route path=\"/c/:pathId\" component={BoardRouterWrapper} />\r\n        <Scaffold>\r\n          <Route exact path=\"/create\" component={ScreenCreate} />\r\n          <Route exact path=\"/explore/graph\" component={ScreenExploreGraph} />\r\n          <Route exact path=\"/account\" component={ScreenAccount} />\r\n          <Route exact path=\"/@:userId\" component={ScreenAccount} />\r\n\r\n          <Route exact path=\"/all\" component={ScreenFrontpage} />\r\n          <Route exact path=\"/\" component={ScreenFrontpage} />\r\n        </Scaffold>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n})\r\n\r\n// add AppStore context into tree so it can be found by any widget\r\nexport const RouterScaffold: React.FC = () => {\r\n  return (\r\n    <AppStoreProvider>\r\n      <ParallaxProvider>\r\n        <RouterRoot />\r\n      </ParallaxProvider>\r\n    </AppStoreProvider>\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\n\n\nimport { Provider, Observer } from 'mobx-react';\nimport 'mobx-react-lite/batchingForReactDom'\n\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nimport { RouterScaffold } from \"screens/scaffold\"\n\nfunction App() {\n  return (\n    <RouterScaffold />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./types.d.ts\";\nimport \"./types.js\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.User = (function() {\n\n    /**\n     * Properties of a User.\n     * @exports IUser\n     * @interface IUser\n     * @property {number|null} [rId] User rId\n     * @property {string|null} [username] User username\n     * @property {string|null} [email] User email\n     * @property {string|null} [avatar] User avatar\n     */\n\n    /**\n     * Constructs a new User.\n     * @exports User\n     * @classdesc Internal user reference *\n     * @implements IUser\n     * @constructor\n     * @param {IUser=} [properties] Properties to set\n     */\n    function User(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * User rId.\n     * @member {number} rId\n     * @memberof User\n     * @instance\n     */\n    User.prototype.rId = 0;\n\n    /**\n     * User username.\n     * @member {string} username\n     * @memberof User\n     * @instance\n     */\n    User.prototype.username = \"\";\n\n    /**\n     * User email.\n     * @member {string} email\n     * @memberof User\n     * @instance\n     */\n    User.prototype.email = \"\";\n\n    /**\n     * User avatar.\n     * @member {string} avatar\n     * @memberof User\n     * @instance\n     */\n    User.prototype.avatar = \"\";\n\n    /**\n     * Creates a new User instance using the specified properties.\n     * @function create\n     * @memberof User\n     * @static\n     * @param {IUser=} [properties] Properties to set\n     * @returns {User} User instance\n     */\n    User.create = function create(properties) {\n        return new User(properties);\n    };\n\n    /**\n     * Encodes the specified User message. Does not implicitly {@link User.verify|verify} messages.\n     * @function encode\n     * @memberof User\n     * @static\n     * @param {IUser} message User message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    User.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rId != null && Object.hasOwnProperty.call(message, \"rId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rId);\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n        if (message.email != null && Object.hasOwnProperty.call(message, \"email\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.email);\n        if (message.avatar != null && Object.hasOwnProperty.call(message, \"avatar\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified User message, length delimited. Does not implicitly {@link User.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof User\n     * @static\n     * @param {IUser} message User message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    User.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a User message from the specified reader or buffer.\n     * @function decode\n     * @memberof User\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {User} User\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    User.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.User();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rId = reader.uint32();\n                break;\n            case 2:\n                message.username = reader.string();\n                break;\n            case 3:\n                message.email = reader.string();\n                break;\n            case 6:\n                message.avatar = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a User message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof User\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {User} User\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    User.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a User message.\n     * @function verify\n     * @memberof User\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    User.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rId != null && message.hasOwnProperty(\"rId\"))\n            if (!$util.isInteger(message.rId))\n                return \"rId: integer expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            if (!$util.isString(message.email))\n                return \"email: string expected\";\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            if (!$util.isString(message.avatar))\n                return \"avatar: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a User message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof User\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {User} User\n     */\n    User.fromObject = function fromObject(object) {\n        if (object instanceof $root.User)\n            return object;\n        var message = new $root.User();\n        if (object.rId != null)\n            message.rId = object.rId >>> 0;\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.email != null)\n            message.email = String(object.email);\n        if (object.avatar != null)\n            message.avatar = String(object.avatar);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a User message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof User\n     * @static\n     * @param {User} message User\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    User.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.rId = 0;\n            object.username = \"\";\n            object.email = \"\";\n            object.avatar = \"\";\n        }\n        if (message.rId != null && message.hasOwnProperty(\"rId\"))\n            object.rId = message.rId;\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            object.email = message.email;\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            object.avatar = message.avatar;\n        return object;\n    };\n\n    /**\n     * Converts this User to JSON.\n     * @function toJSON\n     * @memberof User\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    User.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return User;\n})();\n\n$root.UserRef = (function() {\n\n    /**\n     * Properties of a UserRef.\n     * @exports IUserRef\n     * @interface IUserRef\n     * @property {string|null} [username] UserRef username\n     * @property {string|null} [avatar] UserRef avatar\n     */\n\n    /**\n     * Constructs a new UserRef.\n     * @exports UserRef\n     * @classdesc Represents a UserRef.\n     * @implements IUserRef\n     * @constructor\n     * @param {IUserRef=} [properties] Properties to set\n     */\n    function UserRef(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserRef username.\n     * @member {string} username\n     * @memberof UserRef\n     * @instance\n     */\n    UserRef.prototype.username = \"\";\n\n    /**\n     * UserRef avatar.\n     * @member {string} avatar\n     * @memberof UserRef\n     * @instance\n     */\n    UserRef.prototype.avatar = \"\";\n\n    /**\n     * Creates a new UserRef instance using the specified properties.\n     * @function create\n     * @memberof UserRef\n     * @static\n     * @param {IUserRef=} [properties] Properties to set\n     * @returns {UserRef} UserRef instance\n     */\n    UserRef.create = function create(properties) {\n        return new UserRef(properties);\n    };\n\n    /**\n     * Encodes the specified UserRef message. Does not implicitly {@link UserRef.verify|verify} messages.\n     * @function encode\n     * @memberof UserRef\n     * @static\n     * @param {IUserRef} message UserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserRef.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n        if (message.avatar != null && Object.hasOwnProperty.call(message, \"avatar\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserRef message, length delimited. Does not implicitly {@link UserRef.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserRef\n     * @static\n     * @param {IUserRef} message UserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserRef.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserRef message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserRef} UserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserRef.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserRef();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.username = reader.string();\n                break;\n            case 6:\n                message.avatar = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserRef message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserRef} UserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserRef.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserRef message.\n     * @function verify\n     * @memberof UserRef\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserRef.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            if (!$util.isString(message.avatar))\n                return \"avatar: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserRef message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserRef\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserRef} UserRef\n     */\n    UserRef.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserRef)\n            return object;\n        var message = new $root.UserRef();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.avatar != null)\n            message.avatar = String(object.avatar);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserRef message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserRef\n     * @static\n     * @param {UserRef} message UserRef\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserRef.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.avatar = \"\";\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            object.avatar = message.avatar;\n        return object;\n    };\n\n    /**\n     * Converts this UserRef to JSON.\n     * @function toJSON\n     * @memberof UserRef\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserRef.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserRef;\n})();\n\n$root.AccountState = (function() {\n\n    /**\n     * Properties of an AccountState.\n     * @exports IAccountState\n     * @interface IAccountState\n     * @property {Array.<IBoardSubscription>|null} [subscriptions] AccountState subscriptions\n     * @property {number|null} [karma] AccountState karma\n     * @property {number|null} [upvotes] AccountState upvotes\n     * @property {number|null} [downvotes] AccountState downvotes\n     */\n\n    /**\n     * Constructs a new AccountState.\n     * @exports AccountState\n     * @classdesc Represents an AccountState.\n     * @implements IAccountState\n     * @constructor\n     * @param {IAccountState=} [properties] Properties to set\n     */\n    function AccountState(properties) {\n        this.subscriptions = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AccountState subscriptions.\n     * @member {Array.<IBoardSubscription>} subscriptions\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.subscriptions = $util.emptyArray;\n\n    /**\n     * AccountState karma.\n     * @member {number} karma\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.karma = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * AccountState upvotes.\n     * @member {number} upvotes\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.upvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * AccountState downvotes.\n     * @member {number} downvotes\n     * @memberof AccountState\n     * @instance\n     */\n    AccountState.prototype.downvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new AccountState instance using the specified properties.\n     * @function create\n     * @memberof AccountState\n     * @static\n     * @param {IAccountState=} [properties] Properties to set\n     * @returns {AccountState} AccountState instance\n     */\n    AccountState.create = function create(properties) {\n        return new AccountState(properties);\n    };\n\n    /**\n     * Encodes the specified AccountState message. Does not implicitly {@link AccountState.verify|verify} messages.\n     * @function encode\n     * @memberof AccountState\n     * @static\n     * @param {IAccountState} message AccountState message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AccountState.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.subscriptions != null && message.subscriptions.length)\n            for (var i = 0; i < message.subscriptions.length; ++i)\n                $root.BoardSubscription.encode(message.subscriptions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.karma != null && Object.hasOwnProperty.call(message, \"karma\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.karma);\n        if (message.upvotes != null && Object.hasOwnProperty.call(message, \"upvotes\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.upvotes);\n        if (message.downvotes != null && Object.hasOwnProperty.call(message, \"downvotes\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.downvotes);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AccountState message, length delimited. Does not implicitly {@link AccountState.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AccountState\n     * @static\n     * @param {IAccountState} message AccountState message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AccountState.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AccountState message from the specified reader or buffer.\n     * @function decode\n     * @memberof AccountState\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AccountState} AccountState\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AccountState.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AccountState();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                if (!(message.subscriptions && message.subscriptions.length))\n                    message.subscriptions = [];\n                message.subscriptions.push($root.BoardSubscription.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                message.karma = reader.int64();\n                break;\n            case 5:\n                message.upvotes = reader.int64();\n                break;\n            case 6:\n                message.downvotes = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AccountState message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AccountState\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AccountState} AccountState\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AccountState.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AccountState message.\n     * @function verify\n     * @memberof AccountState\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AccountState.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.subscriptions != null && message.hasOwnProperty(\"subscriptions\")) {\n            if (!Array.isArray(message.subscriptions))\n                return \"subscriptions: array expected\";\n            for (var i = 0; i < message.subscriptions.length; ++i) {\n                var error = $root.BoardSubscription.verify(message.subscriptions[i]);\n                if (error)\n                    return \"subscriptions.\" + error;\n            }\n        }\n        if (message.karma != null && message.hasOwnProperty(\"karma\"))\n            if (!$util.isInteger(message.karma) && !(message.karma && $util.isInteger(message.karma.low) && $util.isInteger(message.karma.high)))\n                return \"karma: integer|Long expected\";\n        if (message.upvotes != null && message.hasOwnProperty(\"upvotes\"))\n            if (!$util.isInteger(message.upvotes) && !(message.upvotes && $util.isInteger(message.upvotes.low) && $util.isInteger(message.upvotes.high)))\n                return \"upvotes: integer|Long expected\";\n        if (message.downvotes != null && message.hasOwnProperty(\"downvotes\"))\n            if (!$util.isInteger(message.downvotes) && !(message.downvotes && $util.isInteger(message.downvotes.low) && $util.isInteger(message.downvotes.high)))\n                return \"downvotes: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates an AccountState message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AccountState\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AccountState} AccountState\n     */\n    AccountState.fromObject = function fromObject(object) {\n        if (object instanceof $root.AccountState)\n            return object;\n        var message = new $root.AccountState();\n        if (object.subscriptions) {\n            if (!Array.isArray(object.subscriptions))\n                throw TypeError(\".AccountState.subscriptions: array expected\");\n            message.subscriptions = [];\n            for (var i = 0; i < object.subscriptions.length; ++i) {\n                if (typeof object.subscriptions[i] !== \"object\")\n                    throw TypeError(\".AccountState.subscriptions: object expected\");\n                message.subscriptions[i] = $root.BoardSubscription.fromObject(object.subscriptions[i]);\n            }\n        }\n        if (object.karma != null)\n            if ($util.Long)\n                (message.karma = $util.Long.fromValue(object.karma)).unsigned = false;\n            else if (typeof object.karma === \"string\")\n                message.karma = parseInt(object.karma, 10);\n            else if (typeof object.karma === \"number\")\n                message.karma = object.karma;\n            else if (typeof object.karma === \"object\")\n                message.karma = new $util.LongBits(object.karma.low >>> 0, object.karma.high >>> 0).toNumber();\n        if (object.upvotes != null)\n            if ($util.Long)\n                (message.upvotes = $util.Long.fromValue(object.upvotes)).unsigned = false;\n            else if (typeof object.upvotes === \"string\")\n                message.upvotes = parseInt(object.upvotes, 10);\n            else if (typeof object.upvotes === \"number\")\n                message.upvotes = object.upvotes;\n            else if (typeof object.upvotes === \"object\")\n                message.upvotes = new $util.LongBits(object.upvotes.low >>> 0, object.upvotes.high >>> 0).toNumber();\n        if (object.downvotes != null)\n            if ($util.Long)\n                (message.downvotes = $util.Long.fromValue(object.downvotes)).unsigned = false;\n            else if (typeof object.downvotes === \"string\")\n                message.downvotes = parseInt(object.downvotes, 10);\n            else if (typeof object.downvotes === \"number\")\n                message.downvotes = object.downvotes;\n            else if (typeof object.downvotes === \"object\")\n                message.downvotes = new $util.LongBits(object.downvotes.low >>> 0, object.downvotes.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AccountState message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AccountState\n     * @static\n     * @param {AccountState} message AccountState\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AccountState.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.subscriptions = [];\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.karma = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.karma = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.upvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.upvotes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.downvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.downvotes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.subscriptions && message.subscriptions.length) {\n            object.subscriptions = [];\n            for (var j = 0; j < message.subscriptions.length; ++j)\n                object.subscriptions[j] = $root.BoardSubscription.toObject(message.subscriptions[j], options);\n        }\n        if (message.karma != null && message.hasOwnProperty(\"karma\"))\n            if (typeof message.karma === \"number\")\n                object.karma = options.longs === String ? String(message.karma) : message.karma;\n            else\n                object.karma = options.longs === String ? $util.Long.prototype.toString.call(message.karma) : options.longs === Number ? new $util.LongBits(message.karma.low >>> 0, message.karma.high >>> 0).toNumber() : message.karma;\n        if (message.upvotes != null && message.hasOwnProperty(\"upvotes\"))\n            if (typeof message.upvotes === \"number\")\n                object.upvotes = options.longs === String ? String(message.upvotes) : message.upvotes;\n            else\n                object.upvotes = options.longs === String ? $util.Long.prototype.toString.call(message.upvotes) : options.longs === Number ? new $util.LongBits(message.upvotes.low >>> 0, message.upvotes.high >>> 0).toNumber() : message.upvotes;\n        if (message.downvotes != null && message.hasOwnProperty(\"downvotes\"))\n            if (typeof message.downvotes === \"number\")\n                object.downvotes = options.longs === String ? String(message.downvotes) : message.downvotes;\n            else\n                object.downvotes = options.longs === String ? $util.Long.prototype.toString.call(message.downvotes) : options.longs === Number ? new $util.LongBits(message.downvotes.low >>> 0, message.downvotes.high >>> 0).toNumber() : message.downvotes;\n        return object;\n    };\n\n    /**\n     * Converts this AccountState to JSON.\n     * @function toJSON\n     * @memberof AccountState\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AccountState.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AccountState;\n})();\n\n$root.LoginRequest = (function() {\n\n    /**\n     * Properties of a LoginRequest.\n     * @exports ILoginRequest\n     * @interface ILoginRequest\n     * @property {string|null} [username] LoginRequest username\n     * @property {string|null} [password] LoginRequest password\n     */\n\n    /**\n     * Constructs a new LoginRequest.\n     * @exports LoginRequest\n     * @classdesc Represents a LoginRequest.\n     * @implements ILoginRequest\n     * @constructor\n     * @param {ILoginRequest=} [properties] Properties to set\n     */\n    function LoginRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LoginRequest username.\n     * @member {string} username\n     * @memberof LoginRequest\n     * @instance\n     */\n    LoginRequest.prototype.username = \"\";\n\n    /**\n     * LoginRequest password.\n     * @member {string} password\n     * @memberof LoginRequest\n     * @instance\n     */\n    LoginRequest.prototype.password = \"\";\n\n    /**\n     * Creates a new LoginRequest instance using the specified properties.\n     * @function create\n     * @memberof LoginRequest\n     * @static\n     * @param {ILoginRequest=} [properties] Properties to set\n     * @returns {LoginRequest} LoginRequest instance\n     */\n    LoginRequest.create = function create(properties) {\n        return new LoginRequest(properties);\n    };\n\n    /**\n     * Encodes the specified LoginRequest message. Does not implicitly {@link LoginRequest.verify|verify} messages.\n     * @function encode\n     * @memberof LoginRequest\n     * @static\n     * @param {ILoginRequest} message LoginRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);\n        if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link LoginRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LoginRequest\n     * @static\n     * @param {ILoginRequest} message LoginRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LoginRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof LoginRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LoginRequest} LoginRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.username = reader.string();\n                break;\n            case 2:\n                message.password = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a LoginRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LoginRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LoginRequest} LoginRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a LoginRequest message.\n     * @function verify\n     * @memberof LoginRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    LoginRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.password != null && message.hasOwnProperty(\"password\"))\n            if (!$util.isString(message.password))\n                return \"password: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof LoginRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {LoginRequest} LoginRequest\n     */\n    LoginRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.LoginRequest)\n            return object;\n        var message = new $root.LoginRequest();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.password != null)\n            message.password = String(object.password);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof LoginRequest\n     * @static\n     * @param {LoginRequest} message LoginRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    LoginRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.password = \"\";\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.password != null && message.hasOwnProperty(\"password\"))\n            object.password = message.password;\n        return object;\n    };\n\n    /**\n     * Converts this LoginRequest to JSON.\n     * @function toJSON\n     * @memberof LoginRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    LoginRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LoginRequest;\n})();\n\n$root.TokenPair = (function() {\n\n    /**\n     * Properties of a TokenPair.\n     * @exports ITokenPair\n     * @interface ITokenPair\n     * @property {string|null} [accessToken] TokenPair accessToken\n     * @property {string|null} [refreshToken] TokenPair refreshToken\n     */\n\n    /**\n     * Constructs a new TokenPair.\n     * @exports TokenPair\n     * @classdesc Represents a TokenPair.\n     * @implements ITokenPair\n     * @constructor\n     * @param {ITokenPair=} [properties] Properties to set\n     */\n    function TokenPair(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TokenPair accessToken.\n     * @member {string} accessToken\n     * @memberof TokenPair\n     * @instance\n     */\n    TokenPair.prototype.accessToken = \"\";\n\n    /**\n     * TokenPair refreshToken.\n     * @member {string} refreshToken\n     * @memberof TokenPair\n     * @instance\n     */\n    TokenPair.prototype.refreshToken = \"\";\n\n    /**\n     * Creates a new TokenPair instance using the specified properties.\n     * @function create\n     * @memberof TokenPair\n     * @static\n     * @param {ITokenPair=} [properties] Properties to set\n     * @returns {TokenPair} TokenPair instance\n     */\n    TokenPair.create = function create(properties) {\n        return new TokenPair(properties);\n    };\n\n    /**\n     * Encodes the specified TokenPair message. Does not implicitly {@link TokenPair.verify|verify} messages.\n     * @function encode\n     * @memberof TokenPair\n     * @static\n     * @param {ITokenPair} message TokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TokenPair.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.accessToken != null && Object.hasOwnProperty.call(message, \"accessToken\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.accessToken);\n        if (message.refreshToken != null && Object.hasOwnProperty.call(message, \"refreshToken\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.refreshToken);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TokenPair message, length delimited. Does not implicitly {@link TokenPair.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TokenPair\n     * @static\n     * @param {ITokenPair} message TokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TokenPair.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TokenPair message from the specified reader or buffer.\n     * @function decode\n     * @memberof TokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TokenPair} TokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TokenPair.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TokenPair();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.accessToken = reader.string();\n                break;\n            case 2:\n                message.refreshToken = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TokenPair message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TokenPair} TokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TokenPair.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TokenPair message.\n     * @function verify\n     * @memberof TokenPair\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TokenPair.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            if (!$util.isString(message.accessToken))\n                return \"accessToken: string expected\";\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            if (!$util.isString(message.refreshToken))\n                return \"refreshToken: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a TokenPair message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TokenPair\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TokenPair} TokenPair\n     */\n    TokenPair.fromObject = function fromObject(object) {\n        if (object instanceof $root.TokenPair)\n            return object;\n        var message = new $root.TokenPair();\n        if (object.accessToken != null)\n            message.accessToken = String(object.accessToken);\n        if (object.refreshToken != null)\n            message.refreshToken = String(object.refreshToken);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TokenPair message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TokenPair\n     * @static\n     * @param {TokenPair} message TokenPair\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TokenPair.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.accessToken = \"\";\n            object.refreshToken = \"\";\n        }\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            object.accessToken = message.accessToken;\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            object.refreshToken = message.refreshToken;\n        return object;\n    };\n\n    /**\n     * Converts this TokenPair to JSON.\n     * @function toJSON\n     * @memberof TokenPair\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TokenPair.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TokenPair;\n})();\n\n$root.JwtTokenPair = (function() {\n\n    /**\n     * Properties of a JwtTokenPair.\n     * @exports IJwtTokenPair\n     * @interface IJwtTokenPair\n     * @property {string|null} [accessToken] JwtTokenPair accessToken\n     * @property {string|null} [refreshToken] JwtTokenPair refreshToken\n     */\n\n    /**\n     * Constructs a new JwtTokenPair.\n     * @exports JwtTokenPair\n     * @classdesc Represents a JwtTokenPair.\n     * @implements IJwtTokenPair\n     * @constructor\n     * @param {IJwtTokenPair=} [properties] Properties to set\n     */\n    function JwtTokenPair(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * JwtTokenPair accessToken.\n     * @member {string} accessToken\n     * @memberof JwtTokenPair\n     * @instance\n     */\n    JwtTokenPair.prototype.accessToken = \"\";\n\n    /**\n     * JwtTokenPair refreshToken.\n     * @member {string} refreshToken\n     * @memberof JwtTokenPair\n     * @instance\n     */\n    JwtTokenPair.prototype.refreshToken = \"\";\n\n    /**\n     * Creates a new JwtTokenPair instance using the specified properties.\n     * @function create\n     * @memberof JwtTokenPair\n     * @static\n     * @param {IJwtTokenPair=} [properties] Properties to set\n     * @returns {JwtTokenPair} JwtTokenPair instance\n     */\n    JwtTokenPair.create = function create(properties) {\n        return new JwtTokenPair(properties);\n    };\n\n    /**\n     * Encodes the specified JwtTokenPair message. Does not implicitly {@link JwtTokenPair.verify|verify} messages.\n     * @function encode\n     * @memberof JwtTokenPair\n     * @static\n     * @param {IJwtTokenPair} message JwtTokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    JwtTokenPair.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.accessToken != null && Object.hasOwnProperty.call(message, \"accessToken\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.accessToken);\n        if (message.refreshToken != null && Object.hasOwnProperty.call(message, \"refreshToken\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.refreshToken);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified JwtTokenPair message, length delimited. Does not implicitly {@link JwtTokenPair.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof JwtTokenPair\n     * @static\n     * @param {IJwtTokenPair} message JwtTokenPair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    JwtTokenPair.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a JwtTokenPair message from the specified reader or buffer.\n     * @function decode\n     * @memberof JwtTokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {JwtTokenPair} JwtTokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    JwtTokenPair.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.JwtTokenPair();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.accessToken = reader.string();\n                break;\n            case 2:\n                message.refreshToken = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a JwtTokenPair message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof JwtTokenPair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {JwtTokenPair} JwtTokenPair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    JwtTokenPair.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a JwtTokenPair message.\n     * @function verify\n     * @memberof JwtTokenPair\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    JwtTokenPair.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            if (!$util.isString(message.accessToken))\n                return \"accessToken: string expected\";\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            if (!$util.isString(message.refreshToken))\n                return \"refreshToken: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a JwtTokenPair message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof JwtTokenPair\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {JwtTokenPair} JwtTokenPair\n     */\n    JwtTokenPair.fromObject = function fromObject(object) {\n        if (object instanceof $root.JwtTokenPair)\n            return object;\n        var message = new $root.JwtTokenPair();\n        if (object.accessToken != null)\n            message.accessToken = String(object.accessToken);\n        if (object.refreshToken != null)\n            message.refreshToken = String(object.refreshToken);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a JwtTokenPair message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof JwtTokenPair\n     * @static\n     * @param {JwtTokenPair} message JwtTokenPair\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    JwtTokenPair.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.accessToken = \"\";\n            object.refreshToken = \"\";\n        }\n        if (message.accessToken != null && message.hasOwnProperty(\"accessToken\"))\n            object.accessToken = message.accessToken;\n        if (message.refreshToken != null && message.hasOwnProperty(\"refreshToken\"))\n            object.refreshToken = message.refreshToken;\n        return object;\n    };\n\n    /**\n     * Converts this JwtTokenPair to JSON.\n     * @function toJSON\n     * @memberof JwtTokenPair\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    JwtTokenPair.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return JwtTokenPair;\n})();\n\n$root.LoginResponse = (function() {\n\n    /**\n     * Properties of a LoginResponse.\n     * @exports ILoginResponse\n     * @interface ILoginResponse\n     * @property {string|null} [userId] LoginResponse userId\n     * @property {IJwtTokenPair|null} [tokens] LoginResponse tokens\n     * @property {IAccountState|null} [state] LoginResponse state\n     */\n\n    /**\n     * Constructs a new LoginResponse.\n     * @exports LoginResponse\n     * @classdesc Represents a LoginResponse.\n     * @implements ILoginResponse\n     * @constructor\n     * @param {ILoginResponse=} [properties] Properties to set\n     */\n    function LoginResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LoginResponse userId.\n     * @member {string} userId\n     * @memberof LoginResponse\n     * @instance\n     */\n    LoginResponse.prototype.userId = \"\";\n\n    /**\n     * LoginResponse tokens.\n     * @member {IJwtTokenPair|null|undefined} tokens\n     * @memberof LoginResponse\n     * @instance\n     */\n    LoginResponse.prototype.tokens = null;\n\n    /**\n     * LoginResponse state.\n     * @member {IAccountState|null|undefined} state\n     * @memberof LoginResponse\n     * @instance\n     */\n    LoginResponse.prototype.state = null;\n\n    /**\n     * Creates a new LoginResponse instance using the specified properties.\n     * @function create\n     * @memberof LoginResponse\n     * @static\n     * @param {ILoginResponse=} [properties] Properties to set\n     * @returns {LoginResponse} LoginResponse instance\n     */\n    LoginResponse.create = function create(properties) {\n        return new LoginResponse(properties);\n    };\n\n    /**\n     * Encodes the specified LoginResponse message. Does not implicitly {@link LoginResponse.verify|verify} messages.\n     * @function encode\n     * @memberof LoginResponse\n     * @static\n     * @param {ILoginResponse} message LoginResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.tokens != null && Object.hasOwnProperty.call(message, \"tokens\"))\n            $root.JwtTokenPair.encode(message.tokens, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.state != null && Object.hasOwnProperty.call(message, \"state\"))\n            $root.AccountState.encode(message.state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified LoginResponse message, length delimited. Does not implicitly {@link LoginResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LoginResponse\n     * @static\n     * @param {ILoginResponse} message LoginResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LoginResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LoginResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof LoginResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LoginResponse} LoginResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.tokens = $root.JwtTokenPair.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.state = $root.AccountState.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a LoginResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LoginResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LoginResponse} LoginResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LoginResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a LoginResponse message.\n     * @function verify\n     * @memberof LoginResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    LoginResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.tokens != null && message.hasOwnProperty(\"tokens\")) {\n            var error = $root.JwtTokenPair.verify(message.tokens);\n            if (error)\n                return \"tokens.\" + error;\n        }\n        if (message.state != null && message.hasOwnProperty(\"state\")) {\n            var error = $root.AccountState.verify(message.state);\n            if (error)\n                return \"state.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a LoginResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof LoginResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {LoginResponse} LoginResponse\n     */\n    LoginResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.LoginResponse)\n            return object;\n        var message = new $root.LoginResponse();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.tokens != null) {\n            if (typeof object.tokens !== \"object\")\n                throw TypeError(\".LoginResponse.tokens: object expected\");\n            message.tokens = $root.JwtTokenPair.fromObject(object.tokens);\n        }\n        if (object.state != null) {\n            if (typeof object.state !== \"object\")\n                throw TypeError(\".LoginResponse.state: object expected\");\n            message.state = $root.AccountState.fromObject(object.state);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a LoginResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof LoginResponse\n     * @static\n     * @param {LoginResponse} message LoginResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    LoginResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.tokens = null;\n            object.state = null;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.tokens != null && message.hasOwnProperty(\"tokens\"))\n            object.tokens = $root.JwtTokenPair.toObject(message.tokens, options);\n        if (message.state != null && message.hasOwnProperty(\"state\"))\n            object.state = $root.AccountState.toObject(message.state, options);\n        return object;\n    };\n\n    /**\n     * Converts this LoginResponse to JSON.\n     * @function toJSON\n     * @memberof LoginResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    LoginResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LoginResponse;\n})();\n\n$root.ThreadCreateRequest = (function() {\n\n    /**\n     * Properties of a ThreadCreateRequest.\n     * @exports IThreadCreateRequest\n     * @interface IThreadCreateRequest\n     * @property {string|null} [boardId] ThreadCreateRequest boardId\n     * @property {string|null} [title] ThreadCreateRequest title\n     * @property {string|null} [link] ThreadCreateRequest link\n     * @property {string|null} [content] ThreadCreateRequest content\n     * @property {number|null} [createdAtHint] ThreadCreateRequest createdAtHint\n     */\n\n    /**\n     * Constructs a new ThreadCreateRequest.\n     * @exports ThreadCreateRequest\n     * @classdesc Represents a ThreadCreateRequest.\n     * @implements IThreadCreateRequest\n     * @constructor\n     * @param {IThreadCreateRequest=} [properties] Properties to set\n     */\n    function ThreadCreateRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadCreateRequest boardId.\n     * @member {string} boardId\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.boardId = \"\";\n\n    /**\n     * ThreadCreateRequest title.\n     * @member {string} title\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.title = \"\";\n\n    /**\n     * ThreadCreateRequest link.\n     * @member {string} link\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.link = \"\";\n\n    /**\n     * ThreadCreateRequest content.\n     * @member {string} content\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.content = \"\";\n\n    /**\n     * ThreadCreateRequest createdAtHint.\n     * @member {number} createdAtHint\n     * @memberof ThreadCreateRequest\n     * @instance\n     */\n    ThreadCreateRequest.prototype.createdAtHint = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ThreadCreateRequest instance using the specified properties.\n     * @function create\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {IThreadCreateRequest=} [properties] Properties to set\n     * @returns {ThreadCreateRequest} ThreadCreateRequest instance\n     */\n    ThreadCreateRequest.create = function create(properties) {\n        return new ThreadCreateRequest(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadCreateRequest message. Does not implicitly {@link ThreadCreateRequest.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {IThreadCreateRequest} message ThreadCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);\n        if (message.link != null && Object.hasOwnProperty.call(message, \"link\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.link);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n        if (message.createdAtHint != null && Object.hasOwnProperty.call(message, \"createdAtHint\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createdAtHint);\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.boardId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadCreateRequest message, length delimited. Does not implicitly {@link ThreadCreateRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {IThreadCreateRequest} message ThreadCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadCreateRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadCreateRequest} ThreadCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadCreateRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 5:\n                message.boardId = reader.string();\n                break;\n            case 1:\n                message.title = reader.string();\n                break;\n            case 2:\n                message.link = reader.string();\n                break;\n            case 3:\n                message.content = reader.string();\n                break;\n            case 4:\n                message.createdAtHint = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadCreateRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadCreateRequest} ThreadCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadCreateRequest message.\n     * @function verify\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadCreateRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            if (!$util.isString(message.link))\n                return \"link: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.createdAtHint != null && message.hasOwnProperty(\"createdAtHint\"))\n            if (!$util.isInteger(message.createdAtHint) && !(message.createdAtHint && $util.isInteger(message.createdAtHint.low) && $util.isInteger(message.createdAtHint.high)))\n                return \"createdAtHint: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadCreateRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadCreateRequest} ThreadCreateRequest\n     */\n    ThreadCreateRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadCreateRequest)\n            return object;\n        var message = new $root.ThreadCreateRequest();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.link != null)\n            message.link = String(object.link);\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.createdAtHint != null)\n            if ($util.Long)\n                (message.createdAtHint = $util.Long.fromValue(object.createdAtHint)).unsigned = false;\n            else if (typeof object.createdAtHint === \"string\")\n                message.createdAtHint = parseInt(object.createdAtHint, 10);\n            else if (typeof object.createdAtHint === \"number\")\n                message.createdAtHint = object.createdAtHint;\n            else if (typeof object.createdAtHint === \"object\")\n                message.createdAtHint = new $util.LongBits(object.createdAtHint.low >>> 0, object.createdAtHint.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadCreateRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadCreateRequest\n     * @static\n     * @param {ThreadCreateRequest} message ThreadCreateRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadCreateRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.title = \"\";\n            object.link = \"\";\n            object.content = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAtHint = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAtHint = options.longs === String ? \"0\" : 0;\n            object.boardId = \"\";\n        }\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            object.link = message.link;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.createdAtHint != null && message.hasOwnProperty(\"createdAtHint\"))\n            if (typeof message.createdAtHint === \"number\")\n                object.createdAtHint = options.longs === String ? String(message.createdAtHint) : message.createdAtHint;\n            else\n                object.createdAtHint = options.longs === String ? $util.Long.prototype.toString.call(message.createdAtHint) : options.longs === Number ? new $util.LongBits(message.createdAtHint.low >>> 0, message.createdAtHint.high >>> 0).toNumber() : message.createdAtHint;\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadCreateRequest to JSON.\n     * @function toJSON\n     * @memberof ThreadCreateRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadCreateRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadCreateRequest;\n})();\n\n$root.ThreadCreateResponse = (function() {\n\n    /**\n     * Properties of a ThreadCreateResponse.\n     * @exports IThreadCreateResponse\n     * @interface IThreadCreateResponse\n     * @property {string|null} [threadId] ThreadCreateResponse threadId\n     */\n\n    /**\n     * Constructs a new ThreadCreateResponse.\n     * @exports ThreadCreateResponse\n     * @classdesc Represents a ThreadCreateResponse.\n     * @implements IThreadCreateResponse\n     * @constructor\n     * @param {IThreadCreateResponse=} [properties] Properties to set\n     */\n    function ThreadCreateResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadCreateResponse threadId.\n     * @member {string} threadId\n     * @memberof ThreadCreateResponse\n     * @instance\n     */\n    ThreadCreateResponse.prototype.threadId = \"\";\n\n    /**\n     * Creates a new ThreadCreateResponse instance using the specified properties.\n     * @function create\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {IThreadCreateResponse=} [properties] Properties to set\n     * @returns {ThreadCreateResponse} ThreadCreateResponse instance\n     */\n    ThreadCreateResponse.create = function create(properties) {\n        return new ThreadCreateResponse(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadCreateResponse message. Does not implicitly {@link ThreadCreateResponse.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {IThreadCreateResponse} message ThreadCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.threadId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadCreateResponse message, length delimited. Does not implicitly {@link ThreadCreateResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {IThreadCreateResponse} message ThreadCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadCreateResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadCreateResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadCreateResponse} ThreadCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadCreateResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threadId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadCreateResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadCreateResponse} ThreadCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadCreateResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadCreateResponse message.\n     * @function verify\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadCreateResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadCreateResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadCreateResponse} ThreadCreateResponse\n     */\n    ThreadCreateResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadCreateResponse)\n            return object;\n        var message = new $root.ThreadCreateResponse();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadCreateResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadCreateResponse\n     * @static\n     * @param {ThreadCreateResponse} message ThreadCreateResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadCreateResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.threadId = \"\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadCreateResponse to JSON.\n     * @function toJSON\n     * @memberof ThreadCreateResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadCreateResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadCreateResponse;\n})();\n\n$root.ThreadWithBoardContext = (function() {\n\n    /**\n     * Properties of a ThreadWithBoardContext.\n     * @exports IThreadWithBoardContext\n     * @interface IThreadWithBoardContext\n     * @property {IThread|null} [thread] ThreadWithBoardContext thread\n     * @property {ICommentSelectResponse|null} [comments] ThreadWithBoardContext comments\n     * @property {ICommentSelectGraphResponse|null} [commentsGraph] ThreadWithBoardContext commentsGraph\n     * @property {IBoard|null} [board] ThreadWithBoardContext board\n     */\n\n    /**\n     * Constructs a new ThreadWithBoardContext.\n     * @exports ThreadWithBoardContext\n     * @classdesc Represents a ThreadWithBoardContext.\n     * @implements IThreadWithBoardContext\n     * @constructor\n     * @param {IThreadWithBoardContext=} [properties] Properties to set\n     */\n    function ThreadWithBoardContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadWithBoardContext thread.\n     * @member {IThread|null|undefined} thread\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.thread = null;\n\n    /**\n     * ThreadWithBoardContext comments.\n     * @member {ICommentSelectResponse|null|undefined} comments\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.comments = null;\n\n    /**\n     * ThreadWithBoardContext commentsGraph.\n     * @member {ICommentSelectGraphResponse|null|undefined} commentsGraph\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.commentsGraph = null;\n\n    /**\n     * ThreadWithBoardContext board.\n     * @member {IBoard|null|undefined} board\n     * @memberof ThreadWithBoardContext\n     * @instance\n     */\n    ThreadWithBoardContext.prototype.board = null;\n\n    /**\n     * Creates a new ThreadWithBoardContext instance using the specified properties.\n     * @function create\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {IThreadWithBoardContext=} [properties] Properties to set\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext instance\n     */\n    ThreadWithBoardContext.create = function create(properties) {\n        return new ThreadWithBoardContext(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadWithBoardContext message. Does not implicitly {@link ThreadWithBoardContext.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {IThreadWithBoardContext} message ThreadWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadWithBoardContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.thread != null && Object.hasOwnProperty.call(message, \"thread\"))\n            $root.Thread.encode(message.thread, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n            $root.Board.encode(message.board, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.comments != null && Object.hasOwnProperty.call(message, \"comments\"))\n            $root.CommentSelectResponse.encode(message.comments, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.commentsGraph != null && Object.hasOwnProperty.call(message, \"commentsGraph\"))\n            $root.CommentSelectGraphResponse.encode(message.commentsGraph, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadWithBoardContext message, length delimited. Does not implicitly {@link ThreadWithBoardContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {IThreadWithBoardContext} message ThreadWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadWithBoardContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadWithBoardContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadWithBoardContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadWithBoardContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.thread = $root.Thread.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.comments = $root.CommentSelectResponse.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.commentsGraph = $root.CommentSelectGraphResponse.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.board = $root.Board.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadWithBoardContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadWithBoardContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadWithBoardContext message.\n     * @function verify\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadWithBoardContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.thread != null && message.hasOwnProperty(\"thread\")) {\n            var error = $root.Thread.verify(message.thread);\n            if (error)\n                return \"thread.\" + error;\n        }\n        if (message.comments != null && message.hasOwnProperty(\"comments\")) {\n            var error = $root.CommentSelectResponse.verify(message.comments);\n            if (error)\n                return \"comments.\" + error;\n        }\n        if (message.commentsGraph != null && message.hasOwnProperty(\"commentsGraph\")) {\n            var error = $root.CommentSelectGraphResponse.verify(message.commentsGraph);\n            if (error)\n                return \"commentsGraph.\" + error;\n        }\n        if (message.board != null && message.hasOwnProperty(\"board\")) {\n            var error = $root.Board.verify(message.board);\n            if (error)\n                return \"board.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadWithBoardContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadWithBoardContext} ThreadWithBoardContext\n     */\n    ThreadWithBoardContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadWithBoardContext)\n            return object;\n        var message = new $root.ThreadWithBoardContext();\n        if (object.thread != null) {\n            if (typeof object.thread !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.thread: object expected\");\n            message.thread = $root.Thread.fromObject(object.thread);\n        }\n        if (object.comments != null) {\n            if (typeof object.comments !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.comments: object expected\");\n            message.comments = $root.CommentSelectResponse.fromObject(object.comments);\n        }\n        if (object.commentsGraph != null) {\n            if (typeof object.commentsGraph !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.commentsGraph: object expected\");\n            message.commentsGraph = $root.CommentSelectGraphResponse.fromObject(object.commentsGraph);\n        }\n        if (object.board != null) {\n            if (typeof object.board !== \"object\")\n                throw TypeError(\".ThreadWithBoardContext.board: object expected\");\n            message.board = $root.Board.fromObject(object.board);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadWithBoardContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadWithBoardContext\n     * @static\n     * @param {ThreadWithBoardContext} message ThreadWithBoardContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadWithBoardContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.thread = null;\n            object.board = null;\n            object.comments = null;\n            object.commentsGraph = null;\n        }\n        if (message.thread != null && message.hasOwnProperty(\"thread\"))\n            object.thread = $root.Thread.toObject(message.thread, options);\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            object.board = $root.Board.toObject(message.board, options);\n        if (message.comments != null && message.hasOwnProperty(\"comments\"))\n            object.comments = $root.CommentSelectResponse.toObject(message.comments, options);\n        if (message.commentsGraph != null && message.hasOwnProperty(\"commentsGraph\"))\n            object.commentsGraph = $root.CommentSelectGraphResponse.toObject(message.commentsGraph, options);\n        return object;\n    };\n\n    /**\n     * Converts this ThreadWithBoardContext to JSON.\n     * @function toJSON\n     * @memberof ThreadWithBoardContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadWithBoardContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadWithBoardContext;\n})();\n\n$root.BanInfo = (function() {\n\n    /**\n     * Properties of a BanInfo.\n     * @exports IBanInfo\n     * @interface IBanInfo\n     * @property {string|null} [bannedBy] BanInfo bannedBy\n     * @property {string|null} [banReason] BanInfo banReason\n     * @property {string|null} [approvedBy] BanInfo approvedBy\n     * @property {string|null} [createdAt] BanInfo createdAt\n     * @property {string|null} [reason] BanInfo reason\n     */\n\n    /**\n     * Constructs a new BanInfo.\n     * @exports BanInfo\n     * @classdesc Represents a BanInfo.\n     * @implements IBanInfo\n     * @constructor\n     * @param {IBanInfo=} [properties] Properties to set\n     */\n    function BanInfo(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BanInfo bannedBy.\n     * @member {string} bannedBy\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.bannedBy = \"\";\n\n    /**\n     * BanInfo banReason.\n     * @member {string} banReason\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.banReason = \"\";\n\n    /**\n     * BanInfo approvedBy.\n     * @member {string} approvedBy\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.approvedBy = \"\";\n\n    /**\n     * BanInfo createdAt.\n     * @member {string} createdAt\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.createdAt = \"\";\n\n    /**\n     * BanInfo reason.\n     * @member {string} reason\n     * @memberof BanInfo\n     * @instance\n     */\n    BanInfo.prototype.reason = \"\";\n\n    /**\n     * Creates a new BanInfo instance using the specified properties.\n     * @function create\n     * @memberof BanInfo\n     * @static\n     * @param {IBanInfo=} [properties] Properties to set\n     * @returns {BanInfo} BanInfo instance\n     */\n    BanInfo.create = function create(properties) {\n        return new BanInfo(properties);\n    };\n\n    /**\n     * Encodes the specified BanInfo message. Does not implicitly {@link BanInfo.verify|verify} messages.\n     * @function encode\n     * @memberof BanInfo\n     * @static\n     * @param {IBanInfo} message BanInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BanInfo.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.bannedBy != null && Object.hasOwnProperty.call(message, \"bannedBy\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.bannedBy);\n        if (message.approvedBy != null && Object.hasOwnProperty.call(message, \"approvedBy\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.approvedBy);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.createdAt);\n        if (message.banReason != null && Object.hasOwnProperty.call(message, \"banReason\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.banReason);\n        if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reason);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BanInfo message, length delimited. Does not implicitly {@link BanInfo.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BanInfo\n     * @static\n     * @param {IBanInfo} message BanInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BanInfo.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BanInfo message from the specified reader or buffer.\n     * @function decode\n     * @memberof BanInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BanInfo} BanInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BanInfo.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BanInfo();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.bannedBy = reader.string();\n                break;\n            case 4:\n                message.banReason = reader.string();\n                break;\n            case 2:\n                message.approvedBy = reader.string();\n                break;\n            case 3:\n                message.createdAt = reader.string();\n                break;\n            case 5:\n                message.reason = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BanInfo message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BanInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BanInfo} BanInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BanInfo.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BanInfo message.\n     * @function verify\n     * @memberof BanInfo\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BanInfo.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.bannedBy != null && message.hasOwnProperty(\"bannedBy\"))\n            if (!$util.isString(message.bannedBy))\n                return \"bannedBy: string expected\";\n        if (message.banReason != null && message.hasOwnProperty(\"banReason\"))\n            if (!$util.isString(message.banReason))\n                return \"banReason: string expected\";\n        if (message.approvedBy != null && message.hasOwnProperty(\"approvedBy\"))\n            if (!$util.isString(message.approvedBy))\n                return \"approvedBy: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isString(message.createdAt))\n                return \"createdAt: string expected\";\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            if (!$util.isString(message.reason))\n                return \"reason: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BanInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BanInfo\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BanInfo} BanInfo\n     */\n    BanInfo.fromObject = function fromObject(object) {\n        if (object instanceof $root.BanInfo)\n            return object;\n        var message = new $root.BanInfo();\n        if (object.bannedBy != null)\n            message.bannedBy = String(object.bannedBy);\n        if (object.banReason != null)\n            message.banReason = String(object.banReason);\n        if (object.approvedBy != null)\n            message.approvedBy = String(object.approvedBy);\n        if (object.createdAt != null)\n            message.createdAt = String(object.createdAt);\n        if (object.reason != null)\n            message.reason = String(object.reason);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BanInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BanInfo\n     * @static\n     * @param {BanInfo} message BanInfo\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BanInfo.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.bannedBy = \"\";\n            object.approvedBy = \"\";\n            object.createdAt = \"\";\n            object.banReason = \"\";\n            object.reason = \"\";\n        }\n        if (message.bannedBy != null && message.hasOwnProperty(\"bannedBy\"))\n            object.bannedBy = message.bannedBy;\n        if (message.approvedBy != null && message.hasOwnProperty(\"approvedBy\"))\n            object.approvedBy = message.approvedBy;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            object.createdAt = message.createdAt;\n        if (message.banReason != null && message.hasOwnProperty(\"banReason\"))\n            object.banReason = message.banReason;\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            object.reason = message.reason;\n        return object;\n    };\n\n    /**\n     * Converts this BanInfo to JSON.\n     * @function toJSON\n     * @memberof BanInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BanInfo.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BanInfo;\n})();\n\n$root.ReportInfo = (function() {\n\n    /**\n     * Properties of a ReportInfo.\n     * @exports IReportInfo\n     * @interface IReportInfo\n     * @property {string|null} [report] ReportInfo report\n     * @property {IUserRef|null} [user] ReportInfo user\n     * @property {number|null} [createdAt] ReportInfo createdAt\n     */\n\n    /**\n     * Constructs a new ReportInfo.\n     * @exports ReportInfo\n     * @classdesc Represents a ReportInfo.\n     * @implements IReportInfo\n     * @constructor\n     * @param {IReportInfo=} [properties] Properties to set\n     */\n    function ReportInfo(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportInfo report.\n     * @member {string} report\n     * @memberof ReportInfo\n     * @instance\n     */\n    ReportInfo.prototype.report = \"\";\n\n    /**\n     * ReportInfo user.\n     * @member {IUserRef|null|undefined} user\n     * @memberof ReportInfo\n     * @instance\n     */\n    ReportInfo.prototype.user = null;\n\n    /**\n     * ReportInfo createdAt.\n     * @member {number} createdAt\n     * @memberof ReportInfo\n     * @instance\n     */\n    ReportInfo.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ReportInfo instance using the specified properties.\n     * @function create\n     * @memberof ReportInfo\n     * @static\n     * @param {IReportInfo=} [properties] Properties to set\n     * @returns {ReportInfo} ReportInfo instance\n     */\n    ReportInfo.create = function create(properties) {\n        return new ReportInfo(properties);\n    };\n\n    /**\n     * Encodes the specified ReportInfo message. Does not implicitly {@link ReportInfo.verify|verify} messages.\n     * @function encode\n     * @memberof ReportInfo\n     * @static\n     * @param {IReportInfo} message ReportInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportInfo.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.report != null && Object.hasOwnProperty.call(message, \"report\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.report);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.UserRef.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportInfo message, length delimited. Does not implicitly {@link ReportInfo.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportInfo\n     * @static\n     * @param {IReportInfo} message ReportInfo message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportInfo.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportInfo message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportInfo} ReportInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportInfo.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportInfo();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.report = reader.string();\n                break;\n            case 2:\n                message.user = $root.UserRef.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportInfo message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportInfo} ReportInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportInfo.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportInfo message.\n     * @function verify\n     * @memberof ReportInfo\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportInfo.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.report != null && message.hasOwnProperty(\"report\"))\n            if (!$util.isString(message.report))\n                return \"report: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.UserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReportInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReportInfo\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReportInfo} ReportInfo\n     */\n    ReportInfo.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReportInfo)\n            return object;\n        var message = new $root.ReportInfo();\n        if (object.report != null)\n            message.report = String(object.report);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".ReportInfo.user: object expected\");\n            message.user = $root.UserRef.fromObject(object.user);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReportInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportInfo\n     * @static\n     * @param {ReportInfo} message ReportInfo\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportInfo.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.report = \"\";\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.report != null && message.hasOwnProperty(\"report\"))\n            object.report = message.report;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.UserRef.toObject(message.user, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this ReportInfo to JSON.\n     * @function toJSON\n     * @memberof ReportInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportInfo.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportInfo;\n})();\n\n$root.Vote = (function() {\n\n    /**\n     * Properties of a Vote.\n     * @exports IVote\n     * @interface IVote\n     * @property {number|null} [type] Vote type\n     * @property {string|null} [typeCode] Vote typeCode\n     * @property {number|null} [amount] Vote amount\n     * @property {number|null} [createdAt] Vote createdAt\n     */\n\n    /**\n     * Constructs a new Vote.\n     * @exports Vote\n     * @classdesc Represents a Vote.\n     * @implements IVote\n     * @constructor\n     * @param {IVote=} [properties] Properties to set\n     */\n    function Vote(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Vote type.\n     * @member {number} type\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.type = 0;\n\n    /**\n     * Vote typeCode.\n     * @member {string} typeCode\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.typeCode = \"\";\n\n    /**\n     * Vote amount.\n     * @member {number} amount\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Vote createdAt.\n     * @member {number} createdAt\n     * @memberof Vote\n     * @instance\n     */\n    Vote.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new Vote instance using the specified properties.\n     * @function create\n     * @memberof Vote\n     * @static\n     * @param {IVote=} [properties] Properties to set\n     * @returns {Vote} Vote instance\n     */\n    Vote.create = function create(properties) {\n        return new Vote(properties);\n    };\n\n    /**\n     * Encodes the specified Vote message. Does not implicitly {@link Vote.verify|verify} messages.\n     * @function encode\n     * @memberof Vote\n     * @static\n     * @param {IVote} message Vote message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Vote.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n        if (message.typeCode != null && Object.hasOwnProperty.call(message, \"typeCode\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.typeCode);\n        if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.amount);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Vote message, length delimited. Does not implicitly {@link Vote.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Vote\n     * @static\n     * @param {IVote} message Vote message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Vote.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Vote message from the specified reader or buffer.\n     * @function decode\n     * @memberof Vote\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Vote} Vote\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Vote.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Vote();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.int32();\n                break;\n            case 3:\n                message.typeCode = reader.string();\n                break;\n            case 4:\n                message.amount = reader.int64();\n                break;\n            case 5:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Vote message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Vote\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Vote} Vote\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Vote.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Vote message.\n     * @function verify\n     * @memberof Vote\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Vote.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isInteger(message.type))\n                return \"type: integer expected\";\n        if (message.typeCode != null && message.hasOwnProperty(\"typeCode\"))\n            if (!$util.isString(message.typeCode))\n                return \"typeCode: string expected\";\n        if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))\n                return \"amount: integer|Long expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Vote message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Vote\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Vote} Vote\n     */\n    Vote.fromObject = function fromObject(object) {\n        if (object instanceof $root.Vote)\n            return object;\n        var message = new $root.Vote();\n        if (object.type != null)\n            message.type = object.type | 0;\n        if (object.typeCode != null)\n            message.typeCode = String(object.typeCode);\n        if (object.amount != null)\n            if ($util.Long)\n                (message.amount = $util.Long.fromValue(object.amount)).unsigned = false;\n            else if (typeof object.amount === \"string\")\n                message.amount = parseInt(object.amount, 10);\n            else if (typeof object.amount === \"number\")\n                message.amount = object.amount;\n            else if (typeof object.amount === \"object\")\n                message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber();\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Vote message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Vote\n     * @static\n     * @param {Vote} message Vote\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Vote.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = 0;\n            object.typeCode = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.amount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.typeCode != null && message.hasOwnProperty(\"typeCode\"))\n            object.typeCode = message.typeCode;\n        if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            if (typeof message.amount === \"number\")\n                object.amount = options.longs === String ? String(message.amount) : message.amount;\n            else\n                object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber() : message.amount;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this Vote to JSON.\n     * @function toJSON\n     * @memberof Vote\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Vote.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Vote;\n})();\n\n$root.CommentActionedContext = (function() {\n\n    /**\n     * Properties of a CommentActionedContext.\n     * @exports ICommentActionedContext\n     * @interface ICommentActionedContext\n     * @property {boolean|null} [isModerator] CommentActionedContext isModerator\n     * @property {string|null} [vote] CommentActionedContext vote\n     */\n\n    /**\n     * Constructs a new CommentActionedContext.\n     * @exports CommentActionedContext\n     * @classdesc Represents a CommentActionedContext.\n     * @implements ICommentActionedContext\n     * @constructor\n     * @param {ICommentActionedContext=} [properties] Properties to set\n     */\n    function CommentActionedContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentActionedContext isModerator.\n     * @member {boolean} isModerator\n     * @memberof CommentActionedContext\n     * @instance\n     */\n    CommentActionedContext.prototype.isModerator = false;\n\n    /**\n     * CommentActionedContext vote.\n     * @member {string} vote\n     * @memberof CommentActionedContext\n     * @instance\n     */\n    CommentActionedContext.prototype.vote = \"\";\n\n    /**\n     * Creates a new CommentActionedContext instance using the specified properties.\n     * @function create\n     * @memberof CommentActionedContext\n     * @static\n     * @param {ICommentActionedContext=} [properties] Properties to set\n     * @returns {CommentActionedContext} CommentActionedContext instance\n     */\n    CommentActionedContext.create = function create(properties) {\n        return new CommentActionedContext(properties);\n    };\n\n    /**\n     * Encodes the specified CommentActionedContext message. Does not implicitly {@link CommentActionedContext.verify|verify} messages.\n     * @function encode\n     * @memberof CommentActionedContext\n     * @static\n     * @param {ICommentActionedContext} message CommentActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentActionedContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.vote != null && Object.hasOwnProperty.call(message, \"vote\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.vote);\n        if (message.isModerator != null && Object.hasOwnProperty.call(message, \"isModerator\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isModerator);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentActionedContext message, length delimited. Does not implicitly {@link CommentActionedContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentActionedContext\n     * @static\n     * @param {ICommentActionedContext} message CommentActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentActionedContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentActionedContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentActionedContext} CommentActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentActionedContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentActionedContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.isModerator = reader.bool();\n                break;\n            case 1:\n                message.vote = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentActionedContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentActionedContext} CommentActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentActionedContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentActionedContext message.\n     * @function verify\n     * @memberof CommentActionedContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentActionedContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            if (typeof message.isModerator !== \"boolean\")\n                return \"isModerator: boolean expected\";\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            if (!$util.isString(message.vote))\n                return \"vote: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentActionedContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentActionedContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentActionedContext} CommentActionedContext\n     */\n    CommentActionedContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentActionedContext)\n            return object;\n        var message = new $root.CommentActionedContext();\n        if (object.isModerator != null)\n            message.isModerator = Boolean(object.isModerator);\n        if (object.vote != null)\n            message.vote = String(object.vote);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentActionedContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentActionedContext\n     * @static\n     * @param {CommentActionedContext} message CommentActionedContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentActionedContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.vote = \"\";\n            object.isModerator = false;\n        }\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            object.vote = message.vote;\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            object.isModerator = message.isModerator;\n        return object;\n    };\n\n    /**\n     * Converts this CommentActionedContext to JSON.\n     * @function toJSON\n     * @memberof CommentActionedContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentActionedContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentActionedContext;\n})();\n\n$root.ThreadActionedContext = (function() {\n\n    /**\n     * Properties of a ThreadActionedContext.\n     * @exports IThreadActionedContext\n     * @interface IThreadActionedContext\n     * @property {boolean|null} [isModerator] ThreadActionedContext isModerator\n     * @property {string|null} [vote] ThreadActionedContext vote\n     */\n\n    /**\n     * Constructs a new ThreadActionedContext.\n     * @exports ThreadActionedContext\n     * @classdesc Represents a ThreadActionedContext.\n     * @implements IThreadActionedContext\n     * @constructor\n     * @param {IThreadActionedContext=} [properties] Properties to set\n     */\n    function ThreadActionedContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadActionedContext isModerator.\n     * @member {boolean} isModerator\n     * @memberof ThreadActionedContext\n     * @instance\n     */\n    ThreadActionedContext.prototype.isModerator = false;\n\n    /**\n     * ThreadActionedContext vote.\n     * @member {string} vote\n     * @memberof ThreadActionedContext\n     * @instance\n     */\n    ThreadActionedContext.prototype.vote = \"\";\n\n    /**\n     * Creates a new ThreadActionedContext instance using the specified properties.\n     * @function create\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {IThreadActionedContext=} [properties] Properties to set\n     * @returns {ThreadActionedContext} ThreadActionedContext instance\n     */\n    ThreadActionedContext.create = function create(properties) {\n        return new ThreadActionedContext(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadActionedContext message. Does not implicitly {@link ThreadActionedContext.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {IThreadActionedContext} message ThreadActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadActionedContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.vote != null && Object.hasOwnProperty.call(message, \"vote\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.vote);\n        if (message.isModerator != null && Object.hasOwnProperty.call(message, \"isModerator\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isModerator);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadActionedContext message, length delimited. Does not implicitly {@link ThreadActionedContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {IThreadActionedContext} message ThreadActionedContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadActionedContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadActionedContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadActionedContext} ThreadActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadActionedContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadActionedContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.isModerator = reader.bool();\n                break;\n            case 1:\n                message.vote = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadActionedContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadActionedContext} ThreadActionedContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadActionedContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadActionedContext message.\n     * @function verify\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadActionedContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            if (typeof message.isModerator !== \"boolean\")\n                return \"isModerator: boolean expected\";\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            if (!$util.isString(message.vote))\n                return \"vote: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadActionedContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadActionedContext} ThreadActionedContext\n     */\n    ThreadActionedContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadActionedContext)\n            return object;\n        var message = new $root.ThreadActionedContext();\n        if (object.isModerator != null)\n            message.isModerator = Boolean(object.isModerator);\n        if (object.vote != null)\n            message.vote = String(object.vote);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadActionedContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadActionedContext\n     * @static\n     * @param {ThreadActionedContext} message ThreadActionedContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadActionedContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.vote = \"\";\n            object.isModerator = false;\n        }\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            object.vote = message.vote;\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            object.isModerator = message.isModerator;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadActionedContext to JSON.\n     * @function toJSON\n     * @memberof ThreadActionedContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadActionedContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadActionedContext;\n})();\n\n$root.CommentEditRequest = (function() {\n\n    /**\n     * Properties of a CommentEditRequest.\n     * @exports ICommentEditRequest\n     * @interface ICommentEditRequest\n     * @property {string|null} [commentId] CommentEditRequest commentId\n     * @property {string|null} [content] CommentEditRequest content\n     * @property {IComment|null} [comment] CommentEditRequest comment\n     */\n\n    /**\n     * Constructs a new CommentEditRequest.\n     * @exports CommentEditRequest\n     * @classdesc Represents a CommentEditRequest.\n     * @implements ICommentEditRequest\n     * @constructor\n     * @param {ICommentEditRequest=} [properties] Properties to set\n     */\n    function CommentEditRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentEditRequest commentId.\n     * @member {string} commentId\n     * @memberof CommentEditRequest\n     * @instance\n     */\n    CommentEditRequest.prototype.commentId = \"\";\n\n    /**\n     * CommentEditRequest content.\n     * @member {string} content\n     * @memberof CommentEditRequest\n     * @instance\n     */\n    CommentEditRequest.prototype.content = \"\";\n\n    /**\n     * CommentEditRequest comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentEditRequest\n     * @instance\n     */\n    CommentEditRequest.prototype.comment = null;\n\n    /**\n     * Creates a new CommentEditRequest instance using the specified properties.\n     * @function create\n     * @memberof CommentEditRequest\n     * @static\n     * @param {ICommentEditRequest=} [properties] Properties to set\n     * @returns {CommentEditRequest} CommentEditRequest instance\n     */\n    CommentEditRequest.create = function create(properties) {\n        return new CommentEditRequest(properties);\n    };\n\n    /**\n     * Encodes the specified CommentEditRequest message. Does not implicitly {@link CommentEditRequest.verify|verify} messages.\n     * @function encode\n     * @memberof CommentEditRequest\n     * @static\n     * @param {ICommentEditRequest} message CommentEditRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentEditRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.commentId != null && Object.hasOwnProperty.call(message, \"commentId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.commentId);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentEditRequest message, length delimited. Does not implicitly {@link CommentEditRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentEditRequest\n     * @static\n     * @param {ICommentEditRequest} message CommentEditRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentEditRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentEditRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentEditRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentEditRequest} CommentEditRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentEditRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentEditRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.commentId = reader.string();\n                break;\n            case 2:\n                message.content = reader.string();\n                break;\n            case 3:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentEditRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentEditRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentEditRequest} CommentEditRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentEditRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentEditRequest message.\n     * @function verify\n     * @memberof CommentEditRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentEditRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            if (!$util.isString(message.commentId))\n                return \"commentId: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommentEditRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentEditRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentEditRequest} CommentEditRequest\n     */\n    CommentEditRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentEditRequest)\n            return object;\n        var message = new $root.CommentEditRequest();\n        if (object.commentId != null)\n            message.commentId = String(object.commentId);\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentEditRequest.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentEditRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentEditRequest\n     * @static\n     * @param {CommentEditRequest} message CommentEditRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentEditRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.commentId = \"\";\n            object.content = \"\";\n            object.comment = null;\n        }\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            object.commentId = message.commentId;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        return object;\n    };\n\n    /**\n     * Converts this CommentEditRequest to JSON.\n     * @function toJSON\n     * @memberof CommentEditRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentEditRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentEditRequest;\n})();\n\n$root.CommentCreateResponse = (function() {\n\n    /**\n     * Properties of a CommentCreateResponse.\n     * @exports ICommentCreateResponse\n     * @interface ICommentCreateResponse\n     * @property {number|null} [commentId] CommentCreateResponse commentId\n     * @property {string|null} [commentuId] CommentCreateResponse commentuId\n     */\n\n    /**\n     * Constructs a new CommentCreateResponse.\n     * @exports CommentCreateResponse\n     * @classdesc Represents a CommentCreateResponse.\n     * @implements ICommentCreateResponse\n     * @constructor\n     * @param {ICommentCreateResponse=} [properties] Properties to set\n     */\n    function CommentCreateResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentCreateResponse commentId.\n     * @member {number} commentId\n     * @memberof CommentCreateResponse\n     * @instance\n     */\n    CommentCreateResponse.prototype.commentId = 0;\n\n    /**\n     * CommentCreateResponse commentuId.\n     * @member {string} commentuId\n     * @memberof CommentCreateResponse\n     * @instance\n     */\n    CommentCreateResponse.prototype.commentuId = \"\";\n\n    /**\n     * Creates a new CommentCreateResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {ICommentCreateResponse=} [properties] Properties to set\n     * @returns {CommentCreateResponse} CommentCreateResponse instance\n     */\n    CommentCreateResponse.create = function create(properties) {\n        return new CommentCreateResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentCreateResponse message. Does not implicitly {@link CommentCreateResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {ICommentCreateResponse} message CommentCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.commentId != null && Object.hasOwnProperty.call(message, \"commentId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.commentId);\n        if (message.commentuId != null && Object.hasOwnProperty.call(message, \"commentuId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.commentuId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentCreateResponse message, length delimited. Does not implicitly {@link CommentCreateResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {ICommentCreateResponse} message CommentCreateResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentCreateResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentCreateResponse} CommentCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentCreateResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.commentId = reader.uint32();\n                break;\n            case 2:\n                message.commentuId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentCreateResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentCreateResponse} CommentCreateResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentCreateResponse message.\n     * @function verify\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentCreateResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            if (!$util.isInteger(message.commentId))\n                return \"commentId: integer expected\";\n        if (message.commentuId != null && message.hasOwnProperty(\"commentuId\"))\n            if (!$util.isString(message.commentuId))\n                return \"commentuId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentCreateResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentCreateResponse} CommentCreateResponse\n     */\n    CommentCreateResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentCreateResponse)\n            return object;\n        var message = new $root.CommentCreateResponse();\n        if (object.commentId != null)\n            message.commentId = object.commentId >>> 0;\n        if (object.commentuId != null)\n            message.commentuId = String(object.commentuId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentCreateResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentCreateResponse\n     * @static\n     * @param {CommentCreateResponse} message CommentCreateResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentCreateResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.commentId = 0;\n            object.commentuId = \"\";\n        }\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            object.commentId = message.commentId;\n        if (message.commentuId != null && message.hasOwnProperty(\"commentuId\"))\n            object.commentuId = message.commentuId;\n        return object;\n    };\n\n    /**\n     * Converts this CommentCreateResponse to JSON.\n     * @function toJSON\n     * @memberof CommentCreateResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentCreateResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentCreateResponse;\n})();\n\n$root.CommentCreateRequest = (function() {\n\n    /**\n     * Properties of a CommentCreateRequest.\n     * @exports ICommentCreateRequest\n     * @interface ICommentCreateRequest\n     * @property {string|null} [threadId] CommentCreateRequest threadId\n     * @property {IComment|null} [comment] CommentCreateRequest comment\n     */\n\n    /**\n     * Constructs a new CommentCreateRequest.\n     * @exports CommentCreateRequest\n     * @classdesc Represents a CommentCreateRequest.\n     * @implements ICommentCreateRequest\n     * @constructor\n     * @param {ICommentCreateRequest=} [properties] Properties to set\n     */\n    function CommentCreateRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentCreateRequest threadId.\n     * @member {string} threadId\n     * @memberof CommentCreateRequest\n     * @instance\n     */\n    CommentCreateRequest.prototype.threadId = \"\";\n\n    /**\n     * CommentCreateRequest comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentCreateRequest\n     * @instance\n     */\n    CommentCreateRequest.prototype.comment = null;\n\n    /**\n     * Creates a new CommentCreateRequest instance using the specified properties.\n     * @function create\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {ICommentCreateRequest=} [properties] Properties to set\n     * @returns {CommentCreateRequest} CommentCreateRequest instance\n     */\n    CommentCreateRequest.create = function create(properties) {\n        return new CommentCreateRequest(properties);\n    };\n\n    /**\n     * Encodes the specified CommentCreateRequest message. Does not implicitly {@link CommentCreateRequest.verify|verify} messages.\n     * @function encode\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {ICommentCreateRequest} message CommentCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.threadId);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentCreateRequest message, length delimited. Does not implicitly {@link CommentCreateRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {ICommentCreateRequest} message CommentCreateRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentCreateRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentCreateRequest} CommentCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentCreateRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threadId = reader.string();\n                break;\n            case 3:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentCreateRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentCreateRequest} CommentCreateRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentCreateRequest message.\n     * @function verify\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentCreateRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommentCreateRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentCreateRequest} CommentCreateRequest\n     */\n    CommentCreateRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentCreateRequest)\n            return object;\n        var message = new $root.CommentCreateRequest();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentCreateRequest.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentCreateRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentCreateRequest\n     * @static\n     * @param {CommentCreateRequest} message CommentCreateRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentCreateRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.threadId = \"\";\n            object.comment = null;\n        }\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        return object;\n    };\n\n    /**\n     * Converts this CommentCreateRequest to JSON.\n     * @function toJSON\n     * @memberof CommentCreateRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentCreateRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentCreateRequest;\n})();\n\n$root.CommentNode = (function() {\n\n    /**\n     * Properties of a CommentNode.\n     * @exports ICommentNode\n     * @interface ICommentNode\n     * @property {IComment|null} [comment] CommentNode comment\n     * @property {boolean|null} [clipped] CommentNode clipped\n     * @property {Object.<string,ICommentNode>|null} [children] CommentNode children\n     */\n\n    /**\n     * Constructs a new CommentNode.\n     * @exports CommentNode\n     * @classdesc Represents a CommentNode.\n     * @implements ICommentNode\n     * @constructor\n     * @param {ICommentNode=} [properties] Properties to set\n     */\n    function CommentNode(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentNode comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentNode\n     * @instance\n     */\n    CommentNode.prototype.comment = null;\n\n    /**\n     * CommentNode clipped.\n     * @member {boolean} clipped\n     * @memberof CommentNode\n     * @instance\n     */\n    CommentNode.prototype.clipped = false;\n\n    /**\n     * CommentNode children.\n     * @member {Object.<string,ICommentNode>} children\n     * @memberof CommentNode\n     * @instance\n     */\n    CommentNode.prototype.children = $util.emptyObject;\n\n    /**\n     * Creates a new CommentNode instance using the specified properties.\n     * @function create\n     * @memberof CommentNode\n     * @static\n     * @param {ICommentNode=} [properties] Properties to set\n     * @returns {CommentNode} CommentNode instance\n     */\n    CommentNode.create = function create(properties) {\n        return new CommentNode(properties);\n    };\n\n    /**\n     * Encodes the specified CommentNode message. Does not implicitly {@link CommentNode.verify|verify} messages.\n     * @function encode\n     * @memberof CommentNode\n     * @static\n     * @param {ICommentNode} message CommentNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentNode.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.CommentNode.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.clipped != null && Object.hasOwnProperty.call(message, \"clipped\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.clipped);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentNode message, length delimited. Does not implicitly {@link CommentNode.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentNode\n     * @static\n     * @param {ICommentNode} message CommentNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentNode} CommentNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentNode(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.clipped = reader.bool();\n                break;\n            case 2:\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = null;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = $root.CommentNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.children[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentNode message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentNode} CommentNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentNode message.\n     * @function verify\n     * @memberof CommentNode\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        if (message.clipped != null && message.hasOwnProperty(\"clipped\"))\n            if (typeof message.clipped !== \"boolean\")\n                return \"clipped: boolean expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.CommentNode.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommentNode message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentNode\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentNode} CommentNode\n     */\n    CommentNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentNode)\n            return object;\n        var message = new $root.CommentNode();\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentNode.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        if (object.clipped != null)\n            message.clipped = Boolean(object.clipped);\n        if (object.children) {\n            if (typeof object.children !== \"object\")\n                throw TypeError(\".CommentNode.children: object expected\");\n            message.children = {};\n            for (var keys = Object.keys(object.children), i = 0; i < keys.length; ++i) {\n                if (typeof object.children[keys[i]] !== \"object\")\n                    throw TypeError(\".CommentNode.children: object expected\");\n                message.children[keys[i]] = $root.CommentNode.fromObject(object.children[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentNode\n     * @static\n     * @param {CommentNode} message CommentNode\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentNode.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            object.comment = null;\n            object.clipped = false;\n        }\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.CommentNode.toObject(message.children[keys2[j]], options);\n        }\n        if (message.clipped != null && message.hasOwnProperty(\"clipped\"))\n            object.clipped = message.clipped;\n        return object;\n    };\n\n    /**\n     * Converts this CommentNode to JSON.\n     * @function toJSON\n     * @memberof CommentNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentNode;\n})();\n\n$root.CommentSelectResponse = (function() {\n\n    /**\n     * Properties of a CommentSelectResponse.\n     * @exports ICommentSelectResponse\n     * @interface ICommentSelectResponse\n     * @property {Array.<IComment>|null} [data] CommentSelectResponse data\n     * @property {string|null} [token] CommentSelectResponse token\n     */\n\n    /**\n     * Constructs a new CommentSelectResponse.\n     * @exports CommentSelectResponse\n     * @classdesc Represents a CommentSelectResponse.\n     * @implements ICommentSelectResponse\n     * @constructor\n     * @param {ICommentSelectResponse=} [properties] Properties to set\n     */\n    function CommentSelectResponse(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectResponse data.\n     * @member {Array.<IComment>} data\n     * @memberof CommentSelectResponse\n     * @instance\n     */\n    CommentSelectResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * CommentSelectResponse token.\n     * @member {string} token\n     * @memberof CommentSelectResponse\n     * @instance\n     */\n    CommentSelectResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {ICommentSelectResponse=} [properties] Properties to set\n     * @returns {CommentSelectResponse} CommentSelectResponse instance\n     */\n    CommentSelectResponse.create = function create(properties) {\n        return new CommentSelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectResponse message. Does not implicitly {@link CommentSelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {ICommentSelectResponse} message CommentSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Comment.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectResponse message, length delimited. Does not implicitly {@link CommentSelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {ICommentSelectResponse} message CommentSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectResponse} CommentSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Comment.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectResponse} CommentSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectResponse message.\n     * @function verify\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Comment.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectResponse} CommentSelectResponse\n     */\n    CommentSelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectResponse)\n            return object;\n        var message = new $root.CommentSelectResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".CommentSelectResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".CommentSelectResponse.data: object expected\");\n                message.data[i] = $root.Comment.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectResponse\n     * @static\n     * @param {CommentSelectResponse} message CommentSelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Comment.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectResponse to JSON.\n     * @function toJSON\n     * @memberof CommentSelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentSelectResponse;\n})();\n\n$root.CommentSelectGraphResponse = (function() {\n\n    /**\n     * Properties of a CommentSelectGraphResponse.\n     * @exports ICommentSelectGraphResponse\n     * @interface ICommentSelectGraphResponse\n     * @property {Object.<string,ICommentNode>|null} [data] CommentSelectGraphResponse data\n     * @property {string|null} [token] CommentSelectGraphResponse token\n     */\n\n    /**\n     * Constructs a new CommentSelectGraphResponse.\n     * @exports CommentSelectGraphResponse\n     * @classdesc Represents a CommentSelectGraphResponse.\n     * @implements ICommentSelectGraphResponse\n     * @constructor\n     * @param {ICommentSelectGraphResponse=} [properties] Properties to set\n     */\n    function CommentSelectGraphResponse(properties) {\n        this.data = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectGraphResponse data.\n     * @member {Object.<string,ICommentNode>} data\n     * @memberof CommentSelectGraphResponse\n     * @instance\n     */\n    CommentSelectGraphResponse.prototype.data = $util.emptyObject;\n\n    /**\n     * CommentSelectGraphResponse token.\n     * @member {string} token\n     * @memberof CommentSelectGraphResponse\n     * @instance\n     */\n    CommentSelectGraphResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectGraphResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {ICommentSelectGraphResponse=} [properties] Properties to set\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse instance\n     */\n    CommentSelectGraphResponse.create = function create(properties) {\n        return new CommentSelectGraphResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectGraphResponse message. Does not implicitly {@link CommentSelectGraphResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {ICommentSelectGraphResponse} message CommentSelectGraphResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectGraphResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            for (var keys = Object.keys(message.data), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.CommentNode.encode(message.data[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectGraphResponse message, length delimited. Does not implicitly {@link CommentSelectGraphResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {ICommentSelectGraphResponse} message CommentSelectGraphResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectGraphResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectGraphResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectGraphResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectGraphResponse(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (message.data === $util.emptyObject)\n                    message.data = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = null;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = $root.CommentNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.data[key] = value;\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectGraphResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectGraphResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectGraphResponse message.\n     * @function verify\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectGraphResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!$util.isObject(message.data))\n                return \"data: object expected\";\n            var key = Object.keys(message.data);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.CommentNode.verify(message.data[key[i]]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectGraphResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectGraphResponse} CommentSelectGraphResponse\n     */\n    CommentSelectGraphResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectGraphResponse)\n            return object;\n        var message = new $root.CommentSelectGraphResponse();\n        if (object.data) {\n            if (typeof object.data !== \"object\")\n                throw TypeError(\".CommentSelectGraphResponse.data: object expected\");\n            message.data = {};\n            for (var keys = Object.keys(object.data), i = 0; i < keys.length; ++i) {\n                if (typeof object.data[keys[i]] !== \"object\")\n                    throw TypeError(\".CommentSelectGraphResponse.data: object expected\");\n                message.data[keys[i]] = $root.CommentNode.fromObject(object.data[keys[i]]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectGraphResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectGraphResponse\n     * @static\n     * @param {CommentSelectGraphResponse} message CommentSelectGraphResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectGraphResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.data = {};\n        if (options.defaults)\n            object.token = \"\";\n        var keys2;\n        if (message.data && (keys2 = Object.keys(message.data)).length) {\n            object.data = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.data[keys2[j]] = $root.CommentNode.toObject(message.data[keys2[j]], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectGraphResponse to JSON.\n     * @function toJSON\n     * @memberof CommentSelectGraphResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectGraphResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentSelectGraphResponse;\n})();\n\n$root.CommentSelectHistoryResponse = (function() {\n\n    /**\n     * Properties of a CommentSelectHistoryResponse.\n     * @exports ICommentSelectHistoryResponse\n     * @interface ICommentSelectHistoryResponse\n     * @property {Array.<IComment>|null} [data] CommentSelectHistoryResponse data\n     * @property {string|null} [token] CommentSelectHistoryResponse token\n     */\n\n    /**\n     * Constructs a new CommentSelectHistoryResponse.\n     * @exports CommentSelectHistoryResponse\n     * @classdesc Represents a CommentSelectHistoryResponse.\n     * @implements ICommentSelectHistoryResponse\n     * @constructor\n     * @param {ICommentSelectHistoryResponse=} [properties] Properties to set\n     */\n    function CommentSelectHistoryResponse(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectHistoryResponse data.\n     * @member {Array.<IComment>} data\n     * @memberof CommentSelectHistoryResponse\n     * @instance\n     */\n    CommentSelectHistoryResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * CommentSelectHistoryResponse token.\n     * @member {string} token\n     * @memberof CommentSelectHistoryResponse\n     * @instance\n     */\n    CommentSelectHistoryResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectHistoryResponse instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {ICommentSelectHistoryResponse=} [properties] Properties to set\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse instance\n     */\n    CommentSelectHistoryResponse.create = function create(properties) {\n        return new CommentSelectHistoryResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectHistoryResponse message. Does not implicitly {@link CommentSelectHistoryResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {ICommentSelectHistoryResponse} message CommentSelectHistoryResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectHistoryResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Comment.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectHistoryResponse message, length delimited. Does not implicitly {@link CommentSelectHistoryResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {ICommentSelectHistoryResponse} message CommentSelectHistoryResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectHistoryResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectHistoryResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectHistoryResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectHistoryResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Comment.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectHistoryResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectHistoryResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectHistoryResponse message.\n     * @function verify\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectHistoryResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Comment.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectHistoryResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectHistoryResponse} CommentSelectHistoryResponse\n     */\n    CommentSelectHistoryResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectHistoryResponse)\n            return object;\n        var message = new $root.CommentSelectHistoryResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".CommentSelectHistoryResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".CommentSelectHistoryResponse.data: object expected\");\n                message.data[i] = $root.Comment.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectHistoryResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectHistoryResponse\n     * @static\n     * @param {CommentSelectHistoryResponse} message CommentSelectHistoryResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectHistoryResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Comment.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectHistoryResponse to JSON.\n     * @function toJSON\n     * @memberof CommentSelectHistoryResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectHistoryResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentSelectHistoryResponse;\n})();\n\n$root.Comment = (function() {\n\n    /**\n     * Properties of a Comment.\n     * @exports IComment\n     * @interface IComment\n     * @property {string|null} [uId] Comment uId\n     * @property {string|null} [parentId] Comment parentId\n     * @property {ICommunityUserRef|null} [user] Comment user\n     * @property {string|null} [content] Comment content\n     * @property {number|null} [createdAt] Comment createdAt\n     * @property {Array.<IComment>|null} [commentEdits] Comment commentEdits\n     * @property {Array.<IBanInfo>|null} [mod] Comment mod\n     * @property {Object.<string,number>|null} [votes] Comment votes\n     * @property {ICommentActionedContext|null} [me] Comment me\n     * @property {number|null} [unhandledReports] Comment unhandledReports\n     * @property {number|null} [reports] Comment reports\n     * @property {number|null} [depth] Comment depth\n     */\n\n    /**\n     * Constructs a new Comment.\n     * @exports Comment\n     * @classdesc Represents a Comment.\n     * @implements IComment\n     * @constructor\n     * @param {IComment=} [properties] Properties to set\n     */\n    function Comment(properties) {\n        this.commentEdits = [];\n        this.mod = [];\n        this.votes = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Comment uId.\n     * @member {string} uId\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.uId = \"\";\n\n    /**\n     * Comment parentId.\n     * @member {string} parentId\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.parentId = \"\";\n\n    /**\n     * Comment user.\n     * @member {ICommunityUserRef|null|undefined} user\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.user = null;\n\n    /**\n     * Comment content.\n     * @member {string} content\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.content = \"\";\n\n    /**\n     * Comment createdAt.\n     * @member {number} createdAt\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Comment commentEdits.\n     * @member {Array.<IComment>} commentEdits\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.commentEdits = $util.emptyArray;\n\n    /**\n     * Comment mod.\n     * @member {Array.<IBanInfo>} mod\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.mod = $util.emptyArray;\n\n    /**\n     * Comment votes.\n     * @member {Object.<string,number>} votes\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.votes = $util.emptyObject;\n\n    /**\n     * Comment me.\n     * @member {ICommentActionedContext|null|undefined} me\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.me = null;\n\n    /**\n     * Comment unhandledReports.\n     * @member {number} unhandledReports\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.unhandledReports = 0;\n\n    /**\n     * Comment reports.\n     * @member {number} reports\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.reports = 0;\n\n    /**\n     * Comment depth.\n     * @member {number} depth\n     * @memberof Comment\n     * @instance\n     */\n    Comment.prototype.depth = 0;\n\n    /**\n     * Creates a new Comment instance using the specified properties.\n     * @function create\n     * @memberof Comment\n     * @static\n     * @param {IComment=} [properties] Properties to set\n     * @returns {Comment} Comment instance\n     */\n    Comment.create = function create(properties) {\n        return new Comment(properties);\n    };\n\n    /**\n     * Encodes the specified Comment message. Does not implicitly {@link Comment.verify|verify} messages.\n     * @function encode\n     * @memberof Comment\n     * @static\n     * @param {IComment} message Comment message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Comment.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uId);\n        if (message.parentId != null && Object.hasOwnProperty.call(message, \"parentId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.parentId);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.CommunityUserRef.encode(message.user, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createdAt);\n        if (message.commentEdits != null && message.commentEdits.length)\n            for (var i = 0; i < message.commentEdits.length; ++i)\n                $root.Comment.encode(message.commentEdits[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.mod != null && message.mod.length)\n            for (var i = 0; i < message.mod.length; ++i)\n                $root.BanInfo.encode(message.mod[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            for (var keys = Object.keys(message.votes), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.votes[keys[i]]).ldelim();\n        if (message.me != null && Object.hasOwnProperty.call(message, \"me\"))\n            $root.CommentActionedContext.encode(message.me, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.unhandledReports != null && Object.hasOwnProperty.call(message, \"unhandledReports\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.unhandledReports);\n        if (message.reports != null && Object.hasOwnProperty.call(message, \"reports\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.reports);\n        if (message.depth != null && Object.hasOwnProperty.call(message, \"depth\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.depth);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Comment message, length delimited. Does not implicitly {@link Comment.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Comment\n     * @static\n     * @param {IComment} message Comment message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Comment.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Comment message from the specified reader or buffer.\n     * @function decode\n     * @memberof Comment\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Comment} Comment\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Comment.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Comment(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uId = reader.string();\n                break;\n            case 2:\n                message.parentId = reader.string();\n                break;\n            case 3:\n                message.user = $root.CommunityUserRef.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.content = reader.string();\n                break;\n            case 5:\n                message.createdAt = reader.int64();\n                break;\n            case 6:\n                if (!(message.commentEdits && message.commentEdits.length))\n                    message.commentEdits = [];\n                message.commentEdits.push($root.Comment.decode(reader, reader.uint32()));\n                break;\n            case 7:\n                if (!(message.mod && message.mod.length))\n                    message.mod = [];\n                message.mod.push($root.BanInfo.decode(reader, reader.uint32()));\n                break;\n            case 8:\n                if (message.votes === $util.emptyObject)\n                    message.votes = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.votes[key] = value;\n                break;\n            case 9:\n                message.me = $root.CommentActionedContext.decode(reader, reader.uint32());\n                break;\n            case 10:\n                message.unhandledReports = reader.int32();\n                break;\n            case 11:\n                message.reports = reader.int32();\n                break;\n            case 12:\n                message.depth = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Comment message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Comment\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Comment} Comment\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Comment.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Comment message.\n     * @function verify\n     * @memberof Comment\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Comment.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            if (!$util.isString(message.parentId))\n                return \"parentId: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.CommunityUserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.commentEdits != null && message.hasOwnProperty(\"commentEdits\")) {\n            if (!Array.isArray(message.commentEdits))\n                return \"commentEdits: array expected\";\n            for (var i = 0; i < message.commentEdits.length; ++i) {\n                var error = $root.Comment.verify(message.commentEdits[i]);\n                if (error)\n                    return \"commentEdits.\" + error;\n            }\n        }\n        if (message.mod != null && message.hasOwnProperty(\"mod\")) {\n            if (!Array.isArray(message.mod))\n                return \"mod: array expected\";\n            for (var i = 0; i < message.mod.length; ++i) {\n                var error = $root.BanInfo.verify(message.mod[i]);\n                if (error)\n                    return \"mod.\" + error;\n            }\n        }\n        if (message.votes != null && message.hasOwnProperty(\"votes\")) {\n            if (!$util.isObject(message.votes))\n                return \"votes: object expected\";\n            var key = Object.keys(message.votes);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.votes[key[i]]))\n                    return \"votes: integer{k:string} expected\";\n        }\n        if (message.me != null && message.hasOwnProperty(\"me\")) {\n            var error = $root.CommentActionedContext.verify(message.me);\n            if (error)\n                return \"me.\" + error;\n        }\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            if (!$util.isInteger(message.unhandledReports))\n                return \"unhandledReports: integer expected\";\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            if (!$util.isInteger(message.reports))\n                return \"reports: integer expected\";\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            if (!$util.isInteger(message.depth))\n                return \"depth: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Comment message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Comment\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Comment} Comment\n     */\n    Comment.fromObject = function fromObject(object) {\n        if (object instanceof $root.Comment)\n            return object;\n        var message = new $root.Comment();\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.parentId != null)\n            message.parentId = String(object.parentId);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".Comment.user: object expected\");\n            message.user = $root.CommunityUserRef.fromObject(object.user);\n        }\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.commentEdits) {\n            if (!Array.isArray(object.commentEdits))\n                throw TypeError(\".Comment.commentEdits: array expected\");\n            message.commentEdits = [];\n            for (var i = 0; i < object.commentEdits.length; ++i) {\n                if (typeof object.commentEdits[i] !== \"object\")\n                    throw TypeError(\".Comment.commentEdits: object expected\");\n                message.commentEdits[i] = $root.Comment.fromObject(object.commentEdits[i]);\n            }\n        }\n        if (object.mod) {\n            if (!Array.isArray(object.mod))\n                throw TypeError(\".Comment.mod: array expected\");\n            message.mod = [];\n            for (var i = 0; i < object.mod.length; ++i) {\n                if (typeof object.mod[i] !== \"object\")\n                    throw TypeError(\".Comment.mod: object expected\");\n                message.mod[i] = $root.BanInfo.fromObject(object.mod[i]);\n            }\n        }\n        if (object.votes) {\n            if (typeof object.votes !== \"object\")\n                throw TypeError(\".Comment.votes: object expected\");\n            message.votes = {};\n            for (var keys = Object.keys(object.votes), i = 0; i < keys.length; ++i)\n                message.votes[keys[i]] = object.votes[keys[i]] | 0;\n        }\n        if (object.me != null) {\n            if (typeof object.me !== \"object\")\n                throw TypeError(\".Comment.me: object expected\");\n            message.me = $root.CommentActionedContext.fromObject(object.me);\n        }\n        if (object.unhandledReports != null)\n            message.unhandledReports = object.unhandledReports | 0;\n        if (object.reports != null)\n            message.reports = object.reports | 0;\n        if (object.depth != null)\n            message.depth = object.depth | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Comment message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Comment\n     * @static\n     * @param {Comment} message Comment\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Comment.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.commentEdits = [];\n            object.mod = [];\n        }\n        if (options.objects || options.defaults)\n            object.votes = {};\n        if (options.defaults) {\n            object.uId = \"\";\n            object.parentId = \"\";\n            object.user = null;\n            object.content = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.me = null;\n            object.unhandledReports = 0;\n            object.reports = 0;\n            object.depth = 0;\n        }\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            object.parentId = message.parentId;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.CommunityUserRef.toObject(message.user, options);\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.commentEdits && message.commentEdits.length) {\n            object.commentEdits = [];\n            for (var j = 0; j < message.commentEdits.length; ++j)\n                object.commentEdits[j] = $root.Comment.toObject(message.commentEdits[j], options);\n        }\n        if (message.mod && message.mod.length) {\n            object.mod = [];\n            for (var j = 0; j < message.mod.length; ++j)\n                object.mod[j] = $root.BanInfo.toObject(message.mod[j], options);\n        }\n        var keys2;\n        if (message.votes && (keys2 = Object.keys(message.votes)).length) {\n            object.votes = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.votes[keys2[j]] = message.votes[keys2[j]];\n        }\n        if (message.me != null && message.hasOwnProperty(\"me\"))\n            object.me = $root.CommentActionedContext.toObject(message.me, options);\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            object.unhandledReports = message.unhandledReports;\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            object.reports = message.reports;\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            object.depth = message.depth;\n        return object;\n    };\n\n    /**\n     * Converts this Comment to JSON.\n     * @function toJSON\n     * @memberof Comment\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Comment.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Comment;\n})();\n\n$root.CommentSelectFilters = (function() {\n\n    /**\n     * Properties of a CommentSelectFilters.\n     * @exports ICommentSelectFilters\n     * @interface ICommentSelectFilters\n     * @property {CommentSelectFilters.Method|null} [rankMethod] CommentSelectFilters rankMethod\n     * @property {CommentSelectFilters.SortDirection|null} [sortDirection] CommentSelectFilters sortDirection\n     * @property {string|null} [parentId] CommentSelectFilters parentId\n     * @property {string|null} [token] CommentSelectFilters token\n     */\n\n    /**\n     * Constructs a new CommentSelectFilters.\n     * @exports CommentSelectFilters\n     * @classdesc Represents a CommentSelectFilters.\n     * @implements ICommentSelectFilters\n     * @constructor\n     * @param {ICommentSelectFilters=} [properties] Properties to set\n     */\n    function CommentSelectFilters(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentSelectFilters rankMethod.\n     * @member {CommentSelectFilters.Method} rankMethod\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.rankMethod = 0;\n\n    /**\n     * CommentSelectFilters sortDirection.\n     * @member {CommentSelectFilters.SortDirection} sortDirection\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.sortDirection = 0;\n\n    /**\n     * CommentSelectFilters parentId.\n     * @member {string} parentId\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.parentId = \"\";\n\n    /**\n     * CommentSelectFilters token.\n     * @member {string} token\n     * @memberof CommentSelectFilters\n     * @instance\n     */\n    CommentSelectFilters.prototype.token = \"\";\n\n    /**\n     * Creates a new CommentSelectFilters instance using the specified properties.\n     * @function create\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {ICommentSelectFilters=} [properties] Properties to set\n     * @returns {CommentSelectFilters} CommentSelectFilters instance\n     */\n    CommentSelectFilters.create = function create(properties) {\n        return new CommentSelectFilters(properties);\n    };\n\n    /**\n     * Encodes the specified CommentSelectFilters message. Does not implicitly {@link CommentSelectFilters.verify|verify} messages.\n     * @function encode\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {ICommentSelectFilters} message CommentSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectFilters.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rankMethod != null && Object.hasOwnProperty.call(message, \"rankMethod\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rankMethod);\n        if (message.sortDirection != null && Object.hasOwnProperty.call(message, \"sortDirection\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sortDirection);\n        if (message.parentId != null && Object.hasOwnProperty.call(message, \"parentId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.parentId);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentSelectFilters message, length delimited. Does not implicitly {@link CommentSelectFilters.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {ICommentSelectFilters} message CommentSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentSelectFilters.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentSelectFilters message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentSelectFilters} CommentSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectFilters.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentSelectFilters();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rankMethod = reader.int32();\n                break;\n            case 2:\n                message.sortDirection = reader.int32();\n                break;\n            case 3:\n                message.parentId = reader.string();\n                break;\n            case 4:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentSelectFilters message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentSelectFilters} CommentSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentSelectFilters.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentSelectFilters message.\n     * @function verify\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentSelectFilters.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            switch (message.rankMethod) {\n            default:\n                return \"rankMethod: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n                break;\n            }\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            switch (message.sortDirection) {\n            default:\n                return \"sortDirection: enum value expected\";\n            case 0:\n            case 1:\n                break;\n            }\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            if (!$util.isString(message.parentId))\n                return \"parentId: string expected\";\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentSelectFilters message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentSelectFilters} CommentSelectFilters\n     */\n    CommentSelectFilters.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentSelectFilters)\n            return object;\n        var message = new $root.CommentSelectFilters();\n        switch (object.rankMethod) {\n        case \"BEST\":\n        case 0:\n            message.rankMethod = 0;\n            break;\n        case \"CONTROVERSIAL\":\n        case 1:\n            message.rankMethod = 1;\n            break;\n        case \"DATE\":\n        case 2:\n            message.rankMethod = 2;\n            break;\n        }\n        switch (object.sortDirection) {\n        case \"DESC\":\n        case 0:\n            message.sortDirection = 0;\n            break;\n        case \"ASC\":\n        case 1:\n            message.sortDirection = 1;\n            break;\n        }\n        if (object.parentId != null)\n            message.parentId = String(object.parentId);\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentSelectFilters message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentSelectFilters\n     * @static\n     * @param {CommentSelectFilters} message CommentSelectFilters\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentSelectFilters.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.rankMethod = options.enums === String ? \"BEST\" : 0;\n            object.sortDirection = options.enums === String ? \"DESC\" : 0;\n            object.parentId = \"\";\n            object.token = \"\";\n        }\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            object.rankMethod = options.enums === String ? $root.CommentSelectFilters.Method[message.rankMethod] : message.rankMethod;\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            object.sortDirection = options.enums === String ? $root.CommentSelectFilters.SortDirection[message.sortDirection] : message.sortDirection;\n        if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n            object.parentId = message.parentId;\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommentSelectFilters to JSON.\n     * @function toJSON\n     * @memberof CommentSelectFilters\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentSelectFilters.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Method enum.\n     * @name CommentSelectFilters.Method\n     * @enum {number}\n     * @property {number} BEST=0 BEST value\n     * @property {number} CONTROVERSIAL=1 CONTROVERSIAL value\n     * @property {number} DATE=2 DATE value\n     */\n    CommentSelectFilters.Method = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"BEST\"] = 0;\n        values[valuesById[1] = \"CONTROVERSIAL\"] = 1;\n        values[valuesById[2] = \"DATE\"] = 2;\n        return values;\n    })();\n\n    /**\n     * SortDirection enum.\n     * @name CommentSelectFilters.SortDirection\n     * @enum {number}\n     * @property {number} DESC=0 DESC value\n     * @property {number} ASC=1 ASC value\n     */\n    CommentSelectFilters.SortDirection = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"DESC\"] = 0;\n        values[valuesById[1] = \"ASC\"] = 1;\n        return values;\n    })();\n\n    return CommentSelectFilters;\n})();\n\n$root.ReportsSelectResponse = (function() {\n\n    /**\n     * Properties of a ReportsSelectResponse.\n     * @exports IReportsSelectResponse\n     * @interface IReportsSelectResponse\n     * @property {Array.<IReportInfo>|null} [reports] ReportsSelectResponse reports\n     * @property {string|null} [token] ReportsSelectResponse token\n     */\n\n    /**\n     * Constructs a new ReportsSelectResponse.\n     * @exports ReportsSelectResponse\n     * @classdesc Represents a ReportsSelectResponse.\n     * @implements IReportsSelectResponse\n     * @constructor\n     * @param {IReportsSelectResponse=} [properties] Properties to set\n     */\n    function ReportsSelectResponse(properties) {\n        this.reports = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportsSelectResponse reports.\n     * @member {Array.<IReportInfo>} reports\n     * @memberof ReportsSelectResponse\n     * @instance\n     */\n    ReportsSelectResponse.prototype.reports = $util.emptyArray;\n\n    /**\n     * ReportsSelectResponse token.\n     * @member {string} token\n     * @memberof ReportsSelectResponse\n     * @instance\n     */\n    ReportsSelectResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new ReportsSelectResponse instance using the specified properties.\n     * @function create\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {IReportsSelectResponse=} [properties] Properties to set\n     * @returns {ReportsSelectResponse} ReportsSelectResponse instance\n     */\n    ReportsSelectResponse.create = function create(properties) {\n        return new ReportsSelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified ReportsSelectResponse message. Does not implicitly {@link ReportsSelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {IReportsSelectResponse} message ReportsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportsSelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.reports != null && message.reports.length)\n            for (var i = 0; i < message.reports.length; ++i)\n                $root.ReportInfo.encode(message.reports[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportsSelectResponse message, length delimited. Does not implicitly {@link ReportsSelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {IReportsSelectResponse} message ReportsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportsSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportsSelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportsSelectResponse} ReportsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportsSelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportsSelectResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.reports && message.reports.length))\n                    message.reports = [];\n                message.reports.push($root.ReportInfo.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportsSelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportsSelectResponse} ReportsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportsSelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportsSelectResponse message.\n     * @function verify\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportsSelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.reports != null && message.hasOwnProperty(\"reports\")) {\n            if (!Array.isArray(message.reports))\n                return \"reports: array expected\";\n            for (var i = 0; i < message.reports.length; ++i) {\n                var error = $root.ReportInfo.verify(message.reports[i]);\n                if (error)\n                    return \"reports.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReportsSelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReportsSelectResponse} ReportsSelectResponse\n     */\n    ReportsSelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReportsSelectResponse)\n            return object;\n        var message = new $root.ReportsSelectResponse();\n        if (object.reports) {\n            if (!Array.isArray(object.reports))\n                throw TypeError(\".ReportsSelectResponse.reports: array expected\");\n            message.reports = [];\n            for (var i = 0; i < object.reports.length; ++i) {\n                if (typeof object.reports[i] !== \"object\")\n                    throw TypeError(\".ReportsSelectResponse.reports: object expected\");\n                message.reports[i] = $root.ReportInfo.fromObject(object.reports[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReportsSelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportsSelectResponse\n     * @static\n     * @param {ReportsSelectResponse} message ReportsSelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportsSelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.reports = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.reports && message.reports.length) {\n            object.reports = [];\n            for (var j = 0; j < message.reports.length; ++j)\n                object.reports[j] = $root.ReportInfo.toObject(message.reports[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this ReportsSelectResponse to JSON.\n     * @function toJSON\n     * @memberof ReportsSelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportsSelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportsSelectResponse;\n})();\n\n$root.CommunitySelectRequest = (function() {\n\n    /**\n     * Properties of a CommunitySelectRequest.\n     * @exports ICommunitySelectRequest\n     * @interface ICommunitySelectRequest\n     * @property {string|null} [query] CommunitySelectRequest query\n     * @property {number|null} [limit] CommunitySelectRequest limit\n     */\n\n    /**\n     * Constructs a new CommunitySelectRequest.\n     * @exports CommunitySelectRequest\n     * @classdesc Represents a CommunitySelectRequest.\n     * @implements ICommunitySelectRequest\n     * @constructor\n     * @param {ICommunitySelectRequest=} [properties] Properties to set\n     */\n    function CommunitySelectRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunitySelectRequest query.\n     * @member {string} query\n     * @memberof CommunitySelectRequest\n     * @instance\n     */\n    CommunitySelectRequest.prototype.query = \"\";\n\n    /**\n     * CommunitySelectRequest limit.\n     * @member {number} limit\n     * @memberof CommunitySelectRequest\n     * @instance\n     */\n    CommunitySelectRequest.prototype.limit = 0;\n\n    /**\n     * Creates a new CommunitySelectRequest instance using the specified properties.\n     * @function create\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {ICommunitySelectRequest=} [properties] Properties to set\n     * @returns {CommunitySelectRequest} CommunitySelectRequest instance\n     */\n    CommunitySelectRequest.create = function create(properties) {\n        return new CommunitySelectRequest(properties);\n    };\n\n    /**\n     * Encodes the specified CommunitySelectRequest message. Does not implicitly {@link CommunitySelectRequest.verify|verify} messages.\n     * @function encode\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {ICommunitySelectRequest} message CommunitySelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.query != null && Object.hasOwnProperty.call(message, \"query\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.query);\n        if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.limit);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunitySelectRequest message, length delimited. Does not implicitly {@link CommunitySelectRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {ICommunitySelectRequest} message CommunitySelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunitySelectRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunitySelectRequest} CommunitySelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunitySelectRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.query = reader.string();\n                break;\n            case 2:\n                message.limit = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunitySelectRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunitySelectRequest} CommunitySelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunitySelectRequest message.\n     * @function verify\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunitySelectRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            if (!$util.isString(message.query))\n                return \"query: string expected\";\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            if (!$util.isInteger(message.limit))\n                return \"limit: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommunitySelectRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunitySelectRequest} CommunitySelectRequest\n     */\n    CommunitySelectRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunitySelectRequest)\n            return object;\n        var message = new $root.CommunitySelectRequest();\n        if (object.query != null)\n            message.query = String(object.query);\n        if (object.limit != null)\n            message.limit = object.limit >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunitySelectRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunitySelectRequest\n     * @static\n     * @param {CommunitySelectRequest} message CommunitySelectRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunitySelectRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.query = \"\";\n            object.limit = 0;\n        }\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            object.query = message.query;\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            object.limit = message.limit;\n        return object;\n    };\n\n    /**\n     * Converts this CommunitySelectRequest to JSON.\n     * @function toJSON\n     * @memberof CommunitySelectRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunitySelectRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunitySelectRequest;\n})();\n\n$root.CommunitySelectResponse = (function() {\n\n    /**\n     * Properties of a CommunitySelectResponse.\n     * @exports ICommunitySelectResponse\n     * @interface ICommunitySelectResponse\n     * @property {Array.<IBoard>|null} [data] CommunitySelectResponse data\n     * @property {string|null} [token] CommunitySelectResponse token\n     */\n\n    /**\n     * Constructs a new CommunitySelectResponse.\n     * @exports CommunitySelectResponse\n     * @classdesc Represents a CommunitySelectResponse.\n     * @implements ICommunitySelectResponse\n     * @constructor\n     * @param {ICommunitySelectResponse=} [properties] Properties to set\n     */\n    function CommunitySelectResponse(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunitySelectResponse data.\n     * @member {Array.<IBoard>} data\n     * @memberof CommunitySelectResponse\n     * @instance\n     */\n    CommunitySelectResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * CommunitySelectResponse token.\n     * @member {string} token\n     * @memberof CommunitySelectResponse\n     * @instance\n     */\n    CommunitySelectResponse.prototype.token = \"\";\n\n    /**\n     * Creates a new CommunitySelectResponse instance using the specified properties.\n     * @function create\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {ICommunitySelectResponse=} [properties] Properties to set\n     * @returns {CommunitySelectResponse} CommunitySelectResponse instance\n     */\n    CommunitySelectResponse.create = function create(properties) {\n        return new CommunitySelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified CommunitySelectResponse message. Does not implicitly {@link CommunitySelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {ICommunitySelectResponse} message CommunitySelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Board.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunitySelectResponse message, length delimited. Does not implicitly {@link CommunitySelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {ICommunitySelectResponse} message CommunitySelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunitySelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunitySelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunitySelectResponse} CommunitySelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunitySelectResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Board.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunitySelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunitySelectResponse} CommunitySelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunitySelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunitySelectResponse message.\n     * @function verify\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunitySelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Board.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommunitySelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunitySelectResponse} CommunitySelectResponse\n     */\n    CommunitySelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunitySelectResponse)\n            return object;\n        var message = new $root.CommunitySelectResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".CommunitySelectResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".CommunitySelectResponse.data: object expected\");\n                message.data[i] = $root.Board.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunitySelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunitySelectResponse\n     * @static\n     * @param {CommunitySelectResponse} message CommunitySelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunitySelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Board.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        return object;\n    };\n\n    /**\n     * Converts this CommunitySelectResponse to JSON.\n     * @function toJSON\n     * @memberof CommunitySelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunitySelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunitySelectResponse;\n})();\n\n$root.BoardSubscription = (function() {\n\n    /**\n     * Properties of a BoardSubscription.\n     * @exports IBoardSubscription\n     * @interface IBoardSubscription\n     * @property {string|null} [boardId] BoardSubscription boardId\n     * @property {boolean|null} [isMod] BoardSubscription isMod\n     * @property {boolean|null} [isOwner] BoardSubscription isOwner\n     * @property {string|null} [isBanned] BoardSubscription isBanned\n     * @property {number|null} [members] BoardSubscription members\n     * @property {string|null} [icon] BoardSubscription icon\n     * @property {number|null} [createdAt] BoardSubscription createdAt\n     */\n\n    /**\n     * Constructs a new BoardSubscription.\n     * @exports BoardSubscription\n     * @classdesc Represents a BoardSubscription.\n     * @implements IBoardSubscription\n     * @constructor\n     * @param {IBoardSubscription=} [properties] Properties to set\n     */\n    function BoardSubscription(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardSubscription boardId.\n     * @member {string} boardId\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.boardId = \"\";\n\n    /**\n     * BoardSubscription isMod.\n     * @member {boolean} isMod\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.isMod = false;\n\n    /**\n     * BoardSubscription isOwner.\n     * @member {boolean} isOwner\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.isOwner = false;\n\n    /**\n     * BoardSubscription isBanned.\n     * @member {string} isBanned\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.isBanned = \"\";\n\n    /**\n     * BoardSubscription members.\n     * @member {number} members\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.members = 0;\n\n    /**\n     * BoardSubscription icon.\n     * @member {string} icon\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.icon = \"\";\n\n    /**\n     * BoardSubscription createdAt.\n     * @member {number} createdAt\n     * @memberof BoardSubscription\n     * @instance\n     */\n    BoardSubscription.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new BoardSubscription instance using the specified properties.\n     * @function create\n     * @memberof BoardSubscription\n     * @static\n     * @param {IBoardSubscription=} [properties] Properties to set\n     * @returns {BoardSubscription} BoardSubscription instance\n     */\n    BoardSubscription.create = function create(properties) {\n        return new BoardSubscription(properties);\n    };\n\n    /**\n     * Encodes the specified BoardSubscription message. Does not implicitly {@link BoardSubscription.verify|verify} messages.\n     * @function encode\n     * @memberof BoardSubscription\n     * @static\n     * @param {IBoardSubscription} message BoardSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardSubscription.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.boardId);\n        if (message.isMod != null && Object.hasOwnProperty.call(message, \"isMod\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isMod);\n        if (message.isBanned != null && Object.hasOwnProperty.call(message, \"isBanned\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.isBanned);\n        if (message.members != null && Object.hasOwnProperty.call(message, \"members\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.members);\n        if (message.icon != null && Object.hasOwnProperty.call(message, \"icon\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createdAt);\n        if (message.isOwner != null && Object.hasOwnProperty.call(message, \"isOwner\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isOwner);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardSubscription message, length delimited. Does not implicitly {@link BoardSubscription.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardSubscription\n     * @static\n     * @param {IBoardSubscription} message BoardSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardSubscription.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardSubscription message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardSubscription} BoardSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardSubscription.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardSubscription();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.boardId = reader.string();\n                break;\n            case 2:\n                message.isMod = reader.bool();\n                break;\n            case 7:\n                message.isOwner = reader.bool();\n                break;\n            case 3:\n                message.isBanned = reader.string();\n                break;\n            case 4:\n                message.members = reader.uint32();\n                break;\n            case 5:\n                message.icon = reader.string();\n                break;\n            case 6:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardSubscription message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardSubscription} BoardSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardSubscription.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardSubscription message.\n     * @function verify\n     * @memberof BoardSubscription\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardSubscription.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            if (typeof message.isMod !== \"boolean\")\n                return \"isMod: boolean expected\";\n        if (message.isOwner != null && message.hasOwnProperty(\"isOwner\"))\n            if (typeof message.isOwner !== \"boolean\")\n                return \"isOwner: boolean expected\";\n        if (message.isBanned != null && message.hasOwnProperty(\"isBanned\"))\n            if (!$util.isString(message.isBanned))\n                return \"isBanned: string expected\";\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            if (!$util.isInteger(message.members))\n                return \"members: integer expected\";\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            if (!$util.isString(message.icon))\n                return \"icon: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardSubscription message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardSubscription\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardSubscription} BoardSubscription\n     */\n    BoardSubscription.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardSubscription)\n            return object;\n        var message = new $root.BoardSubscription();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.isMod != null)\n            message.isMod = Boolean(object.isMod);\n        if (object.isOwner != null)\n            message.isOwner = Boolean(object.isOwner);\n        if (object.isBanned != null)\n            message.isBanned = String(object.isBanned);\n        if (object.members != null)\n            message.members = object.members >>> 0;\n        if (object.icon != null)\n            message.icon = String(object.icon);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardSubscription message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardSubscription\n     * @static\n     * @param {BoardSubscription} message BoardSubscription\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardSubscription.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.boardId = \"\";\n            object.isMod = false;\n            object.isBanned = \"\";\n            object.members = 0;\n            object.icon = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.isOwner = false;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            object.isMod = message.isMod;\n        if (message.isBanned != null && message.hasOwnProperty(\"isBanned\"))\n            object.isBanned = message.isBanned;\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            object.members = message.members;\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            object.icon = message.icon;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.isOwner != null && message.hasOwnProperty(\"isOwner\"))\n            object.isOwner = message.isOwner;\n        return object;\n    };\n\n    /**\n     * Converts this BoardSubscription to JSON.\n     * @function toJSON\n     * @memberof BoardSubscription\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardSubscription.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardSubscription;\n})();\n\n$root.Board = (function() {\n\n    /**\n     * Properties of a Board.\n     * @exports IBoard\n     * @interface IBoard\n     * @property {string|null} [uId] Board uId\n     * @property {string|null} [title] Board title\n     * @property {string|null} [description] Board description\n     * @property {string|null} [icon] Board icon\n     * @property {string|null} [banner] Board banner\n     * @property {number|null} [members] Board members\n     * @property {number|null} [posts] Board posts\n     * @property {number|null} [moderators] Board moderators\n     * @property {Array.<ICommunityUserRef>|null} [preview] Board preview\n     * @property {number|null} [votes] Board votes\n     * @property {string|null} [rules] Board rules\n     * @property {number|null} [createdAt] Board createdAt\n     * @property {boolean|null} [isModerator] Board isModerator\n     * @property {boolean|null} [isMember] Board isMember\n     * @property {number|null} [lockType] Board lockType\n     */\n\n    /**\n     * Constructs a new Board.\n     * @exports Board\n     * @classdesc Represents a Board.\n     * @implements IBoard\n     * @constructor\n     * @param {IBoard=} [properties] Properties to set\n     */\n    function Board(properties) {\n        this.preview = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Board uId.\n     * @member {string} uId\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.uId = \"\";\n\n    /**\n     * Board title.\n     * @member {string} title\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.title = \"\";\n\n    /**\n     * Board description.\n     * @member {string} description\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.description = \"\";\n\n    /**\n     * Board icon.\n     * @member {string} icon\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.icon = \"\";\n\n    /**\n     * Board banner.\n     * @member {string} banner\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.banner = \"\";\n\n    /**\n     * Board members.\n     * @member {number} members\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.members = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board posts.\n     * @member {number} posts\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.posts = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board moderators.\n     * @member {number} moderators\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.moderators = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board preview.\n     * @member {Array.<ICommunityUserRef>} preview\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.preview = $util.emptyArray;\n\n    /**\n     * Board votes.\n     * @member {number} votes\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.votes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board rules.\n     * @member {string} rules\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.rules = \"\";\n\n    /**\n     * Board createdAt.\n     * @member {number} createdAt\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Board isModerator.\n     * @member {boolean} isModerator\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.isModerator = false;\n\n    /**\n     * Board isMember.\n     * @member {boolean} isMember\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.isMember = false;\n\n    /**\n     * Board lockType.\n     * @member {number} lockType\n     * @memberof Board\n     * @instance\n     */\n    Board.prototype.lockType = 0;\n\n    /**\n     * Creates a new Board instance using the specified properties.\n     * @function create\n     * @memberof Board\n     * @static\n     * @param {IBoard=} [properties] Properties to set\n     * @returns {Board} Board instance\n     */\n    Board.create = function create(properties) {\n        return new Board(properties);\n    };\n\n    /**\n     * Encodes the specified Board message. Does not implicitly {@link Board.verify|verify} messages.\n     * @function encode\n     * @memberof Board\n     * @static\n     * @param {IBoard} message Board message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Board.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uId);\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);\n        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);\n        if (message.members != null && Object.hasOwnProperty.call(message, \"members\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.members);\n        if (message.posts != null && Object.hasOwnProperty.call(message, \"posts\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.posts);\n        if (message.moderators != null && Object.hasOwnProperty.call(message, \"moderators\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.moderators);\n        if (message.preview != null && message.preview.length)\n            for (var i = 0; i < message.preview.length; ++i)\n                $root.CommunityUserRef.encode(message.preview[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.votes);\n        if (message.rules != null && Object.hasOwnProperty.call(message, \"rules\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.rules);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.createdAt);\n        if (message.isModerator != null && Object.hasOwnProperty.call(message, \"isModerator\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isModerator);\n        if (message.isMember != null && Object.hasOwnProperty.call(message, \"isMember\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.isMember);\n        if (message.lockType != null && Object.hasOwnProperty.call(message, \"lockType\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.lockType);\n        if (message.icon != null && Object.hasOwnProperty.call(message, \"icon\"))\n            writer.uint32(/* id 99, wireType 2 =*/794).string(message.icon);\n        if (message.banner != null && Object.hasOwnProperty.call(message, \"banner\"))\n            writer.uint32(/* id 100, wireType 2 =*/802).string(message.banner);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Board message, length delimited. Does not implicitly {@link Board.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Board\n     * @static\n     * @param {IBoard} message Board message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Board.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Board message from the specified reader or buffer.\n     * @function decode\n     * @memberof Board\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Board} Board\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Board.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Board();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uId = reader.string();\n                break;\n            case 2:\n                message.title = reader.string();\n                break;\n            case 3:\n                message.description = reader.string();\n                break;\n            case 99:\n                message.icon = reader.string();\n                break;\n            case 100:\n                message.banner = reader.string();\n                break;\n            case 4:\n                message.members = reader.int64();\n                break;\n            case 5:\n                message.posts = reader.int64();\n                break;\n            case 6:\n                message.moderators = reader.int64();\n                break;\n            case 7:\n                if (!(message.preview && message.preview.length))\n                    message.preview = [];\n                message.preview.push($root.CommunityUserRef.decode(reader, reader.uint32()));\n                break;\n            case 8:\n                message.votes = reader.int64();\n                break;\n            case 9:\n                message.rules = reader.string();\n                break;\n            case 10:\n                message.createdAt = reader.int64();\n                break;\n            case 11:\n                message.isModerator = reader.bool();\n                break;\n            case 12:\n                message.isMember = reader.bool();\n                break;\n            case 13:\n                message.lockType = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Board message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Board\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Board} Board\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Board.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Board message.\n     * @function verify\n     * @memberof Board\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Board.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.description != null && message.hasOwnProperty(\"description\"))\n            if (!$util.isString(message.description))\n                return \"description: string expected\";\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            if (!$util.isString(message.icon))\n                return \"icon: string expected\";\n        if (message.banner != null && message.hasOwnProperty(\"banner\"))\n            if (!$util.isString(message.banner))\n                return \"banner: string expected\";\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            if (!$util.isInteger(message.members) && !(message.members && $util.isInteger(message.members.low) && $util.isInteger(message.members.high)))\n                return \"members: integer|Long expected\";\n        if (message.posts != null && message.hasOwnProperty(\"posts\"))\n            if (!$util.isInteger(message.posts) && !(message.posts && $util.isInteger(message.posts.low) && $util.isInteger(message.posts.high)))\n                return \"posts: integer|Long expected\";\n        if (message.moderators != null && message.hasOwnProperty(\"moderators\"))\n            if (!$util.isInteger(message.moderators) && !(message.moderators && $util.isInteger(message.moderators.low) && $util.isInteger(message.moderators.high)))\n                return \"moderators: integer|Long expected\";\n        if (message.preview != null && message.hasOwnProperty(\"preview\")) {\n            if (!Array.isArray(message.preview))\n                return \"preview: array expected\";\n            for (var i = 0; i < message.preview.length; ++i) {\n                var error = $root.CommunityUserRef.verify(message.preview[i]);\n                if (error)\n                    return \"preview.\" + error;\n            }\n        }\n        if (message.votes != null && message.hasOwnProperty(\"votes\"))\n            if (!$util.isInteger(message.votes) && !(message.votes && $util.isInteger(message.votes.low) && $util.isInteger(message.votes.high)))\n                return \"votes: integer|Long expected\";\n        if (message.rules != null && message.hasOwnProperty(\"rules\"))\n            if (!$util.isString(message.rules))\n                return \"rules: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            if (typeof message.isModerator !== \"boolean\")\n                return \"isModerator: boolean expected\";\n        if (message.isMember != null && message.hasOwnProperty(\"isMember\"))\n            if (typeof message.isMember !== \"boolean\")\n                return \"isMember: boolean expected\";\n        if (message.lockType != null && message.hasOwnProperty(\"lockType\"))\n            if (!$util.isInteger(message.lockType))\n                return \"lockType: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Board message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Board\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Board} Board\n     */\n    Board.fromObject = function fromObject(object) {\n        if (object instanceof $root.Board)\n            return object;\n        var message = new $root.Board();\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.description != null)\n            message.description = String(object.description);\n        if (object.icon != null)\n            message.icon = String(object.icon);\n        if (object.banner != null)\n            message.banner = String(object.banner);\n        if (object.members != null)\n            if ($util.Long)\n                (message.members = $util.Long.fromValue(object.members)).unsigned = false;\n            else if (typeof object.members === \"string\")\n                message.members = parseInt(object.members, 10);\n            else if (typeof object.members === \"number\")\n                message.members = object.members;\n            else if (typeof object.members === \"object\")\n                message.members = new $util.LongBits(object.members.low >>> 0, object.members.high >>> 0).toNumber();\n        if (object.posts != null)\n            if ($util.Long)\n                (message.posts = $util.Long.fromValue(object.posts)).unsigned = false;\n            else if (typeof object.posts === \"string\")\n                message.posts = parseInt(object.posts, 10);\n            else if (typeof object.posts === \"number\")\n                message.posts = object.posts;\n            else if (typeof object.posts === \"object\")\n                message.posts = new $util.LongBits(object.posts.low >>> 0, object.posts.high >>> 0).toNumber();\n        if (object.moderators != null)\n            if ($util.Long)\n                (message.moderators = $util.Long.fromValue(object.moderators)).unsigned = false;\n            else if (typeof object.moderators === \"string\")\n                message.moderators = parseInt(object.moderators, 10);\n            else if (typeof object.moderators === \"number\")\n                message.moderators = object.moderators;\n            else if (typeof object.moderators === \"object\")\n                message.moderators = new $util.LongBits(object.moderators.low >>> 0, object.moderators.high >>> 0).toNumber();\n        if (object.preview) {\n            if (!Array.isArray(object.preview))\n                throw TypeError(\".Board.preview: array expected\");\n            message.preview = [];\n            for (var i = 0; i < object.preview.length; ++i) {\n                if (typeof object.preview[i] !== \"object\")\n                    throw TypeError(\".Board.preview: object expected\");\n                message.preview[i] = $root.CommunityUserRef.fromObject(object.preview[i]);\n            }\n        }\n        if (object.votes != null)\n            if ($util.Long)\n                (message.votes = $util.Long.fromValue(object.votes)).unsigned = false;\n            else if (typeof object.votes === \"string\")\n                message.votes = parseInt(object.votes, 10);\n            else if (typeof object.votes === \"number\")\n                message.votes = object.votes;\n            else if (typeof object.votes === \"object\")\n                message.votes = new $util.LongBits(object.votes.low >>> 0, object.votes.high >>> 0).toNumber();\n        if (object.rules != null)\n            message.rules = String(object.rules);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.isModerator != null)\n            message.isModerator = Boolean(object.isModerator);\n        if (object.isMember != null)\n            message.isMember = Boolean(object.isMember);\n        if (object.lockType != null)\n            message.lockType = object.lockType | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Board message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Board\n     * @static\n     * @param {Board} message Board\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Board.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.preview = [];\n        if (options.defaults) {\n            object.uId = \"\";\n            object.title = \"\";\n            object.description = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.members = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.members = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.posts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.posts = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.moderators = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.moderators = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.votes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.votes = options.longs === String ? \"0\" : 0;\n            object.rules = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.isModerator = false;\n            object.isMember = false;\n            object.lockType = 0;\n            object.icon = \"\";\n            object.banner = \"\";\n        }\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.description != null && message.hasOwnProperty(\"description\"))\n            object.description = message.description;\n        if (message.members != null && message.hasOwnProperty(\"members\"))\n            if (typeof message.members === \"number\")\n                object.members = options.longs === String ? String(message.members) : message.members;\n            else\n                object.members = options.longs === String ? $util.Long.prototype.toString.call(message.members) : options.longs === Number ? new $util.LongBits(message.members.low >>> 0, message.members.high >>> 0).toNumber() : message.members;\n        if (message.posts != null && message.hasOwnProperty(\"posts\"))\n            if (typeof message.posts === \"number\")\n                object.posts = options.longs === String ? String(message.posts) : message.posts;\n            else\n                object.posts = options.longs === String ? $util.Long.prototype.toString.call(message.posts) : options.longs === Number ? new $util.LongBits(message.posts.low >>> 0, message.posts.high >>> 0).toNumber() : message.posts;\n        if (message.moderators != null && message.hasOwnProperty(\"moderators\"))\n            if (typeof message.moderators === \"number\")\n                object.moderators = options.longs === String ? String(message.moderators) : message.moderators;\n            else\n                object.moderators = options.longs === String ? $util.Long.prototype.toString.call(message.moderators) : options.longs === Number ? new $util.LongBits(message.moderators.low >>> 0, message.moderators.high >>> 0).toNumber() : message.moderators;\n        if (message.preview && message.preview.length) {\n            object.preview = [];\n            for (var j = 0; j < message.preview.length; ++j)\n                object.preview[j] = $root.CommunityUserRef.toObject(message.preview[j], options);\n        }\n        if (message.votes != null && message.hasOwnProperty(\"votes\"))\n            if (typeof message.votes === \"number\")\n                object.votes = options.longs === String ? String(message.votes) : message.votes;\n            else\n                object.votes = options.longs === String ? $util.Long.prototype.toString.call(message.votes) : options.longs === Number ? new $util.LongBits(message.votes.low >>> 0, message.votes.high >>> 0).toNumber() : message.votes;\n        if (message.rules != null && message.hasOwnProperty(\"rules\"))\n            object.rules = message.rules;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.isModerator != null && message.hasOwnProperty(\"isModerator\"))\n            object.isModerator = message.isModerator;\n        if (message.isMember != null && message.hasOwnProperty(\"isMember\"))\n            object.isMember = message.isMember;\n        if (message.lockType != null && message.hasOwnProperty(\"lockType\"))\n            object.lockType = message.lockType;\n        if (message.icon != null && message.hasOwnProperty(\"icon\"))\n            object.icon = message.icon;\n        if (message.banner != null && message.hasOwnProperty(\"banner\"))\n            object.banner = message.banner;\n        return object;\n    };\n\n    /**\n     * Converts this Board to JSON.\n     * @function toJSON\n     * @memberof Board\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Board.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Board;\n})();\n\n$root.CommunityUserRef = (function() {\n\n    /**\n     * Properties of a CommunityUserRef.\n     * @exports ICommunityUserRef\n     * @interface ICommunityUserRef\n     * @property {string|null} [username] CommunityUserRef username\n     * @property {string|null} [avatar] CommunityUserRef avatar\n     * @property {boolean|null} [isAdmin] CommunityUserRef isAdmin\n     * @property {boolean|null} [isMod] CommunityUserRef isMod\n     * @property {string|null} [flair] CommunityUserRef flair\n     * @property {Object.<string,number>|null} [awards] CommunityUserRef awards\n     */\n\n    /**\n     * Constructs a new CommunityUserRef.\n     * @exports CommunityUserRef\n     * @classdesc Represents a CommunityUserRef.\n     * @implements ICommunityUserRef\n     * @constructor\n     * @param {ICommunityUserRef=} [properties] Properties to set\n     */\n    function CommunityUserRef(properties) {\n        this.awards = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommunityUserRef username.\n     * @member {string} username\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.username = \"\";\n\n    /**\n     * CommunityUserRef avatar.\n     * @member {string} avatar\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.avatar = \"\";\n\n    /**\n     * CommunityUserRef isAdmin.\n     * @member {boolean} isAdmin\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.isAdmin = false;\n\n    /**\n     * CommunityUserRef isMod.\n     * @member {boolean} isMod\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.isMod = false;\n\n    /**\n     * CommunityUserRef flair.\n     * @member {string} flair\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.flair = \"\";\n\n    /**\n     * CommunityUserRef awards.\n     * @member {Object.<string,number>} awards\n     * @memberof CommunityUserRef\n     * @instance\n     */\n    CommunityUserRef.prototype.awards = $util.emptyObject;\n\n    /**\n     * Creates a new CommunityUserRef instance using the specified properties.\n     * @function create\n     * @memberof CommunityUserRef\n     * @static\n     * @param {ICommunityUserRef=} [properties] Properties to set\n     * @returns {CommunityUserRef} CommunityUserRef instance\n     */\n    CommunityUserRef.create = function create(properties) {\n        return new CommunityUserRef(properties);\n    };\n\n    /**\n     * Encodes the specified CommunityUserRef message. Does not implicitly {@link CommunityUserRef.verify|verify} messages.\n     * @function encode\n     * @memberof CommunityUserRef\n     * @static\n     * @param {ICommunityUserRef} message CommunityUserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunityUserRef.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);\n        if (message.avatar != null && Object.hasOwnProperty.call(message, \"avatar\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.avatar);\n        if (message.isAdmin != null && Object.hasOwnProperty.call(message, \"isAdmin\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isAdmin);\n        if (message.isMod != null && Object.hasOwnProperty.call(message, \"isMod\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isMod);\n        if (message.flair != null && Object.hasOwnProperty.call(message, \"flair\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.flair);\n        if (message.awards != null && Object.hasOwnProperty.call(message, \"awards\"))\n            for (var keys = Object.keys(message.awards), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.awards[keys[i]]).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommunityUserRef message, length delimited. Does not implicitly {@link CommunityUserRef.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommunityUserRef\n     * @static\n     * @param {ICommunityUserRef} message CommunityUserRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommunityUserRef.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommunityUserRef message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommunityUserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommunityUserRef} CommunityUserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunityUserRef.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunityUserRef(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.username = reader.string();\n                break;\n            case 6:\n                message.avatar = reader.string();\n                break;\n            case 7:\n                message.isAdmin = reader.bool();\n                break;\n            case 8:\n                message.isMod = reader.bool();\n                break;\n            case 9:\n                message.flair = reader.string();\n                break;\n            case 10:\n                if (message.awards === $util.emptyObject)\n                    message.awards = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.awards[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommunityUserRef message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommunityUserRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommunityUserRef} CommunityUserRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommunityUserRef.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommunityUserRef message.\n     * @function verify\n     * @memberof CommunityUserRef\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommunityUserRef.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            if (!$util.isString(message.avatar))\n                return \"avatar: string expected\";\n        if (message.isAdmin != null && message.hasOwnProperty(\"isAdmin\"))\n            if (typeof message.isAdmin !== \"boolean\")\n                return \"isAdmin: boolean expected\";\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            if (typeof message.isMod !== \"boolean\")\n                return \"isMod: boolean expected\";\n        if (message.flair != null && message.hasOwnProperty(\"flair\"))\n            if (!$util.isString(message.flair))\n                return \"flair: string expected\";\n        if (message.awards != null && message.hasOwnProperty(\"awards\")) {\n            if (!$util.isObject(message.awards))\n                return \"awards: object expected\";\n            var key = Object.keys(message.awards);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.awards[key[i]]))\n                    return \"awards: integer{k:string} expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a CommunityUserRef message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommunityUserRef\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommunityUserRef} CommunityUserRef\n     */\n    CommunityUserRef.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommunityUserRef)\n            return object;\n        var message = new $root.CommunityUserRef();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.avatar != null)\n            message.avatar = String(object.avatar);\n        if (object.isAdmin != null)\n            message.isAdmin = Boolean(object.isAdmin);\n        if (object.isMod != null)\n            message.isMod = Boolean(object.isMod);\n        if (object.flair != null)\n            message.flair = String(object.flair);\n        if (object.awards) {\n            if (typeof object.awards !== \"object\")\n                throw TypeError(\".CommunityUserRef.awards: object expected\");\n            message.awards = {};\n            for (var keys = Object.keys(object.awards), i = 0; i < keys.length; ++i)\n                message.awards[keys[i]] = object.awards[keys[i]] >>> 0;\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommunityUserRef message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommunityUserRef\n     * @static\n     * @param {CommunityUserRef} message CommunityUserRef\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommunityUserRef.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.awards = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.avatar = \"\";\n            object.isAdmin = false;\n            object.isMod = false;\n            object.flair = \"\";\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.avatar != null && message.hasOwnProperty(\"avatar\"))\n            object.avatar = message.avatar;\n        if (message.isAdmin != null && message.hasOwnProperty(\"isAdmin\"))\n            object.isAdmin = message.isAdmin;\n        if (message.isMod != null && message.hasOwnProperty(\"isMod\"))\n            object.isMod = message.isMod;\n        if (message.flair != null && message.hasOwnProperty(\"flair\"))\n            object.flair = message.flair;\n        var keys2;\n        if (message.awards && (keys2 = Object.keys(message.awards)).length) {\n            object.awards = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.awards[keys2[j]] = message.awards[keys2[j]];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this CommunityUserRef to JSON.\n     * @function toJSON\n     * @memberof CommunityUserRef\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommunityUserRef.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommunityUserRef;\n})();\n\n$root.Thread = (function() {\n\n    /**\n     * Properties of a Thread.\n     * @exports IThread\n     * @interface IThread\n     * @property {string|null} [uId] Thread uId\n     * @property {string|null} [url] Thread url\n     * @property {number|null} [type] Thread type\n     * @property {string|null} [title] Thread title\n     * @property {string|null} [link] Thread link\n     * @property {string|null} [linkType] Thread linkType\n     * @property {string|null} [content] Thread content\n     * @property {string|null} [thumb] Thread thumb\n     * @property {ICommunityUserRef|null} [user] Thread user\n     * @property {number|null} [createdAt] Thread createdAt\n     * @property {string|null} [boardId] Thread boardId\n     * @property {boolean|null} [isKicked] Thread isKicked\n     * @property {boolean|null} [isLocked] Thread isLocked\n     * @property {boolean|null} [isArchived] Thread isArchived\n     * @property {number|null} [thumbAspectRatio] Thread thumbAspectRatio\n     * @property {string|null} [location] Thread location\n     * @property {number|null} [numComments] Thread numComments\n     * @property {number|null} [lastCommentAt] Thread lastCommentAt\n     * @property {Object.<string,number>|null} [votes] Thread votes\n     * @property {Array.<string>|null} [acceptedVotes] Thread acceptedVotes\n     * @property {Array.<string>|null} [acceptedCommentVotes] Thread acceptedCommentVotes\n     * @property {Array.<IBanInfo>|null} [mod] Thread mod\n     * @property {number|null} [unhandledReports] Thread unhandledReports\n     * @property {number|null} [reports] Thread reports\n     * @property {IThreadActionedContext|null} [me] Thread me\n     */\n\n    /**\n     * Constructs a new Thread.\n     * @exports Thread\n     * @classdesc Represents a Thread.\n     * @implements IThread\n     * @constructor\n     * @param {IThread=} [properties] Properties to set\n     */\n    function Thread(properties) {\n        this.votes = {};\n        this.acceptedVotes = [];\n        this.acceptedCommentVotes = [];\n        this.mod = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Thread uId.\n     * @member {string} uId\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.uId = \"\";\n\n    /**\n     * Thread url.\n     * @member {string} url\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.url = \"\";\n\n    /**\n     * Thread type.\n     * @member {number} type\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.type = 0;\n\n    /**\n     * Thread title.\n     * @member {string} title\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.title = \"\";\n\n    /**\n     * Thread link.\n     * @member {string} link\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.link = \"\";\n\n    /**\n     * Thread linkType.\n     * @member {string} linkType\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.linkType = \"\";\n\n    /**\n     * Thread content.\n     * @member {string} content\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.content = \"\";\n\n    /**\n     * Thread thumb.\n     * @member {string} thumb\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.thumb = \"\";\n\n    /**\n     * Thread user.\n     * @member {ICommunityUserRef|null|undefined} user\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.user = null;\n\n    /**\n     * Thread createdAt.\n     * @member {number} createdAt\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread boardId.\n     * @member {string} boardId\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.boardId = \"\";\n\n    /**\n     * Thread isKicked.\n     * @member {boolean} isKicked\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.isKicked = false;\n\n    /**\n     * Thread isLocked.\n     * @member {boolean} isLocked\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.isLocked = false;\n\n    /**\n     * Thread isArchived.\n     * @member {boolean} isArchived\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.isArchived = false;\n\n    /**\n     * Thread thumbAspectRatio.\n     * @member {number} thumbAspectRatio\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.thumbAspectRatio = 0;\n\n    /**\n     * Thread location.\n     * @member {string} location\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.location = \"\";\n\n    /**\n     * Thread numComments.\n     * @member {number} numComments\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.numComments = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread lastCommentAt.\n     * @member {number} lastCommentAt\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.lastCommentAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Thread votes.\n     * @member {Object.<string,number>} votes\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.votes = $util.emptyObject;\n\n    /**\n     * Thread acceptedVotes.\n     * @member {Array.<string>} acceptedVotes\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.acceptedVotes = $util.emptyArray;\n\n    /**\n     * Thread acceptedCommentVotes.\n     * @member {Array.<string>} acceptedCommentVotes\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.acceptedCommentVotes = $util.emptyArray;\n\n    /**\n     * Thread mod.\n     * @member {Array.<IBanInfo>} mod\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.mod = $util.emptyArray;\n\n    /**\n     * Thread unhandledReports.\n     * @member {number} unhandledReports\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.unhandledReports = 0;\n\n    /**\n     * Thread reports.\n     * @member {number} reports\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.reports = 0;\n\n    /**\n     * Thread me.\n     * @member {IThreadActionedContext|null|undefined} me\n     * @memberof Thread\n     * @instance\n     */\n    Thread.prototype.me = null;\n\n    /**\n     * Creates a new Thread instance using the specified properties.\n     * @function create\n     * @memberof Thread\n     * @static\n     * @param {IThread=} [properties] Properties to set\n     * @returns {Thread} Thread instance\n     */\n    Thread.create = function create(properties) {\n        return new Thread(properties);\n    };\n\n    /**\n     * Encodes the specified Thread message. Does not implicitly {@link Thread.verify|verify} messages.\n     * @function encode\n     * @memberof Thread\n     * @static\n     * @param {IThread} message Thread message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Thread.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uId);\n        if (message.url != null && Object.hasOwnProperty.call(message, \"url\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.title);\n        if (message.link != null && Object.hasOwnProperty.call(message, \"link\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.link);\n        if (message.linkType != null && Object.hasOwnProperty.call(message, \"linkType\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.linkType);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.content);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.CommunityUserRef.encode(message.user, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.createdAt);\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 10, wireType 2 =*/82).string(message.boardId);\n        if (message.isKicked != null && Object.hasOwnProperty.call(message, \"isKicked\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isKicked);\n        if (message.isLocked != null && Object.hasOwnProperty.call(message, \"isLocked\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.isLocked);\n        if (message.isArchived != null && Object.hasOwnProperty.call(message, \"isArchived\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isArchived);\n        if (message.thumbAspectRatio != null && Object.hasOwnProperty.call(message, \"thumbAspectRatio\"))\n            writer.uint32(/* id 14, wireType 5 =*/117).float(message.thumbAspectRatio);\n        if (message.location != null && Object.hasOwnProperty.call(message, \"location\"))\n            writer.uint32(/* id 15, wireType 2 =*/122).string(message.location);\n        if (message.numComments != null && Object.hasOwnProperty.call(message, \"numComments\"))\n            writer.uint32(/* id 16, wireType 0 =*/128).int64(message.numComments);\n        if (message.lastCommentAt != null && Object.hasOwnProperty.call(message, \"lastCommentAt\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).int64(message.lastCommentAt);\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            for (var keys = Object.keys(message.votes), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 18, wireType 2 =*/146).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.votes[keys[i]]).ldelim();\n        if (message.acceptedVotes != null && message.acceptedVotes.length)\n            for (var i = 0; i < message.acceptedVotes.length; ++i)\n                writer.uint32(/* id 19, wireType 2 =*/154).string(message.acceptedVotes[i]);\n        if (message.acceptedCommentVotes != null && message.acceptedCommentVotes.length)\n            for (var i = 0; i < message.acceptedCommentVotes.length; ++i)\n                writer.uint32(/* id 20, wireType 2 =*/162).string(message.acceptedCommentVotes[i]);\n        if (message.mod != null && message.mod.length)\n            for (var i = 0; i < message.mod.length; ++i)\n                $root.BanInfo.encode(message.mod[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n        if (message.me != null && Object.hasOwnProperty.call(message, \"me\"))\n            $root.ThreadActionedContext.encode(message.me, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n        if (message.unhandledReports != null && Object.hasOwnProperty.call(message, \"unhandledReports\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).int32(message.unhandledReports);\n        if (message.reports != null && Object.hasOwnProperty.call(message, \"reports\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.reports);\n        if (message.thumb != null && Object.hasOwnProperty.call(message, \"thumb\"))\n            writer.uint32(/* id 30, wireType 2 =*/242).string(message.thumb);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Thread message, length delimited. Does not implicitly {@link Thread.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Thread\n     * @static\n     * @param {IThread} message Thread message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Thread.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Thread message from the specified reader or buffer.\n     * @function decode\n     * @memberof Thread\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Thread} Thread\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Thread.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Thread(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.uId = reader.string();\n                break;\n            case 2:\n                message.url = reader.string();\n                break;\n            case 3:\n                message.type = reader.uint32();\n                break;\n            case 4:\n                message.title = reader.string();\n                break;\n            case 5:\n                message.link = reader.string();\n                break;\n            case 6:\n                message.linkType = reader.string();\n                break;\n            case 7:\n                message.content = reader.string();\n                break;\n            case 30:\n                message.thumb = reader.string();\n                break;\n            case 8:\n                message.user = $root.CommunityUserRef.decode(reader, reader.uint32());\n                break;\n            case 9:\n                message.createdAt = reader.int64();\n                break;\n            case 10:\n                message.boardId = reader.string();\n                break;\n            case 11:\n                message.isKicked = reader.bool();\n                break;\n            case 12:\n                message.isLocked = reader.bool();\n                break;\n            case 13:\n                message.isArchived = reader.bool();\n                break;\n            case 14:\n                message.thumbAspectRatio = reader.float();\n                break;\n            case 15:\n                message.location = reader.string();\n                break;\n            case 16:\n                message.numComments = reader.int64();\n                break;\n            case 17:\n                message.lastCommentAt = reader.int64();\n                break;\n            case 18:\n                if (message.votes === $util.emptyObject)\n                    message.votes = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.votes[key] = value;\n                break;\n            case 19:\n                if (!(message.acceptedVotes && message.acceptedVotes.length))\n                    message.acceptedVotes = [];\n                message.acceptedVotes.push(reader.string());\n                break;\n            case 20:\n                if (!(message.acceptedCommentVotes && message.acceptedCommentVotes.length))\n                    message.acceptedCommentVotes = [];\n                message.acceptedCommentVotes.push(reader.string());\n                break;\n            case 21:\n                if (!(message.mod && message.mod.length))\n                    message.mod = [];\n                message.mod.push($root.BanInfo.decode(reader, reader.uint32()));\n                break;\n            case 24:\n                message.unhandledReports = reader.int32();\n                break;\n            case 25:\n                message.reports = reader.int32();\n                break;\n            case 23:\n                message.me = $root.ThreadActionedContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Thread message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Thread\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Thread} Thread\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Thread.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Thread message.\n     * @function verify\n     * @memberof Thread\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Thread.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.url != null && message.hasOwnProperty(\"url\"))\n            if (!$util.isString(message.url))\n                return \"url: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isInteger(message.type))\n                return \"type: integer expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            if (!$util.isString(message.link))\n                return \"link: string expected\";\n        if (message.linkType != null && message.hasOwnProperty(\"linkType\"))\n            if (!$util.isString(message.linkType))\n                return \"linkType: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            if (!$util.isString(message.content))\n                return \"content: string expected\";\n        if (message.thumb != null && message.hasOwnProperty(\"thumb\"))\n            if (!$util.isString(message.thumb))\n                return \"thumb: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.CommunityUserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.isKicked != null && message.hasOwnProperty(\"isKicked\"))\n            if (typeof message.isKicked !== \"boolean\")\n                return \"isKicked: boolean expected\";\n        if (message.isLocked != null && message.hasOwnProperty(\"isLocked\"))\n            if (typeof message.isLocked !== \"boolean\")\n                return \"isLocked: boolean expected\";\n        if (message.isArchived != null && message.hasOwnProperty(\"isArchived\"))\n            if (typeof message.isArchived !== \"boolean\")\n                return \"isArchived: boolean expected\";\n        if (message.thumbAspectRatio != null && message.hasOwnProperty(\"thumbAspectRatio\"))\n            if (typeof message.thumbAspectRatio !== \"number\")\n                return \"thumbAspectRatio: number expected\";\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            if (!$util.isString(message.location))\n                return \"location: string expected\";\n        if (message.numComments != null && message.hasOwnProperty(\"numComments\"))\n            if (!$util.isInteger(message.numComments) && !(message.numComments && $util.isInteger(message.numComments.low) && $util.isInteger(message.numComments.high)))\n                return \"numComments: integer|Long expected\";\n        if (message.lastCommentAt != null && message.hasOwnProperty(\"lastCommentAt\"))\n            if (!$util.isInteger(message.lastCommentAt) && !(message.lastCommentAt && $util.isInteger(message.lastCommentAt.low) && $util.isInteger(message.lastCommentAt.high)))\n                return \"lastCommentAt: integer|Long expected\";\n        if (message.votes != null && message.hasOwnProperty(\"votes\")) {\n            if (!$util.isObject(message.votes))\n                return \"votes: object expected\";\n            var key = Object.keys(message.votes);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.votes[key[i]]))\n                    return \"votes: integer{k:string} expected\";\n        }\n        if (message.acceptedVotes != null && message.hasOwnProperty(\"acceptedVotes\")) {\n            if (!Array.isArray(message.acceptedVotes))\n                return \"acceptedVotes: array expected\";\n            for (var i = 0; i < message.acceptedVotes.length; ++i)\n                if (!$util.isString(message.acceptedVotes[i]))\n                    return \"acceptedVotes: string[] expected\";\n        }\n        if (message.acceptedCommentVotes != null && message.hasOwnProperty(\"acceptedCommentVotes\")) {\n            if (!Array.isArray(message.acceptedCommentVotes))\n                return \"acceptedCommentVotes: array expected\";\n            for (var i = 0; i < message.acceptedCommentVotes.length; ++i)\n                if (!$util.isString(message.acceptedCommentVotes[i]))\n                    return \"acceptedCommentVotes: string[] expected\";\n        }\n        if (message.mod != null && message.hasOwnProperty(\"mod\")) {\n            if (!Array.isArray(message.mod))\n                return \"mod: array expected\";\n            for (var i = 0; i < message.mod.length; ++i) {\n                var error = $root.BanInfo.verify(message.mod[i]);\n                if (error)\n                    return \"mod.\" + error;\n            }\n        }\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            if (!$util.isInteger(message.unhandledReports))\n                return \"unhandledReports: integer expected\";\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            if (!$util.isInteger(message.reports))\n                return \"reports: integer expected\";\n        if (message.me != null && message.hasOwnProperty(\"me\")) {\n            var error = $root.ThreadActionedContext.verify(message.me);\n            if (error)\n                return \"me.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Thread message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Thread\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Thread} Thread\n     */\n    Thread.fromObject = function fromObject(object) {\n        if (object instanceof $root.Thread)\n            return object;\n        var message = new $root.Thread();\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.url != null)\n            message.url = String(object.url);\n        if (object.type != null)\n            message.type = object.type >>> 0;\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.link != null)\n            message.link = String(object.link);\n        if (object.linkType != null)\n            message.linkType = String(object.linkType);\n        if (object.content != null)\n            message.content = String(object.content);\n        if (object.thumb != null)\n            message.thumb = String(object.thumb);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".Thread.user: object expected\");\n            message.user = $root.CommunityUserRef.fromObject(object.user);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.isKicked != null)\n            message.isKicked = Boolean(object.isKicked);\n        if (object.isLocked != null)\n            message.isLocked = Boolean(object.isLocked);\n        if (object.isArchived != null)\n            message.isArchived = Boolean(object.isArchived);\n        if (object.thumbAspectRatio != null)\n            message.thumbAspectRatio = Number(object.thumbAspectRatio);\n        if (object.location != null)\n            message.location = String(object.location);\n        if (object.numComments != null)\n            if ($util.Long)\n                (message.numComments = $util.Long.fromValue(object.numComments)).unsigned = false;\n            else if (typeof object.numComments === \"string\")\n                message.numComments = parseInt(object.numComments, 10);\n            else if (typeof object.numComments === \"number\")\n                message.numComments = object.numComments;\n            else if (typeof object.numComments === \"object\")\n                message.numComments = new $util.LongBits(object.numComments.low >>> 0, object.numComments.high >>> 0).toNumber();\n        if (object.lastCommentAt != null)\n            if ($util.Long)\n                (message.lastCommentAt = $util.Long.fromValue(object.lastCommentAt)).unsigned = false;\n            else if (typeof object.lastCommentAt === \"string\")\n                message.lastCommentAt = parseInt(object.lastCommentAt, 10);\n            else if (typeof object.lastCommentAt === \"number\")\n                message.lastCommentAt = object.lastCommentAt;\n            else if (typeof object.lastCommentAt === \"object\")\n                message.lastCommentAt = new $util.LongBits(object.lastCommentAt.low >>> 0, object.lastCommentAt.high >>> 0).toNumber();\n        if (object.votes) {\n            if (typeof object.votes !== \"object\")\n                throw TypeError(\".Thread.votes: object expected\");\n            message.votes = {};\n            for (var keys = Object.keys(object.votes), i = 0; i < keys.length; ++i)\n                message.votes[keys[i]] = object.votes[keys[i]] | 0;\n        }\n        if (object.acceptedVotes) {\n            if (!Array.isArray(object.acceptedVotes))\n                throw TypeError(\".Thread.acceptedVotes: array expected\");\n            message.acceptedVotes = [];\n            for (var i = 0; i < object.acceptedVotes.length; ++i)\n                message.acceptedVotes[i] = String(object.acceptedVotes[i]);\n        }\n        if (object.acceptedCommentVotes) {\n            if (!Array.isArray(object.acceptedCommentVotes))\n                throw TypeError(\".Thread.acceptedCommentVotes: array expected\");\n            message.acceptedCommentVotes = [];\n            for (var i = 0; i < object.acceptedCommentVotes.length; ++i)\n                message.acceptedCommentVotes[i] = String(object.acceptedCommentVotes[i]);\n        }\n        if (object.mod) {\n            if (!Array.isArray(object.mod))\n                throw TypeError(\".Thread.mod: array expected\");\n            message.mod = [];\n            for (var i = 0; i < object.mod.length; ++i) {\n                if (typeof object.mod[i] !== \"object\")\n                    throw TypeError(\".Thread.mod: object expected\");\n                message.mod[i] = $root.BanInfo.fromObject(object.mod[i]);\n            }\n        }\n        if (object.unhandledReports != null)\n            message.unhandledReports = object.unhandledReports | 0;\n        if (object.reports != null)\n            message.reports = object.reports | 0;\n        if (object.me != null) {\n            if (typeof object.me !== \"object\")\n                throw TypeError(\".Thread.me: object expected\");\n            message.me = $root.ThreadActionedContext.fromObject(object.me);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Thread message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Thread\n     * @static\n     * @param {Thread} message Thread\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Thread.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.acceptedVotes = [];\n            object.acceptedCommentVotes = [];\n            object.mod = [];\n        }\n        if (options.objects || options.defaults)\n            object.votes = {};\n        if (options.defaults) {\n            object.uId = \"\";\n            object.url = \"\";\n            object.type = 0;\n            object.title = \"\";\n            object.link = \"\";\n            object.linkType = \"\";\n            object.content = \"\";\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.boardId = \"\";\n            object.isKicked = false;\n            object.isLocked = false;\n            object.isArchived = false;\n            object.thumbAspectRatio = 0;\n            object.location = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.numComments = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.numComments = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.lastCommentAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.lastCommentAt = options.longs === String ? \"0\" : 0;\n            object.me = null;\n            object.unhandledReports = 0;\n            object.reports = 0;\n            object.thumb = \"\";\n        }\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.url != null && message.hasOwnProperty(\"url\"))\n            object.url = message.url;\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.link != null && message.hasOwnProperty(\"link\"))\n            object.link = message.link;\n        if (message.linkType != null && message.hasOwnProperty(\"linkType\"))\n            object.linkType = message.linkType;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = message.content;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.CommunityUserRef.toObject(message.user, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.isKicked != null && message.hasOwnProperty(\"isKicked\"))\n            object.isKicked = message.isKicked;\n        if (message.isLocked != null && message.hasOwnProperty(\"isLocked\"))\n            object.isLocked = message.isLocked;\n        if (message.isArchived != null && message.hasOwnProperty(\"isArchived\"))\n            object.isArchived = message.isArchived;\n        if (message.thumbAspectRatio != null && message.hasOwnProperty(\"thumbAspectRatio\"))\n            object.thumbAspectRatio = options.json && !isFinite(message.thumbAspectRatio) ? String(message.thumbAspectRatio) : message.thumbAspectRatio;\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            object.location = message.location;\n        if (message.numComments != null && message.hasOwnProperty(\"numComments\"))\n            if (typeof message.numComments === \"number\")\n                object.numComments = options.longs === String ? String(message.numComments) : message.numComments;\n            else\n                object.numComments = options.longs === String ? $util.Long.prototype.toString.call(message.numComments) : options.longs === Number ? new $util.LongBits(message.numComments.low >>> 0, message.numComments.high >>> 0).toNumber() : message.numComments;\n        if (message.lastCommentAt != null && message.hasOwnProperty(\"lastCommentAt\"))\n            if (typeof message.lastCommentAt === \"number\")\n                object.lastCommentAt = options.longs === String ? String(message.lastCommentAt) : message.lastCommentAt;\n            else\n                object.lastCommentAt = options.longs === String ? $util.Long.prototype.toString.call(message.lastCommentAt) : options.longs === Number ? new $util.LongBits(message.lastCommentAt.low >>> 0, message.lastCommentAt.high >>> 0).toNumber() : message.lastCommentAt;\n        var keys2;\n        if (message.votes && (keys2 = Object.keys(message.votes)).length) {\n            object.votes = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.votes[keys2[j]] = message.votes[keys2[j]];\n        }\n        if (message.acceptedVotes && message.acceptedVotes.length) {\n            object.acceptedVotes = [];\n            for (var j = 0; j < message.acceptedVotes.length; ++j)\n                object.acceptedVotes[j] = message.acceptedVotes[j];\n        }\n        if (message.acceptedCommentVotes && message.acceptedCommentVotes.length) {\n            object.acceptedCommentVotes = [];\n            for (var j = 0; j < message.acceptedCommentVotes.length; ++j)\n                object.acceptedCommentVotes[j] = message.acceptedCommentVotes[j];\n        }\n        if (message.mod && message.mod.length) {\n            object.mod = [];\n            for (var j = 0; j < message.mod.length; ++j)\n                object.mod[j] = $root.BanInfo.toObject(message.mod[j], options);\n        }\n        if (message.me != null && message.hasOwnProperty(\"me\"))\n            object.me = $root.ThreadActionedContext.toObject(message.me, options);\n        if (message.unhandledReports != null && message.hasOwnProperty(\"unhandledReports\"))\n            object.unhandledReports = message.unhandledReports;\n        if (message.reports != null && message.hasOwnProperty(\"reports\"))\n            object.reports = message.reports;\n        if (message.thumb != null && message.hasOwnProperty(\"thumb\"))\n            object.thumb = message.thumb;\n        return object;\n    };\n\n    /**\n     * Converts this Thread to JSON.\n     * @function toJSON\n     * @memberof Thread\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Thread.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Thread;\n})();\n\n$root.EntityVoteRequest = (function() {\n\n    /**\n     * Properties of an EntityVoteRequest.\n     * @exports IEntityVoteRequest\n     * @interface IEntityVoteRequest\n     * @property {string|null} [type] EntityVoteRequest type\n     * @property {string|null} [entityId] EntityVoteRequest entityId\n     * @property {IVote|null} [vote] EntityVoteRequest vote\n     */\n\n    /**\n     * Constructs a new EntityVoteRequest.\n     * @exports EntityVoteRequest\n     * @classdesc Represents an EntityVoteRequest.\n     * @implements IEntityVoteRequest\n     * @constructor\n     * @param {IEntityVoteRequest=} [properties] Properties to set\n     */\n    function EntityVoteRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EntityVoteRequest type.\n     * @member {string} type\n     * @memberof EntityVoteRequest\n     * @instance\n     */\n    EntityVoteRequest.prototype.type = \"\";\n\n    /**\n     * EntityVoteRequest entityId.\n     * @member {string} entityId\n     * @memberof EntityVoteRequest\n     * @instance\n     */\n    EntityVoteRequest.prototype.entityId = \"\";\n\n    /**\n     * EntityVoteRequest vote.\n     * @member {IVote|null|undefined} vote\n     * @memberof EntityVoteRequest\n     * @instance\n     */\n    EntityVoteRequest.prototype.vote = null;\n\n    /**\n     * Creates a new EntityVoteRequest instance using the specified properties.\n     * @function create\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {IEntityVoteRequest=} [properties] Properties to set\n     * @returns {EntityVoteRequest} EntityVoteRequest instance\n     */\n    EntityVoteRequest.create = function create(properties) {\n        return new EntityVoteRequest(properties);\n    };\n\n    /**\n     * Encodes the specified EntityVoteRequest message. Does not implicitly {@link EntityVoteRequest.verify|verify} messages.\n     * @function encode\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {IEntityVoteRequest} message EntityVoteRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EntityVoteRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n        if (message.entityId != null && Object.hasOwnProperty.call(message, \"entityId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);\n        if (message.vote != null && Object.hasOwnProperty.call(message, \"vote\"))\n            $root.Vote.encode(message.vote, writer.uint32(/* id 99, wireType 2 =*/794).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EntityVoteRequest message, length delimited. Does not implicitly {@link EntityVoteRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {IEntityVoteRequest} message EntityVoteRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EntityVoteRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EntityVoteRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EntityVoteRequest} EntityVoteRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EntityVoteRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EntityVoteRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.string();\n                break;\n            case 2:\n                message.entityId = reader.string();\n                break;\n            case 99:\n                message.vote = $root.Vote.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EntityVoteRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EntityVoteRequest} EntityVoteRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EntityVoteRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EntityVoteRequest message.\n     * @function verify\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EntityVoteRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.entityId != null && message.hasOwnProperty(\"entityId\"))\n            if (!$util.isString(message.entityId))\n                return \"entityId: string expected\";\n        if (message.vote != null && message.hasOwnProperty(\"vote\")) {\n            var error = $root.Vote.verify(message.vote);\n            if (error)\n                return \"vote.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates an EntityVoteRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EntityVoteRequest} EntityVoteRequest\n     */\n    EntityVoteRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.EntityVoteRequest)\n            return object;\n        var message = new $root.EntityVoteRequest();\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.entityId != null)\n            message.entityId = String(object.entityId);\n        if (object.vote != null) {\n            if (typeof object.vote !== \"object\")\n                throw TypeError(\".EntityVoteRequest.vote: object expected\");\n            message.vote = $root.Vote.fromObject(object.vote);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EntityVoteRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EntityVoteRequest\n     * @static\n     * @param {EntityVoteRequest} message EntityVoteRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EntityVoteRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = \"\";\n            object.entityId = \"\";\n            object.vote = null;\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.entityId != null && message.hasOwnProperty(\"entityId\"))\n            object.entityId = message.entityId;\n        if (message.vote != null && message.hasOwnProperty(\"vote\"))\n            object.vote = $root.Vote.toObject(message.vote, options);\n        return object;\n    };\n\n    /**\n     * Converts this EntityVoteRequest to JSON.\n     * @function toJSON\n     * @memberof EntityVoteRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EntityVoteRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EntityVoteRequest;\n})();\n\n$root.ThreadSelectFilters = (function() {\n\n    /**\n     * Properties of a ThreadSelectFilters.\n     * @exports IThreadSelectFilters\n     * @interface IThreadSelectFilters\n     * @property {ThreadSelectFilters.Method|null} [rankMethod] ThreadSelectFilters rankMethod\n     * @property {ThreadSelectFilters.SortDirection|null} [sortDirection] ThreadSelectFilters sortDirection\n     * @property {number|null} [limit] ThreadSelectFilters limit\n     * @property {string|null} [query] ThreadSelectFilters query\n     * @property {number|null} [page] ThreadSelectFilters page\n     * @property {boolean|null} [useBoolean] ThreadSelectFilters useBoolean\n     * @property {number|null} [createdStart] ThreadSelectFilters createdStart\n     * @property {number|null} [createdEnd] ThreadSelectFilters createdEnd\n     */\n\n    /**\n     * Constructs a new ThreadSelectFilters.\n     * @exports ThreadSelectFilters\n     * @classdesc Represents a ThreadSelectFilters.\n     * @implements IThreadSelectFilters\n     * @constructor\n     * @param {IThreadSelectFilters=} [properties] Properties to set\n     */\n    function ThreadSelectFilters(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadSelectFilters rankMethod.\n     * @member {ThreadSelectFilters.Method} rankMethod\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.rankMethod = 0;\n\n    /**\n     * ThreadSelectFilters sortDirection.\n     * @member {ThreadSelectFilters.SortDirection} sortDirection\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.sortDirection = 0;\n\n    /**\n     * ThreadSelectFilters limit.\n     * @member {number} limit\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.limit = 0;\n\n    /**\n     * ThreadSelectFilters query.\n     * @member {string} query\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.query = \"\";\n\n    /**\n     * ThreadSelectFilters page.\n     * @member {number} page\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.page = 0;\n\n    /**\n     * ThreadSelectFilters useBoolean.\n     * @member {boolean} useBoolean\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.useBoolean = false;\n\n    /**\n     * ThreadSelectFilters createdStart.\n     * @member {number} createdStart\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.createdStart = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * ThreadSelectFilters createdEnd.\n     * @member {number} createdEnd\n     * @memberof ThreadSelectFilters\n     * @instance\n     */\n    ThreadSelectFilters.prototype.createdEnd = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ThreadSelectFilters instance using the specified properties.\n     * @function create\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {IThreadSelectFilters=} [properties] Properties to set\n     * @returns {ThreadSelectFilters} ThreadSelectFilters instance\n     */\n    ThreadSelectFilters.create = function create(properties) {\n        return new ThreadSelectFilters(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadSelectFilters message. Does not implicitly {@link ThreadSelectFilters.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {IThreadSelectFilters} message ThreadSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectFilters.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rankMethod != null && Object.hasOwnProperty.call(message, \"rankMethod\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rankMethod);\n        if (message.sortDirection != null && Object.hasOwnProperty.call(message, \"sortDirection\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sortDirection);\n        if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.limit);\n        if (message.query != null && Object.hasOwnProperty.call(message, \"query\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.query);\n        if (message.createdStart != null && Object.hasOwnProperty.call(message, \"createdStart\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createdStart);\n        if (message.createdEnd != null && Object.hasOwnProperty.call(message, \"createdEnd\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createdEnd);\n        if (message.page != null && Object.hasOwnProperty.call(message, \"page\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.page);\n        if (message.useBoolean != null && Object.hasOwnProperty.call(message, \"useBoolean\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.useBoolean);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadSelectFilters message, length delimited. Does not implicitly {@link ThreadSelectFilters.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {IThreadSelectFilters} message ThreadSelectFilters message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectFilters.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadSelectFilters message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadSelectFilters} ThreadSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectFilters.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadSelectFilters();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.rankMethod = reader.int32();\n                break;\n            case 2:\n                message.sortDirection = reader.int32();\n                break;\n            case 3:\n                message.limit = reader.uint32();\n                break;\n            case 4:\n                message.query = reader.string();\n                break;\n            case 7:\n                message.page = reader.uint32();\n                break;\n            case 8:\n                message.useBoolean = reader.bool();\n                break;\n            case 5:\n                message.createdStart = reader.int64();\n                break;\n            case 6:\n                message.createdEnd = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadSelectFilters message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadSelectFilters} ThreadSelectFilters\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectFilters.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadSelectFilters message.\n     * @function verify\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadSelectFilters.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            switch (message.rankMethod) {\n            default:\n                return \"rankMethod: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n                break;\n            }\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            switch (message.sortDirection) {\n            default:\n                return \"sortDirection: enum value expected\";\n            case 0:\n            case 1:\n                break;\n            }\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            if (!$util.isInteger(message.limit))\n                return \"limit: integer expected\";\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            if (!$util.isString(message.query))\n                return \"query: string expected\";\n        if (message.page != null && message.hasOwnProperty(\"page\"))\n            if (!$util.isInteger(message.page))\n                return \"page: integer expected\";\n        if (message.useBoolean != null && message.hasOwnProperty(\"useBoolean\"))\n            if (typeof message.useBoolean !== \"boolean\")\n                return \"useBoolean: boolean expected\";\n        if (message.createdStart != null && message.hasOwnProperty(\"createdStart\"))\n            if (!$util.isInteger(message.createdStart) && !(message.createdStart && $util.isInteger(message.createdStart.low) && $util.isInteger(message.createdStart.high)))\n                return \"createdStart: integer|Long expected\";\n        if (message.createdEnd != null && message.hasOwnProperty(\"createdEnd\"))\n            if (!$util.isInteger(message.createdEnd) && !(message.createdEnd && $util.isInteger(message.createdEnd.low) && $util.isInteger(message.createdEnd.high)))\n                return \"createdEnd: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadSelectFilters message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadSelectFilters} ThreadSelectFilters\n     */\n    ThreadSelectFilters.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadSelectFilters)\n            return object;\n        var message = new $root.ThreadSelectFilters();\n        switch (object.rankMethod) {\n        case \"HOT\":\n        case 0:\n            message.rankMethod = 0;\n            break;\n        case \"TOP\":\n        case 1:\n            message.rankMethod = 1;\n            break;\n        case \"CONTROVERSIAL\":\n        case 2:\n            message.rankMethod = 2;\n            break;\n        }\n        switch (object.sortDirection) {\n        case \"DESC\":\n        case 0:\n            message.sortDirection = 0;\n            break;\n        case \"ASC\":\n        case 1:\n            message.sortDirection = 1;\n            break;\n        }\n        if (object.limit != null)\n            message.limit = object.limit >>> 0;\n        if (object.query != null)\n            message.query = String(object.query);\n        if (object.page != null)\n            message.page = object.page >>> 0;\n        if (object.useBoolean != null)\n            message.useBoolean = Boolean(object.useBoolean);\n        if (object.createdStart != null)\n            if ($util.Long)\n                (message.createdStart = $util.Long.fromValue(object.createdStart)).unsigned = false;\n            else if (typeof object.createdStart === \"string\")\n                message.createdStart = parseInt(object.createdStart, 10);\n            else if (typeof object.createdStart === \"number\")\n                message.createdStart = object.createdStart;\n            else if (typeof object.createdStart === \"object\")\n                message.createdStart = new $util.LongBits(object.createdStart.low >>> 0, object.createdStart.high >>> 0).toNumber();\n        if (object.createdEnd != null)\n            if ($util.Long)\n                (message.createdEnd = $util.Long.fromValue(object.createdEnd)).unsigned = false;\n            else if (typeof object.createdEnd === \"string\")\n                message.createdEnd = parseInt(object.createdEnd, 10);\n            else if (typeof object.createdEnd === \"number\")\n                message.createdEnd = object.createdEnd;\n            else if (typeof object.createdEnd === \"object\")\n                message.createdEnd = new $util.LongBits(object.createdEnd.low >>> 0, object.createdEnd.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadSelectFilters message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadSelectFilters\n     * @static\n     * @param {ThreadSelectFilters} message ThreadSelectFilters\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadSelectFilters.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.rankMethod = options.enums === String ? \"HOT\" : 0;\n            object.sortDirection = options.enums === String ? \"DESC\" : 0;\n            object.limit = 0;\n            object.query = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdStart = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdEnd = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdEnd = options.longs === String ? \"0\" : 0;\n            object.page = 0;\n            object.useBoolean = false;\n        }\n        if (message.rankMethod != null && message.hasOwnProperty(\"rankMethod\"))\n            object.rankMethod = options.enums === String ? $root.ThreadSelectFilters.Method[message.rankMethod] : message.rankMethod;\n        if (message.sortDirection != null && message.hasOwnProperty(\"sortDirection\"))\n            object.sortDirection = options.enums === String ? $root.ThreadSelectFilters.SortDirection[message.sortDirection] : message.sortDirection;\n        if (message.limit != null && message.hasOwnProperty(\"limit\"))\n            object.limit = message.limit;\n        if (message.query != null && message.hasOwnProperty(\"query\"))\n            object.query = message.query;\n        if (message.createdStart != null && message.hasOwnProperty(\"createdStart\"))\n            if (typeof message.createdStart === \"number\")\n                object.createdStart = options.longs === String ? String(message.createdStart) : message.createdStart;\n            else\n                object.createdStart = options.longs === String ? $util.Long.prototype.toString.call(message.createdStart) : options.longs === Number ? new $util.LongBits(message.createdStart.low >>> 0, message.createdStart.high >>> 0).toNumber() : message.createdStart;\n        if (message.createdEnd != null && message.hasOwnProperty(\"createdEnd\"))\n            if (typeof message.createdEnd === \"number\")\n                object.createdEnd = options.longs === String ? String(message.createdEnd) : message.createdEnd;\n            else\n                object.createdEnd = options.longs === String ? $util.Long.prototype.toString.call(message.createdEnd) : options.longs === Number ? new $util.LongBits(message.createdEnd.low >>> 0, message.createdEnd.high >>> 0).toNumber() : message.createdEnd;\n        if (message.page != null && message.hasOwnProperty(\"page\"))\n            object.page = message.page;\n        if (message.useBoolean != null && message.hasOwnProperty(\"useBoolean\"))\n            object.useBoolean = message.useBoolean;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadSelectFilters to JSON.\n     * @function toJSON\n     * @memberof ThreadSelectFilters\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadSelectFilters.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * ThreadContentFilter enum.\n     * @name ThreadSelectFilters.ThreadContentFilter\n     * @enum {number}\n     * @property {number} TITLE=0 TITLE value\n     * @property {number} CONTENT=1 CONTENT value\n     * @property {number} FLAIR=2 FLAIR value\n     */\n    ThreadSelectFilters.ThreadContentFilter = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"TITLE\"] = 0;\n        values[valuesById[1] = \"CONTENT\"] = 1;\n        values[valuesById[2] = \"FLAIR\"] = 2;\n        return values;\n    })();\n\n    /**\n     * SortDirection enum.\n     * @name ThreadSelectFilters.SortDirection\n     * @enum {number}\n     * @property {number} DESC=0 DESC value\n     * @property {number} ASC=1 ASC value\n     */\n    ThreadSelectFilters.SortDirection = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"DESC\"] = 0;\n        values[valuesById[1] = \"ASC\"] = 1;\n        return values;\n    })();\n\n    /**\n     * ContentWarning enum.\n     * @name ThreadSelectFilters.ContentWarning\n     * @enum {number}\n     * @property {number} NORMAL=0 NORMAL value\n     * @property {number} NSFW=1 NSFW value\n     * @property {number} NSFL=2 NSFL value\n     */\n    ThreadSelectFilters.ContentWarning = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NORMAL\"] = 0;\n        values[valuesById[1] = \"NSFW\"] = 1;\n        values[valuesById[2] = \"NSFL\"] = 2;\n        return values;\n    })();\n\n    /**\n     * Method enum.\n     * @name ThreadSelectFilters.Method\n     * @enum {number}\n     * @property {number} HOT=0 HOT value\n     * @property {number} TOP=1 TOP value\n     * @property {number} CONTROVERSIAL=2 CONTROVERSIAL value\n     */\n    ThreadSelectFilters.Method = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"HOT\"] = 0;\n        values[valuesById[1] = \"TOP\"] = 1;\n        values[valuesById[2] = \"CONTROVERSIAL\"] = 2;\n        return values;\n    })();\n\n    return ThreadSelectFilters;\n})();\n\n$root.ThreadSelectRequest = (function() {\n\n    /**\n     * Properties of a ThreadSelectRequest.\n     * @exports IThreadSelectRequest\n     * @interface IThreadSelectRequest\n     * @property {IThreadSelectFilters|null} [filters] ThreadSelectRequest filters\n     * @property {string|null} [boardId] ThreadSelectRequest boardId\n     * @property {string|null} [token] ThreadSelectRequest token\n     * @property {boolean|null} [withContext] ThreadSelectRequest withContext\n     */\n\n    /**\n     * Constructs a new ThreadSelectRequest.\n     * @exports ThreadSelectRequest\n     * @classdesc Represents a ThreadSelectRequest.\n     * @implements IThreadSelectRequest\n     * @constructor\n     * @param {IThreadSelectRequest=} [properties] Properties to set\n     */\n    function ThreadSelectRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadSelectRequest filters.\n     * @member {IThreadSelectFilters|null|undefined} filters\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.filters = null;\n\n    /**\n     * ThreadSelectRequest boardId.\n     * @member {string} boardId\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.boardId = \"\";\n\n    /**\n     * ThreadSelectRequest token.\n     * @member {string} token\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.token = \"\";\n\n    /**\n     * ThreadSelectRequest withContext.\n     * @member {boolean} withContext\n     * @memberof ThreadSelectRequest\n     * @instance\n     */\n    ThreadSelectRequest.prototype.withContext = false;\n\n    /**\n     * Creates a new ThreadSelectRequest instance using the specified properties.\n     * @function create\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {IThreadSelectRequest=} [properties] Properties to set\n     * @returns {ThreadSelectRequest} ThreadSelectRequest instance\n     */\n    ThreadSelectRequest.create = function create(properties) {\n        return new ThreadSelectRequest(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadSelectRequest message. Does not implicitly {@link ThreadSelectRequest.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {IThreadSelectRequest} message ThreadSelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.filters != null && Object.hasOwnProperty.call(message, \"filters\"))\n            $root.ThreadSelectFilters.encode(message.filters, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.boardId);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);\n        if (message.withContext != null && Object.hasOwnProperty.call(message, \"withContext\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.withContext);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadSelectRequest message, length delimited. Does not implicitly {@link ThreadSelectRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {IThreadSelectRequest} message ThreadSelectRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadSelectRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadSelectRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadSelectRequest} ThreadSelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadSelectRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.filters = $root.ThreadSelectFilters.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.boardId = reader.string();\n                break;\n            case 3:\n                message.token = reader.string();\n                break;\n            case 4:\n                message.withContext = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadSelectRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadSelectRequest} ThreadSelectRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadSelectRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadSelectRequest message.\n     * @function verify\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadSelectRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.filters != null && message.hasOwnProperty(\"filters\")) {\n            var error = $root.ThreadSelectFilters.verify(message.filters);\n            if (error)\n                return \"filters.\" + error;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        if (message.withContext != null && message.hasOwnProperty(\"withContext\"))\n            if (typeof message.withContext !== \"boolean\")\n                return \"withContext: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadSelectRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadSelectRequest} ThreadSelectRequest\n     */\n    ThreadSelectRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadSelectRequest)\n            return object;\n        var message = new $root.ThreadSelectRequest();\n        if (object.filters != null) {\n            if (typeof object.filters !== \"object\")\n                throw TypeError(\".ThreadSelectRequest.filters: object expected\");\n            message.filters = $root.ThreadSelectFilters.fromObject(object.filters);\n        }\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.token != null)\n            message.token = String(object.token);\n        if (object.withContext != null)\n            message.withContext = Boolean(object.withContext);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadSelectRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadSelectRequest\n     * @static\n     * @param {ThreadSelectRequest} message ThreadSelectRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadSelectRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.filters = null;\n            object.boardId = \"\";\n            object.token = \"\";\n            object.withContext = false;\n        }\n        if (message.filters != null && message.hasOwnProperty(\"filters\"))\n            object.filters = $root.ThreadSelectFilters.toObject(message.filters, options);\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        if (message.withContext != null && message.hasOwnProperty(\"withContext\"))\n            object.withContext = message.withContext;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadSelectRequest to JSON.\n     * @function toJSON\n     * @memberof ThreadSelectRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadSelectRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadSelectRequest;\n})();\n\n$root.ThreadsSelectResponse = (function() {\n\n    /**\n     * Properties of a ThreadsSelectResponse.\n     * @exports IThreadsSelectResponse\n     * @interface IThreadsSelectResponse\n     * @property {Array.<IThread>|null} [data] ThreadsSelectResponse data\n     * @property {string|null} [token] ThreadsSelectResponse token\n     * @property {Object.<string,ICommunityUserRef>|null} [users] ThreadsSelectResponse users\n     */\n\n    /**\n     * Constructs a new ThreadsSelectResponse.\n     * @exports ThreadsSelectResponse\n     * @classdesc Represents a ThreadsSelectResponse.\n     * @implements IThreadsSelectResponse\n     * @constructor\n     * @param {IThreadsSelectResponse=} [properties] Properties to set\n     */\n    function ThreadsSelectResponse(properties) {\n        this.data = [];\n        this.users = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadsSelectResponse data.\n     * @member {Array.<IThread>} data\n     * @memberof ThreadsSelectResponse\n     * @instance\n     */\n    ThreadsSelectResponse.prototype.data = $util.emptyArray;\n\n    /**\n     * ThreadsSelectResponse token.\n     * @member {string} token\n     * @memberof ThreadsSelectResponse\n     * @instance\n     */\n    ThreadsSelectResponse.prototype.token = \"\";\n\n    /**\n     * ThreadsSelectResponse users.\n     * @member {Object.<string,ICommunityUserRef>} users\n     * @memberof ThreadsSelectResponse\n     * @instance\n     */\n    ThreadsSelectResponse.prototype.users = $util.emptyObject;\n\n    /**\n     * Creates a new ThreadsSelectResponse instance using the specified properties.\n     * @function create\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {IThreadsSelectResponse=} [properties] Properties to set\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse instance\n     */\n    ThreadsSelectResponse.create = function create(properties) {\n        return new ThreadsSelectResponse(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponse message. Does not implicitly {@link ThreadsSelectResponse.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {IThreadsSelectResponse} message ThreadsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Thread.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);\n        if (message.users != null && Object.hasOwnProperty.call(message, \"users\"))\n            for (var keys = Object.keys(message.users), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.CommunityUserRef.encode(message.users[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponse message, length delimited. Does not implicitly {@link ThreadsSelectResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {IThreadsSelectResponse} message ThreadsSelectResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadsSelectResponse(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Thread.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.token = reader.string();\n                break;\n            case 3:\n                if (message.users === $util.emptyObject)\n                    message.users = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = null;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = $root.CommunityUserRef.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.users[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadsSelectResponse message.\n     * @function verify\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadsSelectResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Thread.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            if (!$util.isString(message.token))\n                return \"token: string expected\";\n        if (message.users != null && message.hasOwnProperty(\"users\")) {\n            if (!$util.isObject(message.users))\n                return \"users: object expected\";\n            var key = Object.keys(message.users);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.CommunityUserRef.verify(message.users[key[i]]);\n                if (error)\n                    return \"users.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadsSelectResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadsSelectResponse} ThreadsSelectResponse\n     */\n    ThreadsSelectResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadsSelectResponse)\n            return object;\n        var message = new $root.ThreadsSelectResponse();\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".ThreadsSelectResponse.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".ThreadsSelectResponse.data: object expected\");\n                message.data[i] = $root.Thread.fromObject(object.data[i]);\n            }\n        }\n        if (object.token != null)\n            message.token = String(object.token);\n        if (object.users) {\n            if (typeof object.users !== \"object\")\n                throw TypeError(\".ThreadsSelectResponse.users: object expected\");\n            message.users = {};\n            for (var keys = Object.keys(object.users), i = 0; i < keys.length; ++i) {\n                if (typeof object.users[keys[i]] !== \"object\")\n                    throw TypeError(\".ThreadsSelectResponse.users: object expected\");\n                message.users[keys[i]] = $root.CommunityUserRef.fromObject(object.users[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadsSelectResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadsSelectResponse\n     * @static\n     * @param {ThreadsSelectResponse} message ThreadsSelectResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadsSelectResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.objects || options.defaults)\n            object.users = {};\n        if (options.defaults)\n            object.token = \"\";\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Thread.toObject(message.data[j], options);\n        }\n        if (message.token != null && message.hasOwnProperty(\"token\"))\n            object.token = message.token;\n        var keys2;\n        if (message.users && (keys2 = Object.keys(message.users)).length) {\n            object.users = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.users[keys2[j]] = $root.CommunityUserRef.toObject(message.users[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ThreadsSelectResponse to JSON.\n     * @function toJSON\n     * @memberof ThreadsSelectResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadsSelectResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadsSelectResponse;\n})();\n\n$root.ThreadsSelectResponseWithBoardContext = (function() {\n\n    /**\n     * Properties of a ThreadsSelectResponseWithBoardContext.\n     * @exports IThreadsSelectResponseWithBoardContext\n     * @interface IThreadsSelectResponseWithBoardContext\n     * @property {IThreadsSelectResponse|null} [threads] ThreadsSelectResponseWithBoardContext threads\n     * @property {IBoard|null} [board] ThreadsSelectResponseWithBoardContext board\n     */\n\n    /**\n     * Constructs a new ThreadsSelectResponseWithBoardContext.\n     * @exports ThreadsSelectResponseWithBoardContext\n     * @classdesc Represents a ThreadsSelectResponseWithBoardContext.\n     * @implements IThreadsSelectResponseWithBoardContext\n     * @constructor\n     * @param {IThreadsSelectResponseWithBoardContext=} [properties] Properties to set\n     */\n    function ThreadsSelectResponseWithBoardContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadsSelectResponseWithBoardContext threads.\n     * @member {IThreadsSelectResponse|null|undefined} threads\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @instance\n     */\n    ThreadsSelectResponseWithBoardContext.prototype.threads = null;\n\n    /**\n     * ThreadsSelectResponseWithBoardContext board.\n     * @member {IBoard|null|undefined} board\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @instance\n     */\n    ThreadsSelectResponseWithBoardContext.prototype.board = null;\n\n    /**\n     * Creates a new ThreadsSelectResponseWithBoardContext instance using the specified properties.\n     * @function create\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {IThreadsSelectResponseWithBoardContext=} [properties] Properties to set\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext instance\n     */\n    ThreadsSelectResponseWithBoardContext.create = function create(properties) {\n        return new ThreadsSelectResponseWithBoardContext(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponseWithBoardContext message. Does not implicitly {@link ThreadsSelectResponseWithBoardContext.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {IThreadsSelectResponseWithBoardContext} message ThreadsSelectResponseWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponseWithBoardContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threads != null && Object.hasOwnProperty.call(message, \"threads\"))\n            $root.ThreadsSelectResponse.encode(message.threads, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n            $root.Board.encode(message.board, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadsSelectResponseWithBoardContext message, length delimited. Does not implicitly {@link ThreadsSelectResponseWithBoardContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {IThreadsSelectResponseWithBoardContext} message ThreadsSelectResponseWithBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadsSelectResponseWithBoardContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponseWithBoardContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponseWithBoardContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadsSelectResponseWithBoardContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threads = $root.ThreadsSelectResponse.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.board = $root.Board.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadsSelectResponseWithBoardContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadsSelectResponseWithBoardContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadsSelectResponseWithBoardContext message.\n     * @function verify\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadsSelectResponseWithBoardContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threads != null && message.hasOwnProperty(\"threads\")) {\n            var error = $root.ThreadsSelectResponse.verify(message.threads);\n            if (error)\n                return \"threads.\" + error;\n        }\n        if (message.board != null && message.hasOwnProperty(\"board\")) {\n            var error = $root.Board.verify(message.board);\n            if (error)\n                return \"board.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadsSelectResponseWithBoardContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadsSelectResponseWithBoardContext} ThreadsSelectResponseWithBoardContext\n     */\n    ThreadsSelectResponseWithBoardContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadsSelectResponseWithBoardContext)\n            return object;\n        var message = new $root.ThreadsSelectResponseWithBoardContext();\n        if (object.threads != null) {\n            if (typeof object.threads !== \"object\")\n                throw TypeError(\".ThreadsSelectResponseWithBoardContext.threads: object expected\");\n            message.threads = $root.ThreadsSelectResponse.fromObject(object.threads);\n        }\n        if (object.board != null) {\n            if (typeof object.board !== \"object\")\n                throw TypeError(\".ThreadsSelectResponseWithBoardContext.board: object expected\");\n            message.board = $root.Board.fromObject(object.board);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadsSelectResponseWithBoardContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @static\n     * @param {ThreadsSelectResponseWithBoardContext} message ThreadsSelectResponseWithBoardContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadsSelectResponseWithBoardContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.threads = null;\n            object.board = null;\n        }\n        if (message.threads != null && message.hasOwnProperty(\"threads\"))\n            object.threads = $root.ThreadsSelectResponse.toObject(message.threads, options);\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            object.board = $root.Board.toObject(message.board, options);\n        return object;\n    };\n\n    /**\n     * Converts this ThreadsSelectResponseWithBoardContext to JSON.\n     * @function toJSON\n     * @memberof ThreadsSelectResponseWithBoardContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadsSelectResponseWithBoardContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadsSelectResponseWithBoardContext;\n})();\n\n$root.UserCreate = (function() {\n\n    /**\n     * Properties of a UserCreate.\n     * @exports IUserCreate\n     * @interface IUserCreate\n     * @property {string|null} [username] UserCreate username\n     * @property {string|null} [email] UserCreate email\n     * @property {string|null} [key] UserCreate key\n     * @property {boolean|null} [acceptEmail] UserCreate acceptEmail\n     * @property {boolean|null} [subscribeNewsletter] UserCreate subscribeNewsletter\n     */\n\n    /**\n     * Constructs a new UserCreate.\n     * @exports UserCreate\n     * @classdesc Represents a UserCreate.\n     * @implements IUserCreate\n     * @constructor\n     * @param {IUserCreate=} [properties] Properties to set\n     */\n    function UserCreate(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserCreate username.\n     * @member {string} username\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.username = \"\";\n\n    /**\n     * UserCreate email.\n     * @member {string} email\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.email = \"\";\n\n    /**\n     * UserCreate key.\n     * @member {string} key\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.key = \"\";\n\n    /**\n     * UserCreate acceptEmail.\n     * @member {boolean} acceptEmail\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.acceptEmail = false;\n\n    /**\n     * UserCreate subscribeNewsletter.\n     * @member {boolean} subscribeNewsletter\n     * @memberof UserCreate\n     * @instance\n     */\n    UserCreate.prototype.subscribeNewsletter = false;\n\n    /**\n     * Creates a new UserCreate instance using the specified properties.\n     * @function create\n     * @memberof UserCreate\n     * @static\n     * @param {IUserCreate=} [properties] Properties to set\n     * @returns {UserCreate} UserCreate instance\n     */\n    UserCreate.create = function create(properties) {\n        return new UserCreate(properties);\n    };\n\n    /**\n     * Encodes the specified UserCreate message. Does not implicitly {@link UserCreate.verify|verify} messages.\n     * @function encode\n     * @memberof UserCreate\n     * @static\n     * @param {IUserCreate} message UserCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserCreate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.username != null && Object.hasOwnProperty.call(message, \"username\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);\n        if (message.email != null && Object.hasOwnProperty.call(message, \"email\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);\n        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.key);\n        if (message.acceptEmail != null && Object.hasOwnProperty.call(message, \"acceptEmail\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.acceptEmail);\n        if (message.subscribeNewsletter != null && Object.hasOwnProperty.call(message, \"subscribeNewsletter\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.subscribeNewsletter);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserCreate message, length delimited. Does not implicitly {@link UserCreate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserCreate\n     * @static\n     * @param {IUserCreate} message UserCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserCreate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserCreate message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserCreate} UserCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserCreate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserCreate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.username = reader.string();\n                break;\n            case 2:\n                message.email = reader.string();\n                break;\n            case 3:\n                message.key = reader.string();\n                break;\n            case 4:\n                message.acceptEmail = reader.bool();\n                break;\n            case 5:\n                message.subscribeNewsletter = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserCreate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserCreate} UserCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserCreate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserCreate message.\n     * @function verify\n     * @memberof UserCreate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserCreate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            if (!$util.isString(message.username))\n                return \"username: string expected\";\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            if (!$util.isString(message.email))\n                return \"email: string expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            if (!$util.isString(message.key))\n                return \"key: string expected\";\n        if (message.acceptEmail != null && message.hasOwnProperty(\"acceptEmail\"))\n            if (typeof message.acceptEmail !== \"boolean\")\n                return \"acceptEmail: boolean expected\";\n        if (message.subscribeNewsletter != null && message.hasOwnProperty(\"subscribeNewsletter\"))\n            if (typeof message.subscribeNewsletter !== \"boolean\")\n                return \"subscribeNewsletter: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserCreate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserCreate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserCreate} UserCreate\n     */\n    UserCreate.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserCreate)\n            return object;\n        var message = new $root.UserCreate();\n        if (object.username != null)\n            message.username = String(object.username);\n        if (object.email != null)\n            message.email = String(object.email);\n        if (object.key != null)\n            message.key = String(object.key);\n        if (object.acceptEmail != null)\n            message.acceptEmail = Boolean(object.acceptEmail);\n        if (object.subscribeNewsletter != null)\n            message.subscribeNewsletter = Boolean(object.subscribeNewsletter);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserCreate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserCreate\n     * @static\n     * @param {UserCreate} message UserCreate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserCreate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.username = \"\";\n            object.email = \"\";\n            object.key = \"\";\n            object.acceptEmail = false;\n            object.subscribeNewsletter = false;\n        }\n        if (message.username != null && message.hasOwnProperty(\"username\"))\n            object.username = message.username;\n        if (message.email != null && message.hasOwnProperty(\"email\"))\n            object.email = message.email;\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = message.key;\n        if (message.acceptEmail != null && message.hasOwnProperty(\"acceptEmail\"))\n            object.acceptEmail = message.acceptEmail;\n        if (message.subscribeNewsletter != null && message.hasOwnProperty(\"subscribeNewsletter\"))\n            object.subscribeNewsletter = message.subscribeNewsletter;\n        return object;\n    };\n\n    /**\n     * Converts this UserCreate to JSON.\n     * @function toJSON\n     * @memberof UserCreate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserCreate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserCreate;\n})();\n\n$root.UserSubscribedRequest = (function() {\n\n    /**\n     * Properties of a UserSubscribedRequest.\n     * @exports IUserSubscribedRequest\n     * @interface IUserSubscribedRequest\n     */\n\n    /**\n     * Constructs a new UserSubscribedRequest.\n     * @exports UserSubscribedRequest\n     * @classdesc Represents a UserSubscribedRequest.\n     * @implements IUserSubscribedRequest\n     * @constructor\n     * @param {IUserSubscribedRequest=} [properties] Properties to set\n     */\n    function UserSubscribedRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new UserSubscribedRequest instance using the specified properties.\n     * @function create\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {IUserSubscribedRequest=} [properties] Properties to set\n     * @returns {UserSubscribedRequest} UserSubscribedRequest instance\n     */\n    UserSubscribedRequest.create = function create(properties) {\n        return new UserSubscribedRequest(properties);\n    };\n\n    /**\n     * Encodes the specified UserSubscribedRequest message. Does not implicitly {@link UserSubscribedRequest.verify|verify} messages.\n     * @function encode\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {IUserSubscribedRequest} message UserSubscribedRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserSubscribedRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserSubscribedRequest message, length delimited. Does not implicitly {@link UserSubscribedRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {IUserSubscribedRequest} message UserSubscribedRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserSubscribedRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserSubscribedRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserSubscribedRequest} UserSubscribedRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserSubscribedRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserSubscribedRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserSubscribedRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserSubscribedRequest} UserSubscribedRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserSubscribedRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserSubscribedRequest message.\n     * @function verify\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserSubscribedRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserSubscribedRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserSubscribedRequest} UserSubscribedRequest\n     */\n    UserSubscribedRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserSubscribedRequest)\n            return object;\n        return new $root.UserSubscribedRequest();\n    };\n\n    /**\n     * Creates a plain object from a UserSubscribedRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserSubscribedRequest\n     * @static\n     * @param {UserSubscribedRequest} message UserSubscribedRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserSubscribedRequest.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this UserSubscribedRequest to JSON.\n     * @function toJSON\n     * @memberof UserSubscribedRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserSubscribedRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserSubscribedRequest;\n})();\n\n$root.BlogSubscription = (function() {\n\n    /**\n     * Properties of a BlogSubscription.\n     * @exports IBlogSubscription\n     * @interface IBlogSubscription\n     */\n\n    /**\n     * Constructs a new BlogSubscription.\n     * @exports BlogSubscription\n     * @classdesc Represents a BlogSubscription.\n     * @implements IBlogSubscription\n     * @constructor\n     * @param {IBlogSubscription=} [properties] Properties to set\n     */\n    function BlogSubscription(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new BlogSubscription instance using the specified properties.\n     * @function create\n     * @memberof BlogSubscription\n     * @static\n     * @param {IBlogSubscription=} [properties] Properties to set\n     * @returns {BlogSubscription} BlogSubscription instance\n     */\n    BlogSubscription.create = function create(properties) {\n        return new BlogSubscription(properties);\n    };\n\n    /**\n     * Encodes the specified BlogSubscription message. Does not implicitly {@link BlogSubscription.verify|verify} messages.\n     * @function encode\n     * @memberof BlogSubscription\n     * @static\n     * @param {IBlogSubscription} message BlogSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BlogSubscription.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BlogSubscription message, length delimited. Does not implicitly {@link BlogSubscription.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BlogSubscription\n     * @static\n     * @param {IBlogSubscription} message BlogSubscription message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BlogSubscription.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BlogSubscription message from the specified reader or buffer.\n     * @function decode\n     * @memberof BlogSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BlogSubscription} BlogSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BlogSubscription.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BlogSubscription();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BlogSubscription message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BlogSubscription\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BlogSubscription} BlogSubscription\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BlogSubscription.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BlogSubscription message.\n     * @function verify\n     * @memberof BlogSubscription\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BlogSubscription.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BlogSubscription message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BlogSubscription\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BlogSubscription} BlogSubscription\n     */\n    BlogSubscription.fromObject = function fromObject(object) {\n        if (object instanceof $root.BlogSubscription)\n            return object;\n        return new $root.BlogSubscription();\n    };\n\n    /**\n     * Creates a plain object from a BlogSubscription message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BlogSubscription\n     * @static\n     * @param {BlogSubscription} message BlogSubscription\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BlogSubscription.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this BlogSubscription to JSON.\n     * @function toJSON\n     * @memberof BlogSubscription\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BlogSubscription.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BlogSubscription;\n})();\n\n$root.UserMod = (function() {\n\n    /**\n     * Properties of a UserMod.\n     * @exports IUserMod\n     * @interface IUserMod\n     * @property {string|null} [boardId] UserMod boardId\n     * @property {number|null} [createdAt] UserMod createdAt\n     */\n\n    /**\n     * Constructs a new UserMod.\n     * @exports UserMod\n     * @classdesc Represents a UserMod.\n     * @implements IUserMod\n     * @constructor\n     * @param {IUserMod=} [properties] Properties to set\n     */\n    function UserMod(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserMod boardId.\n     * @member {string} boardId\n     * @memberof UserMod\n     * @instance\n     */\n    UserMod.prototype.boardId = \"\";\n\n    /**\n     * UserMod createdAt.\n     * @member {number} createdAt\n     * @memberof UserMod\n     * @instance\n     */\n    UserMod.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new UserMod instance using the specified properties.\n     * @function create\n     * @memberof UserMod\n     * @static\n     * @param {IUserMod=} [properties] Properties to set\n     * @returns {UserMod} UserMod instance\n     */\n    UserMod.create = function create(properties) {\n        return new UserMod(properties);\n    };\n\n    /**\n     * Encodes the specified UserMod message. Does not implicitly {@link UserMod.verify|verify} messages.\n     * @function encode\n     * @memberof UserMod\n     * @static\n     * @param {IUserMod} message UserMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMod.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.boardId);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserMod message, length delimited. Does not implicitly {@link UserMod.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserMod\n     * @static\n     * @param {IUserMod} message UserMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMod.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserMod message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserMod} UserMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMod.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserMod();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.boardId = reader.string();\n                break;\n            case 2:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserMod message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserMod} UserMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMod.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserMod message.\n     * @function verify\n     * @memberof UserMod\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserMod.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserMod message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserMod\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserMod} UserMod\n     */\n    UserMod.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserMod)\n            return object;\n        var message = new $root.UserMod();\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserMod message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserMod\n     * @static\n     * @param {UserMod} message UserMod\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserMod.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.boardId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this UserMod to JSON.\n     * @function toJSON\n     * @memberof UserMod\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserMod.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserMod;\n})();\n\n$root.BoardMod = (function() {\n\n    /**\n     * Properties of a BoardMod.\n     * @exports IBoardMod\n     * @interface IBoardMod\n     * @property {string|null} [userId] BoardMod userId\n     * @property {number|null} [createdAt] BoardMod createdAt\n     */\n\n    /**\n     * Constructs a new BoardMod.\n     * @exports BoardMod\n     * @classdesc Represents a BoardMod.\n     * @implements IBoardMod\n     * @constructor\n     * @param {IBoardMod=} [properties] Properties to set\n     */\n    function BoardMod(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardMod userId.\n     * @member {string} userId\n     * @memberof BoardMod\n     * @instance\n     */\n    BoardMod.prototype.userId = \"\";\n\n    /**\n     * BoardMod createdAt.\n     * @member {number} createdAt\n     * @memberof BoardMod\n     * @instance\n     */\n    BoardMod.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new BoardMod instance using the specified properties.\n     * @function create\n     * @memberof BoardMod\n     * @static\n     * @param {IBoardMod=} [properties] Properties to set\n     * @returns {BoardMod} BoardMod instance\n     */\n    BoardMod.create = function create(properties) {\n        return new BoardMod(properties);\n    };\n\n    /**\n     * Encodes the specified BoardMod message. Does not implicitly {@link BoardMod.verify|verify} messages.\n     * @function encode\n     * @memberof BoardMod\n     * @static\n     * @param {IBoardMod} message BoardMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardMod.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardMod message, length delimited. Does not implicitly {@link BoardMod.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardMod\n     * @static\n     * @param {IBoardMod} message BoardMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardMod.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardMod message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardMod} BoardMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardMod.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardMod();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardMod message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardMod} BoardMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardMod.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardMod message.\n     * @function verify\n     * @memberof BoardMod\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardMod.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardMod message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardMod\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardMod} BoardMod\n     */\n    BoardMod.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardMod)\n            return object;\n        var message = new $root.BoardMod();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardMod message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardMod\n     * @static\n     * @param {BoardMod} message BoardMod\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardMod.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this BoardMod to JSON.\n     * @function toJSON\n     * @memberof BoardMod\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardMod.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardMod;\n})();\n\n$root.BoardCreate = (function() {\n\n    /**\n     * Properties of a BoardCreate.\n     * @exports IBoardCreate\n     * @interface IBoardCreate\n     * @property {string|null} [name] BoardCreate name\n     */\n\n    /**\n     * Constructs a new BoardCreate.\n     * @exports BoardCreate\n     * @classdesc Represents a BoardCreate.\n     * @implements IBoardCreate\n     * @constructor\n     * @param {IBoardCreate=} [properties] Properties to set\n     */\n    function BoardCreate(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardCreate name.\n     * @member {string} name\n     * @memberof BoardCreate\n     * @instance\n     */\n    BoardCreate.prototype.name = \"\";\n\n    /**\n     * Creates a new BoardCreate instance using the specified properties.\n     * @function create\n     * @memberof BoardCreate\n     * @static\n     * @param {IBoardCreate=} [properties] Properties to set\n     * @returns {BoardCreate} BoardCreate instance\n     */\n    BoardCreate.create = function create(properties) {\n        return new BoardCreate(properties);\n    };\n\n    /**\n     * Encodes the specified BoardCreate message. Does not implicitly {@link BoardCreate.verify|verify} messages.\n     * @function encode\n     * @memberof BoardCreate\n     * @static\n     * @param {IBoardCreate} message BoardCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardCreate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardCreate message, length delimited. Does not implicitly {@link BoardCreate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardCreate\n     * @static\n     * @param {IBoardCreate} message BoardCreate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardCreate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardCreate message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardCreate} BoardCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardCreate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardCreate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardCreate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardCreate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardCreate} BoardCreate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardCreate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardCreate message.\n     * @function verify\n     * @memberof BoardCreate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardCreate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardCreate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardCreate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardCreate} BoardCreate\n     */\n    BoardCreate.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardCreate)\n            return object;\n        var message = new $root.BoardCreate();\n        if (object.name != null)\n            message.name = String(object.name);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardCreate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardCreate\n     * @static\n     * @param {BoardCreate} message BoardCreate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardCreate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        return object;\n    };\n\n    /**\n     * Converts this BoardCreate to JSON.\n     * @function toJSON\n     * @memberof BoardCreate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardCreate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardCreate;\n})();\n\n$root.UserModerationAction = (function() {\n\n    /**\n     * Properties of a UserModerationAction.\n     * @exports IUserModerationAction\n     * @interface IUserModerationAction\n     * @property {number|null} [endsAt] UserModerationAction endsAt\n     */\n\n    /**\n     * Constructs a new UserModerationAction.\n     * @exports UserModerationAction\n     * @classdesc Represents a UserModerationAction.\n     * @implements IUserModerationAction\n     * @constructor\n     * @param {IUserModerationAction=} [properties] Properties to set\n     */\n    function UserModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserModerationAction endsAt.\n     * @member {number} endsAt\n     * @memberof UserModerationAction\n     * @instance\n     */\n    UserModerationAction.prototype.endsAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new UserModerationAction instance using the specified properties.\n     * @function create\n     * @memberof UserModerationAction\n     * @static\n     * @param {IUserModerationAction=} [properties] Properties to set\n     * @returns {UserModerationAction} UserModerationAction instance\n     */\n    UserModerationAction.create = function create(properties) {\n        return new UserModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified UserModerationAction message. Does not implicitly {@link UserModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof UserModerationAction\n     * @static\n     * @param {IUserModerationAction} message UserModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endsAt != null && Object.hasOwnProperty.call(message, \"endsAt\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.endsAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserModerationAction message, length delimited. Does not implicitly {@link UserModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserModerationAction\n     * @static\n     * @param {IUserModerationAction} message UserModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserModerationAction} UserModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.endsAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserModerationAction} UserModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserModerationAction message.\n     * @function verify\n     * @memberof UserModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (!$util.isInteger(message.endsAt) && !(message.endsAt && $util.isInteger(message.endsAt.low) && $util.isInteger(message.endsAt.high)))\n                return \"endsAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserModerationAction} UserModerationAction\n     */\n    UserModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserModerationAction)\n            return object;\n        var message = new $root.UserModerationAction();\n        if (object.endsAt != null)\n            if ($util.Long)\n                (message.endsAt = $util.Long.fromValue(object.endsAt)).unsigned = false;\n            else if (typeof object.endsAt === \"string\")\n                message.endsAt = parseInt(object.endsAt, 10);\n            else if (typeof object.endsAt === \"number\")\n                message.endsAt = object.endsAt;\n            else if (typeof object.endsAt === \"object\")\n                message.endsAt = new $util.LongBits(object.endsAt.low >>> 0, object.endsAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserModerationAction\n     * @static\n     * @param {UserModerationAction} message UserModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.endsAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.endsAt = options.longs === String ? \"0\" : 0;\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (typeof message.endsAt === \"number\")\n                object.endsAt = options.longs === String ? String(message.endsAt) : message.endsAt;\n            else\n                object.endsAt = options.longs === String ? $util.Long.prototype.toString.call(message.endsAt) : options.longs === Number ? new $util.LongBits(message.endsAt.low >>> 0, message.endsAt.high >>> 0).toNumber() : message.endsAt;\n        return object;\n    };\n\n    /**\n     * Converts this UserModerationAction to JSON.\n     * @function toJSON\n     * @memberof UserModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserModerationAction;\n})();\n\n$root.ModerationAction = (function() {\n\n    /**\n     * Properties of a ModerationAction.\n     * @exports IModerationAction\n     * @interface IModerationAction\n     * @property {string|null} [action] ModerationAction action\n     * @property {number|null} [category] ModerationAction category\n     * @property {string|null} [reason] ModerationAction reason\n     * @property {IUserModerationAction|null} [user] ModerationAction user\n     * @property {number|null} [endsAt] ModerationAction endsAt\n     */\n\n    /**\n     * Constructs a new ModerationAction.\n     * @exports ModerationAction\n     * @classdesc Represents a ModerationAction.\n     * @implements IModerationAction\n     * @constructor\n     * @param {IModerationAction=} [properties] Properties to set\n     */\n    function ModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ModerationAction action.\n     * @member {string} action\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.action = \"\";\n\n    /**\n     * ModerationAction category.\n     * @member {number} category\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.category = 0;\n\n    /**\n     * ModerationAction reason.\n     * @member {string} reason\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.reason = \"\";\n\n    /**\n     * ModerationAction user.\n     * @member {IUserModerationAction|null|undefined} user\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.user = null;\n\n    /**\n     * ModerationAction endsAt.\n     * @member {number} endsAt\n     * @memberof ModerationAction\n     * @instance\n     */\n    ModerationAction.prototype.endsAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new ModerationAction instance using the specified properties.\n     * @function create\n     * @memberof ModerationAction\n     * @static\n     * @param {IModerationAction=} [properties] Properties to set\n     * @returns {ModerationAction} ModerationAction instance\n     */\n    ModerationAction.create = function create(properties) {\n        return new ModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified ModerationAction message. Does not implicitly {@link ModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof ModerationAction\n     * @static\n     * @param {IModerationAction} message ModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.action);\n        if (message.category != null && Object.hasOwnProperty.call(message, \"category\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.category);\n        if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.UserModerationAction.encode(message.user, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.endsAt != null && Object.hasOwnProperty.call(message, \"endsAt\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.endsAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ModerationAction message, length delimited. Does not implicitly {@link ModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ModerationAction\n     * @static\n     * @param {IModerationAction} message ModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof ModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ModerationAction} ModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.string();\n                break;\n            case 2:\n                message.category = reader.int32();\n                break;\n            case 3:\n                message.reason = reader.string();\n                break;\n            case 4:\n                message.user = $root.UserModerationAction.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.endsAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ModerationAction} ModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ModerationAction message.\n     * @function verify\n     * @memberof ModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            if (!$util.isString(message.action))\n                return \"action: string expected\";\n        if (message.category != null && message.hasOwnProperty(\"category\"))\n            if (!$util.isInteger(message.category))\n                return \"category: integer expected\";\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            if (!$util.isString(message.reason))\n                return \"reason: string expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.UserModerationAction.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (!$util.isInteger(message.endsAt) && !(message.endsAt && $util.isInteger(message.endsAt.low) && $util.isInteger(message.endsAt.high)))\n                return \"endsAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ModerationAction} ModerationAction\n     */\n    ModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.ModerationAction)\n            return object;\n        var message = new $root.ModerationAction();\n        if (object.action != null)\n            message.action = String(object.action);\n        if (object.category != null)\n            message.category = object.category | 0;\n        if (object.reason != null)\n            message.reason = String(object.reason);\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".ModerationAction.user: object expected\");\n            message.user = $root.UserModerationAction.fromObject(object.user);\n        }\n        if (object.endsAt != null)\n            if ($util.Long)\n                (message.endsAt = $util.Long.fromValue(object.endsAt)).unsigned = false;\n            else if (typeof object.endsAt === \"string\")\n                message.endsAt = parseInt(object.endsAt, 10);\n            else if (typeof object.endsAt === \"number\")\n                message.endsAt = object.endsAt;\n            else if (typeof object.endsAt === \"object\")\n                message.endsAt = new $util.LongBits(object.endsAt.low >>> 0, object.endsAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ModerationAction\n     * @static\n     * @param {ModerationAction} message ModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = \"\";\n            object.category = 0;\n            object.reason = \"\";\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.endsAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.endsAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = message.action;\n        if (message.category != null && message.hasOwnProperty(\"category\"))\n            object.category = message.category;\n        if (message.reason != null && message.hasOwnProperty(\"reason\"))\n            object.reason = message.reason;\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.UserModerationAction.toObject(message.user, options);\n        if (message.endsAt != null && message.hasOwnProperty(\"endsAt\"))\n            if (typeof message.endsAt === \"number\")\n                object.endsAt = options.longs === String ? String(message.endsAt) : message.endsAt;\n            else\n                object.endsAt = options.longs === String ? $util.Long.prototype.toString.call(message.endsAt) : options.longs === Number ? new $util.LongBits(message.endsAt.low >>> 0, message.endsAt.high >>> 0).toNumber() : message.endsAt;\n        return object;\n    };\n\n    /**\n     * Converts this ModerationAction to JSON.\n     * @function toJSON\n     * @memberof ModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ModerationAction;\n})();\n\n$root.ThreadModerationAction = (function() {\n\n    /**\n     * Properties of a ThreadModerationAction.\n     * @exports IThreadModerationAction\n     * @interface IThreadModerationAction\n     * @property {IModerationAction|null} [action] ThreadModerationAction action\n     * @property {string|null} [threadId] ThreadModerationAction threadId\n     */\n\n    /**\n     * Constructs a new ThreadModerationAction.\n     * @exports ThreadModerationAction\n     * @classdesc Represents a ThreadModerationAction.\n     * @implements IThreadModerationAction\n     * @constructor\n     * @param {IThreadModerationAction=} [properties] Properties to set\n     */\n    function ThreadModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadModerationAction action.\n     * @member {IModerationAction|null|undefined} action\n     * @memberof ThreadModerationAction\n     * @instance\n     */\n    ThreadModerationAction.prototype.action = null;\n\n    /**\n     * ThreadModerationAction threadId.\n     * @member {string} threadId\n     * @memberof ThreadModerationAction\n     * @instance\n     */\n    ThreadModerationAction.prototype.threadId = \"\";\n\n    /**\n     * Creates a new ThreadModerationAction instance using the specified properties.\n     * @function create\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {IThreadModerationAction=} [properties] Properties to set\n     * @returns {ThreadModerationAction} ThreadModerationAction instance\n     */\n    ThreadModerationAction.create = function create(properties) {\n        return new ThreadModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadModerationAction message. Does not implicitly {@link ThreadModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {IThreadModerationAction} message ThreadModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            $root.ModerationAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.threadId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadModerationAction message, length delimited. Does not implicitly {@link ThreadModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {IThreadModerationAction} message ThreadModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadModerationAction} ThreadModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = $root.ModerationAction.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.threadId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadModerationAction} ThreadModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadModerationAction message.\n     * @function verify\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\")) {\n            var error = $root.ModerationAction.verify(message.action);\n            if (error)\n                return \"action.\" + error;\n        }\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ThreadModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadModerationAction} ThreadModerationAction\n     */\n    ThreadModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadModerationAction)\n            return object;\n        var message = new $root.ThreadModerationAction();\n        if (object.action != null) {\n            if (typeof object.action !== \"object\")\n                throw TypeError(\".ThreadModerationAction.action: object expected\");\n            message.action = $root.ModerationAction.fromObject(object.action);\n        }\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadModerationAction\n     * @static\n     * @param {ThreadModerationAction} message ThreadModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = null;\n            object.threadId = \"\";\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = $root.ModerationAction.toObject(message.action, options);\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        return object;\n    };\n\n    /**\n     * Converts this ThreadModerationAction to JSON.\n     * @function toJSON\n     * @memberof ThreadModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadModerationAction;\n})();\n\n$root.CommentModerationAction = (function() {\n\n    /**\n     * Properties of a CommentModerationAction.\n     * @exports ICommentModerationAction\n     * @interface ICommentModerationAction\n     * @property {IModerationAction|null} [action] CommentModerationAction action\n     * @property {string|null} [commentId] CommentModerationAction commentId\n     */\n\n    /**\n     * Constructs a new CommentModerationAction.\n     * @exports CommentModerationAction\n     * @classdesc Represents a CommentModerationAction.\n     * @implements ICommentModerationAction\n     * @constructor\n     * @param {ICommentModerationAction=} [properties] Properties to set\n     */\n    function CommentModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentModerationAction action.\n     * @member {IModerationAction|null|undefined} action\n     * @memberof CommentModerationAction\n     * @instance\n     */\n    CommentModerationAction.prototype.action = null;\n\n    /**\n     * CommentModerationAction commentId.\n     * @member {string} commentId\n     * @memberof CommentModerationAction\n     * @instance\n     */\n    CommentModerationAction.prototype.commentId = \"\";\n\n    /**\n     * Creates a new CommentModerationAction instance using the specified properties.\n     * @function create\n     * @memberof CommentModerationAction\n     * @static\n     * @param {ICommentModerationAction=} [properties] Properties to set\n     * @returns {CommentModerationAction} CommentModerationAction instance\n     */\n    CommentModerationAction.create = function create(properties) {\n        return new CommentModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified CommentModerationAction message. Does not implicitly {@link CommentModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof CommentModerationAction\n     * @static\n     * @param {ICommentModerationAction} message CommentModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            $root.ModerationAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.commentId != null && Object.hasOwnProperty.call(message, \"commentId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.commentId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentModerationAction message, length delimited. Does not implicitly {@link CommentModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentModerationAction\n     * @static\n     * @param {ICommentModerationAction} message CommentModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentModerationAction} CommentModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = $root.ModerationAction.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.commentId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentModerationAction} CommentModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentModerationAction message.\n     * @function verify\n     * @memberof CommentModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\")) {\n            var error = $root.ModerationAction.verify(message.action);\n            if (error)\n                return \"action.\" + error;\n        }\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            if (!$util.isString(message.commentId))\n                return \"commentId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentModerationAction} CommentModerationAction\n     */\n    CommentModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentModerationAction)\n            return object;\n        var message = new $root.CommentModerationAction();\n        if (object.action != null) {\n            if (typeof object.action !== \"object\")\n                throw TypeError(\".CommentModerationAction.action: object expected\");\n            message.action = $root.ModerationAction.fromObject(object.action);\n        }\n        if (object.commentId != null)\n            message.commentId = String(object.commentId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentModerationAction\n     * @static\n     * @param {CommentModerationAction} message CommentModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = null;\n            object.commentId = \"\";\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = $root.ModerationAction.toObject(message.action, options);\n        if (message.commentId != null && message.hasOwnProperty(\"commentId\"))\n            object.commentId = message.commentId;\n        return object;\n    };\n\n    /**\n     * Converts this CommentModerationAction to JSON.\n     * @function toJSON\n     * @memberof CommentModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentModerationAction;\n})();\n\n$root.BoardModerationAction = (function() {\n\n    /**\n     * Properties of a BoardModerationAction.\n     * @exports IBoardModerationAction\n     * @interface IBoardModerationAction\n     * @property {IModerationAction|null} [action] BoardModerationAction action\n     * @property {string|null} [boardId] BoardModerationAction boardId\n     */\n\n    /**\n     * Constructs a new BoardModerationAction.\n     * @exports BoardModerationAction\n     * @classdesc Represents a BoardModerationAction.\n     * @implements IBoardModerationAction\n     * @constructor\n     * @param {IBoardModerationAction=} [properties] Properties to set\n     */\n    function BoardModerationAction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BoardModerationAction action.\n     * @member {IModerationAction|null|undefined} action\n     * @memberof BoardModerationAction\n     * @instance\n     */\n    BoardModerationAction.prototype.action = null;\n\n    /**\n     * BoardModerationAction boardId.\n     * @member {string} boardId\n     * @memberof BoardModerationAction\n     * @instance\n     */\n    BoardModerationAction.prototype.boardId = \"\";\n\n    /**\n     * Creates a new BoardModerationAction instance using the specified properties.\n     * @function create\n     * @memberof BoardModerationAction\n     * @static\n     * @param {IBoardModerationAction=} [properties] Properties to set\n     * @returns {BoardModerationAction} BoardModerationAction instance\n     */\n    BoardModerationAction.create = function create(properties) {\n        return new BoardModerationAction(properties);\n    };\n\n    /**\n     * Encodes the specified BoardModerationAction message. Does not implicitly {@link BoardModerationAction.verify|verify} messages.\n     * @function encode\n     * @memberof BoardModerationAction\n     * @static\n     * @param {IBoardModerationAction} message BoardModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardModerationAction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            $root.ModerationAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.boardId != null && Object.hasOwnProperty.call(message, \"boardId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.boardId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BoardModerationAction message, length delimited. Does not implicitly {@link BoardModerationAction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BoardModerationAction\n     * @static\n     * @param {IBoardModerationAction} message BoardModerationAction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BoardModerationAction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BoardModerationAction message from the specified reader or buffer.\n     * @function decode\n     * @memberof BoardModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BoardModerationAction} BoardModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardModerationAction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BoardModerationAction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = $root.ModerationAction.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.boardId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BoardModerationAction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BoardModerationAction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BoardModerationAction} BoardModerationAction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BoardModerationAction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BoardModerationAction message.\n     * @function verify\n     * @memberof BoardModerationAction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BoardModerationAction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\")) {\n            var error = $root.ModerationAction.verify(message.action);\n            if (error)\n                return \"action.\" + error;\n        }\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            if (!$util.isString(message.boardId))\n                return \"boardId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BoardModerationAction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BoardModerationAction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BoardModerationAction} BoardModerationAction\n     */\n    BoardModerationAction.fromObject = function fromObject(object) {\n        if (object instanceof $root.BoardModerationAction)\n            return object;\n        var message = new $root.BoardModerationAction();\n        if (object.action != null) {\n            if (typeof object.action !== \"object\")\n                throw TypeError(\".BoardModerationAction.action: object expected\");\n            message.action = $root.ModerationAction.fromObject(object.action);\n        }\n        if (object.boardId != null)\n            message.boardId = String(object.boardId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BoardModerationAction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BoardModerationAction\n     * @static\n     * @param {BoardModerationAction} message BoardModerationAction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BoardModerationAction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.action = null;\n            object.boardId = \"\";\n        }\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = $root.ModerationAction.toObject(message.action, options);\n        if (message.boardId != null && message.hasOwnProperty(\"boardId\"))\n            object.boardId = message.boardId;\n        return object;\n    };\n\n    /**\n     * Converts this BoardModerationAction to JSON.\n     * @function toJSON\n     * @memberof BoardModerationAction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BoardModerationAction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BoardModerationAction;\n})();\n\n$root.UserInBoardContext = (function() {\n\n    /**\n     * Properties of a UserInBoardContext.\n     * @exports IUserInBoardContext\n     * @interface IUserInBoardContext\n     * @property {ICommunityUserRef|null} [user] UserInBoardContext user\n     * @property {number|null} [communityOpinion] UserInBoardContext communityOpinion\n     * @property {number|null} [theirUpvotes] UserInBoardContext theirUpvotes\n     * @property {number|null} [theirDownvotes] UserInBoardContext theirDownvotes\n     */\n\n    /**\n     * Constructs a new UserInBoardContext.\n     * @exports UserInBoardContext\n     * @classdesc Represents a UserInBoardContext.\n     * @implements IUserInBoardContext\n     * @constructor\n     * @param {IUserInBoardContext=} [properties] Properties to set\n     */\n    function UserInBoardContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserInBoardContext user.\n     * @member {ICommunityUserRef|null|undefined} user\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.user = null;\n\n    /**\n     * UserInBoardContext communityOpinion.\n     * @member {number} communityOpinion\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.communityOpinion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UserInBoardContext theirUpvotes.\n     * @member {number} theirUpvotes\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.theirUpvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UserInBoardContext theirDownvotes.\n     * @member {number} theirDownvotes\n     * @memberof UserInBoardContext\n     * @instance\n     */\n    UserInBoardContext.prototype.theirDownvotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new UserInBoardContext instance using the specified properties.\n     * @function create\n     * @memberof UserInBoardContext\n     * @static\n     * @param {IUserInBoardContext=} [properties] Properties to set\n     * @returns {UserInBoardContext} UserInBoardContext instance\n     */\n    UserInBoardContext.create = function create(properties) {\n        return new UserInBoardContext(properties);\n    };\n\n    /**\n     * Encodes the specified UserInBoardContext message. Does not implicitly {@link UserInBoardContext.verify|verify} messages.\n     * @function encode\n     * @memberof UserInBoardContext\n     * @static\n     * @param {IUserInBoardContext} message UserInBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserInBoardContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.user != null && Object.hasOwnProperty.call(message, \"user\"))\n            $root.CommunityUserRef.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.communityOpinion != null && Object.hasOwnProperty.call(message, \"communityOpinion\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.communityOpinion);\n        if (message.theirUpvotes != null && Object.hasOwnProperty.call(message, \"theirUpvotes\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.theirUpvotes);\n        if (message.theirDownvotes != null && Object.hasOwnProperty.call(message, \"theirDownvotes\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.theirDownvotes);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserInBoardContext message, length delimited. Does not implicitly {@link UserInBoardContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserInBoardContext\n     * @static\n     * @param {IUserInBoardContext} message UserInBoardContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserInBoardContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserInBoardContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserInBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserInBoardContext} UserInBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserInBoardContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserInBoardContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.user = $root.CommunityUserRef.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.communityOpinion = reader.int64();\n                break;\n            case 3:\n                message.theirUpvotes = reader.int64();\n                break;\n            case 4:\n                message.theirDownvotes = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserInBoardContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserInBoardContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserInBoardContext} UserInBoardContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserInBoardContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserInBoardContext message.\n     * @function verify\n     * @memberof UserInBoardContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserInBoardContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.user != null && message.hasOwnProperty(\"user\")) {\n            var error = $root.CommunityUserRef.verify(message.user);\n            if (error)\n                return \"user.\" + error;\n        }\n        if (message.communityOpinion != null && message.hasOwnProperty(\"communityOpinion\"))\n            if (!$util.isInteger(message.communityOpinion) && !(message.communityOpinion && $util.isInteger(message.communityOpinion.low) && $util.isInteger(message.communityOpinion.high)))\n                return \"communityOpinion: integer|Long expected\";\n        if (message.theirUpvotes != null && message.hasOwnProperty(\"theirUpvotes\"))\n            if (!$util.isInteger(message.theirUpvotes) && !(message.theirUpvotes && $util.isInteger(message.theirUpvotes.low) && $util.isInteger(message.theirUpvotes.high)))\n                return \"theirUpvotes: integer|Long expected\";\n        if (message.theirDownvotes != null && message.hasOwnProperty(\"theirDownvotes\"))\n            if (!$util.isInteger(message.theirDownvotes) && !(message.theirDownvotes && $util.isInteger(message.theirDownvotes.low) && $util.isInteger(message.theirDownvotes.high)))\n                return \"theirDownvotes: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserInBoardContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserInBoardContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserInBoardContext} UserInBoardContext\n     */\n    UserInBoardContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserInBoardContext)\n            return object;\n        var message = new $root.UserInBoardContext();\n        if (object.user != null) {\n            if (typeof object.user !== \"object\")\n                throw TypeError(\".UserInBoardContext.user: object expected\");\n            message.user = $root.CommunityUserRef.fromObject(object.user);\n        }\n        if (object.communityOpinion != null)\n            if ($util.Long)\n                (message.communityOpinion = $util.Long.fromValue(object.communityOpinion)).unsigned = false;\n            else if (typeof object.communityOpinion === \"string\")\n                message.communityOpinion = parseInt(object.communityOpinion, 10);\n            else if (typeof object.communityOpinion === \"number\")\n                message.communityOpinion = object.communityOpinion;\n            else if (typeof object.communityOpinion === \"object\")\n                message.communityOpinion = new $util.LongBits(object.communityOpinion.low >>> 0, object.communityOpinion.high >>> 0).toNumber();\n        if (object.theirUpvotes != null)\n            if ($util.Long)\n                (message.theirUpvotes = $util.Long.fromValue(object.theirUpvotes)).unsigned = false;\n            else if (typeof object.theirUpvotes === \"string\")\n                message.theirUpvotes = parseInt(object.theirUpvotes, 10);\n            else if (typeof object.theirUpvotes === \"number\")\n                message.theirUpvotes = object.theirUpvotes;\n            else if (typeof object.theirUpvotes === \"object\")\n                message.theirUpvotes = new $util.LongBits(object.theirUpvotes.low >>> 0, object.theirUpvotes.high >>> 0).toNumber();\n        if (object.theirDownvotes != null)\n            if ($util.Long)\n                (message.theirDownvotes = $util.Long.fromValue(object.theirDownvotes)).unsigned = false;\n            else if (typeof object.theirDownvotes === \"string\")\n                message.theirDownvotes = parseInt(object.theirDownvotes, 10);\n            else if (typeof object.theirDownvotes === \"number\")\n                message.theirDownvotes = object.theirDownvotes;\n            else if (typeof object.theirDownvotes === \"object\")\n                message.theirDownvotes = new $util.LongBits(object.theirDownvotes.low >>> 0, object.theirDownvotes.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserInBoardContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserInBoardContext\n     * @static\n     * @param {UserInBoardContext} message UserInBoardContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserInBoardContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.user = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.communityOpinion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.communityOpinion = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.theirUpvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.theirUpvotes = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.theirDownvotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.theirDownvotes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.user != null && message.hasOwnProperty(\"user\"))\n            object.user = $root.CommunityUserRef.toObject(message.user, options);\n        if (message.communityOpinion != null && message.hasOwnProperty(\"communityOpinion\"))\n            if (typeof message.communityOpinion === \"number\")\n                object.communityOpinion = options.longs === String ? String(message.communityOpinion) : message.communityOpinion;\n            else\n                object.communityOpinion = options.longs === String ? $util.Long.prototype.toString.call(message.communityOpinion) : options.longs === Number ? new $util.LongBits(message.communityOpinion.low >>> 0, message.communityOpinion.high >>> 0).toNumber() : message.communityOpinion;\n        if (message.theirUpvotes != null && message.hasOwnProperty(\"theirUpvotes\"))\n            if (typeof message.theirUpvotes === \"number\")\n                object.theirUpvotes = options.longs === String ? String(message.theirUpvotes) : message.theirUpvotes;\n            else\n                object.theirUpvotes = options.longs === String ? $util.Long.prototype.toString.call(message.theirUpvotes) : options.longs === Number ? new $util.LongBits(message.theirUpvotes.low >>> 0, message.theirUpvotes.high >>> 0).toNumber() : message.theirUpvotes;\n        if (message.theirDownvotes != null && message.hasOwnProperty(\"theirDownvotes\"))\n            if (typeof message.theirDownvotes === \"number\")\n                object.theirDownvotes = options.longs === String ? String(message.theirDownvotes) : message.theirDownvotes;\n            else\n                object.theirDownvotes = options.longs === String ? $util.Long.prototype.toString.call(message.theirDownvotes) : options.longs === Number ? new $util.LongBits(message.theirDownvotes.low >>> 0, message.theirDownvotes.high >>> 0).toNumber() : message.theirDownvotes;\n        return object;\n    };\n\n    /**\n     * Converts this UserInBoardContext to JSON.\n     * @function toJSON\n     * @memberof UserInBoardContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserInBoardContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserInBoardContext;\n})();\n\n$root.Image = (function() {\n\n    /**\n     * Properties of an Image.\n     * @exports IImage\n     * @interface IImage\n     * @property {string|null} [userId] Image userId\n     * @property {string|null} [uId] Image uId\n     * @property {string|null} [format] Image format\n     * @property {number|null} [height] Image height\n     * @property {number|null} [width] Image width\n     * @property {number|null} [size] Image size\n     * @property {number|null} [length] Image length\n     * @property {number|null} [createdAt] Image createdAt\n     */\n\n    /**\n     * Constructs a new Image.\n     * @exports Image\n     * @classdesc Represents an Image.\n     * @implements IImage\n     * @constructor\n     * @param {IImage=} [properties] Properties to set\n     */\n    function Image(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Image userId.\n     * @member {string} userId\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.userId = \"\";\n\n    /**\n     * Image uId.\n     * @member {string} uId\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.uId = \"\";\n\n    /**\n     * Image format.\n     * @member {string} format\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.format = \"\";\n\n    /**\n     * Image height.\n     * @member {number} height\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image width.\n     * @member {number} width\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.width = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image size.\n     * @member {number} size\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image length.\n     * @member {number} length\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.length = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Image createdAt.\n     * @member {number} createdAt\n     * @memberof Image\n     * @instance\n     */\n    Image.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new Image instance using the specified properties.\n     * @function create\n     * @memberof Image\n     * @static\n     * @param {IImage=} [properties] Properties to set\n     * @returns {Image} Image instance\n     */\n    Image.create = function create(properties) {\n        return new Image(properties);\n    };\n\n    /**\n     * Encodes the specified Image message. Does not implicitly {@link Image.verify|verify} messages.\n     * @function encode\n     * @memberof Image\n     * @static\n     * @param {IImage} message Image message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Image.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.uId != null && Object.hasOwnProperty.call(message, \"uId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uId);\n        if (message.format != null && Object.hasOwnProperty.call(message, \"format\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.format);\n        if (message.height != null && Object.hasOwnProperty.call(message, \"height\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.height);\n        if (message.width != null && Object.hasOwnProperty.call(message, \"width\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.width);\n        if (message.size != null && Object.hasOwnProperty.call(message, \"size\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.size);\n        if (message.length != null && Object.hasOwnProperty.call(message, \"length\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.length);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Image message, length delimited. Does not implicitly {@link Image.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Image\n     * @static\n     * @param {IImage} message Image message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Image.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Image message from the specified reader or buffer.\n     * @function decode\n     * @memberof Image\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Image} Image\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Image.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Image();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.uId = reader.string();\n                break;\n            case 3:\n                message.format = reader.string();\n                break;\n            case 4:\n                message.height = reader.int64();\n                break;\n            case 5:\n                message.width = reader.int64();\n                break;\n            case 6:\n                message.size = reader.int64();\n                break;\n            case 7:\n                message.length = reader.int64();\n                break;\n            case 8:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Image message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Image\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Image} Image\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Image.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Image message.\n     * @function verify\n     * @memberof Image\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Image.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            if (!$util.isString(message.uId))\n                return \"uId: string expected\";\n        if (message.format != null && message.hasOwnProperty(\"format\"))\n            if (!$util.isString(message.format))\n                return \"format: string expected\";\n        if (message.height != null && message.hasOwnProperty(\"height\"))\n            if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))\n                return \"height: integer|Long expected\";\n        if (message.width != null && message.hasOwnProperty(\"width\"))\n            if (!$util.isInteger(message.width) && !(message.width && $util.isInteger(message.width.low) && $util.isInteger(message.width.high)))\n                return \"width: integer|Long expected\";\n        if (message.size != null && message.hasOwnProperty(\"size\"))\n            if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))\n                return \"size: integer|Long expected\";\n        if (message.length != null && message.hasOwnProperty(\"length\"))\n            if (!$util.isInteger(message.length) && !(message.length && $util.isInteger(message.length.low) && $util.isInteger(message.length.high)))\n                return \"length: integer|Long expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Image message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Image\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Image} Image\n     */\n    Image.fromObject = function fromObject(object) {\n        if (object instanceof $root.Image)\n            return object;\n        var message = new $root.Image();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.uId != null)\n            message.uId = String(object.uId);\n        if (object.format != null)\n            message.format = String(object.format);\n        if (object.height != null)\n            if ($util.Long)\n                (message.height = $util.Long.fromValue(object.height)).unsigned = false;\n            else if (typeof object.height === \"string\")\n                message.height = parseInt(object.height, 10);\n            else if (typeof object.height === \"number\")\n                message.height = object.height;\n            else if (typeof object.height === \"object\")\n                message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();\n        if (object.width != null)\n            if ($util.Long)\n                (message.width = $util.Long.fromValue(object.width)).unsigned = false;\n            else if (typeof object.width === \"string\")\n                message.width = parseInt(object.width, 10);\n            else if (typeof object.width === \"number\")\n                message.width = object.width;\n            else if (typeof object.width === \"object\")\n                message.width = new $util.LongBits(object.width.low >>> 0, object.width.high >>> 0).toNumber();\n        if (object.size != null)\n            if ($util.Long)\n                (message.size = $util.Long.fromValue(object.size)).unsigned = false;\n            else if (typeof object.size === \"string\")\n                message.size = parseInt(object.size, 10);\n            else if (typeof object.size === \"number\")\n                message.size = object.size;\n            else if (typeof object.size === \"object\")\n                message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();\n        if (object.length != null)\n            if ($util.Long)\n                (message.length = $util.Long.fromValue(object.length)).unsigned = false;\n            else if (typeof object.length === \"string\")\n                message.length = parseInt(object.length, 10);\n            else if (typeof object.length === \"number\")\n                message.length = object.length;\n            else if (typeof object.length === \"object\")\n                message.length = new $util.LongBits(object.length.low >>> 0, object.length.high >>> 0).toNumber();\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Image message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Image\n     * @static\n     * @param {Image} message Image\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Image.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.uId = \"\";\n            object.format = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.height = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.width = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.width = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.size = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.length = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.length = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.uId != null && message.hasOwnProperty(\"uId\"))\n            object.uId = message.uId;\n        if (message.format != null && message.hasOwnProperty(\"format\"))\n            object.format = message.format;\n        if (message.height != null && message.hasOwnProperty(\"height\"))\n            if (typeof message.height === \"number\")\n                object.height = options.longs === String ? String(message.height) : message.height;\n            else\n                object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;\n        if (message.width != null && message.hasOwnProperty(\"width\"))\n            if (typeof message.width === \"number\")\n                object.width = options.longs === String ? String(message.width) : message.width;\n            else\n                object.width = options.longs === String ? $util.Long.prototype.toString.call(message.width) : options.longs === Number ? new $util.LongBits(message.width.low >>> 0, message.width.high >>> 0).toNumber() : message.width;\n        if (message.size != null && message.hasOwnProperty(\"size\"))\n            if (typeof message.size === \"number\")\n                object.size = options.longs === String ? String(message.size) : message.size;\n            else\n                object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;\n        if (message.length != null && message.hasOwnProperty(\"length\"))\n            if (typeof message.length === \"number\")\n                object.length = options.longs === String ? String(message.length) : message.length;\n            else\n                object.length = options.longs === String ? $util.Long.prototype.toString.call(message.length) : options.longs === Number ? new $util.LongBits(message.length.low >>> 0, message.length.high >>> 0).toNumber() : message.length;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this Image to JSON.\n     * @function toJSON\n     * @memberof Image\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Image.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Image;\n})();\n\n$root.ImageModifyRequest = (function() {\n\n    /**\n     * Properties of an ImageModifyRequest.\n     * @exports IImageModifyRequest\n     * @interface IImageModifyRequest\n     * @property {string|null} [item] ImageModifyRequest item\n     * @property {string|null} [action] ImageModifyRequest action\n     * @property {string|null} [file] ImageModifyRequest file\n     */\n\n    /**\n     * Constructs a new ImageModifyRequest.\n     * @exports ImageModifyRequest\n     * @classdesc Represents an ImageModifyRequest.\n     * @implements IImageModifyRequest\n     * @constructor\n     * @param {IImageModifyRequest=} [properties] Properties to set\n     */\n    function ImageModifyRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ImageModifyRequest item.\n     * @member {string} item\n     * @memberof ImageModifyRequest\n     * @instance\n     */\n    ImageModifyRequest.prototype.item = \"\";\n\n    /**\n     * ImageModifyRequest action.\n     * @member {string} action\n     * @memberof ImageModifyRequest\n     * @instance\n     */\n    ImageModifyRequest.prototype.action = \"\";\n\n    /**\n     * ImageModifyRequest file.\n     * @member {string} file\n     * @memberof ImageModifyRequest\n     * @instance\n     */\n    ImageModifyRequest.prototype.file = \"\";\n\n    /**\n     * Creates a new ImageModifyRequest instance using the specified properties.\n     * @function create\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {IImageModifyRequest=} [properties] Properties to set\n     * @returns {ImageModifyRequest} ImageModifyRequest instance\n     */\n    ImageModifyRequest.create = function create(properties) {\n        return new ImageModifyRequest(properties);\n    };\n\n    /**\n     * Encodes the specified ImageModifyRequest message. Does not implicitly {@link ImageModifyRequest.verify|verify} messages.\n     * @function encode\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {IImageModifyRequest} message ImageModifyRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ImageModifyRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.item != null && Object.hasOwnProperty.call(message, \"item\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.item);\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.action);\n        if (message.file != null && Object.hasOwnProperty.call(message, \"file\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.file);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ImageModifyRequest message, length delimited. Does not implicitly {@link ImageModifyRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {IImageModifyRequest} message ImageModifyRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ImageModifyRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an ImageModifyRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ImageModifyRequest} ImageModifyRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ImageModifyRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ImageModifyRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.item = reader.string();\n                break;\n            case 2:\n                message.action = reader.string();\n                break;\n            case 3:\n                message.file = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an ImageModifyRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ImageModifyRequest} ImageModifyRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ImageModifyRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an ImageModifyRequest message.\n     * @function verify\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ImageModifyRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.item != null && message.hasOwnProperty(\"item\"))\n            if (!$util.isString(message.item))\n                return \"item: string expected\";\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            if (!$util.isString(message.action))\n                return \"action: string expected\";\n        if (message.file != null && message.hasOwnProperty(\"file\"))\n            if (!$util.isString(message.file))\n                return \"file: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an ImageModifyRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ImageModifyRequest} ImageModifyRequest\n     */\n    ImageModifyRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.ImageModifyRequest)\n            return object;\n        var message = new $root.ImageModifyRequest();\n        if (object.item != null)\n            message.item = String(object.item);\n        if (object.action != null)\n            message.action = String(object.action);\n        if (object.file != null)\n            message.file = String(object.file);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an ImageModifyRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ImageModifyRequest\n     * @static\n     * @param {ImageModifyRequest} message ImageModifyRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ImageModifyRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.item = \"\";\n            object.action = \"\";\n            object.file = \"\";\n        }\n        if (message.item != null && message.hasOwnProperty(\"item\"))\n            object.item = message.item;\n        if (message.action != null && message.hasOwnProperty(\"action\"))\n            object.action = message.action;\n        if (message.file != null && message.hasOwnProperty(\"file\"))\n            object.file = message.file;\n        return object;\n    };\n\n    /**\n     * Converts this ImageModifyRequest to JSON.\n     * @function toJSON\n     * @memberof ImageModifyRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ImageModifyRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ImageModifyRequest;\n})();\n\n$root.DraftJsBlock = (function() {\n\n    /**\n     * Properties of a DraftJsBlock.\n     * @exports IDraftJsBlock\n     * @interface IDraftJsBlock\n     * @property {string|null} [key] DraftJsBlock key\n     * @property {string|null} [text] DraftJsBlock text\n     * @property {string|null} [type] DraftJsBlock type\n     * @property {number|null} [depth] DraftJsBlock depth\n     * @property {Array.<number>|null} [inlineStyleRanges] DraftJsBlock inlineStyleRanges\n     * @property {Array.<string>|null} [entityRanges] DraftJsBlock entityRanges\n     */\n\n    /**\n     * Constructs a new DraftJsBlock.\n     * @exports DraftJsBlock\n     * @classdesc Represents a DraftJsBlock.\n     * @implements IDraftJsBlock\n     * @constructor\n     * @param {IDraftJsBlock=} [properties] Properties to set\n     */\n    function DraftJsBlock(properties) {\n        this.inlineStyleRanges = [];\n        this.entityRanges = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DraftJsBlock key.\n     * @member {string} key\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.key = \"\";\n\n    /**\n     * DraftJsBlock text.\n     * @member {string} text\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.text = \"\";\n\n    /**\n     * DraftJsBlock type.\n     * @member {string} type\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.type = \"\";\n\n    /**\n     * DraftJsBlock depth.\n     * @member {number} depth\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.depth = 0;\n\n    /**\n     * DraftJsBlock inlineStyleRanges.\n     * @member {Array.<number>} inlineStyleRanges\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.inlineStyleRanges = $util.emptyArray;\n\n    /**\n     * DraftJsBlock entityRanges.\n     * @member {Array.<string>} entityRanges\n     * @memberof DraftJsBlock\n     * @instance\n     */\n    DraftJsBlock.prototype.entityRanges = $util.emptyArray;\n\n    /**\n     * Creates a new DraftJsBlock instance using the specified properties.\n     * @function create\n     * @memberof DraftJsBlock\n     * @static\n     * @param {IDraftJsBlock=} [properties] Properties to set\n     * @returns {DraftJsBlock} DraftJsBlock instance\n     */\n    DraftJsBlock.create = function create(properties) {\n        return new DraftJsBlock(properties);\n    };\n\n    /**\n     * Encodes the specified DraftJsBlock message. Does not implicitly {@link DraftJsBlock.verify|verify} messages.\n     * @function encode\n     * @memberof DraftJsBlock\n     * @static\n     * @param {IDraftJsBlock} message DraftJsBlock message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsBlock.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n        if (message.text != null && Object.hasOwnProperty.call(message, \"text\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n        if (message.depth != null && Object.hasOwnProperty.call(message, \"depth\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.depth);\n        if (message.inlineStyleRanges != null && message.inlineStyleRanges.length) {\n            writer.uint32(/* id 5, wireType 2 =*/42).fork();\n            for (var i = 0; i < message.inlineStyleRanges.length; ++i)\n                writer.int32(message.inlineStyleRanges[i]);\n            writer.ldelim();\n        }\n        if (message.entityRanges != null && message.entityRanges.length)\n            for (var i = 0; i < message.entityRanges.length; ++i)\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.entityRanges[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DraftJsBlock message, length delimited. Does not implicitly {@link DraftJsBlock.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DraftJsBlock\n     * @static\n     * @param {IDraftJsBlock} message DraftJsBlock message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsBlock.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DraftJsBlock message from the specified reader or buffer.\n     * @function decode\n     * @memberof DraftJsBlock\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DraftJsBlock} DraftJsBlock\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsBlock.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraftJsBlock();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.key = reader.string();\n                break;\n            case 2:\n                message.text = reader.string();\n                break;\n            case 3:\n                message.type = reader.string();\n                break;\n            case 4:\n                message.depth = reader.int32();\n                break;\n            case 5:\n                if (!(message.inlineStyleRanges && message.inlineStyleRanges.length))\n                    message.inlineStyleRanges = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.inlineStyleRanges.push(reader.int32());\n                } else\n                    message.inlineStyleRanges.push(reader.int32());\n                break;\n            case 6:\n                if (!(message.entityRanges && message.entityRanges.length))\n                    message.entityRanges = [];\n                message.entityRanges.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DraftJsBlock message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DraftJsBlock\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DraftJsBlock} DraftJsBlock\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsBlock.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DraftJsBlock message.\n     * @function verify\n     * @memberof DraftJsBlock\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DraftJsBlock.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            if (!$util.isString(message.key))\n                return \"key: string expected\";\n        if (message.text != null && message.hasOwnProperty(\"text\"))\n            if (!$util.isString(message.text))\n                return \"text: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            if (!$util.isInteger(message.depth))\n                return \"depth: integer expected\";\n        if (message.inlineStyleRanges != null && message.hasOwnProperty(\"inlineStyleRanges\")) {\n            if (!Array.isArray(message.inlineStyleRanges))\n                return \"inlineStyleRanges: array expected\";\n            for (var i = 0; i < message.inlineStyleRanges.length; ++i)\n                if (!$util.isInteger(message.inlineStyleRanges[i]))\n                    return \"inlineStyleRanges: integer[] expected\";\n        }\n        if (message.entityRanges != null && message.hasOwnProperty(\"entityRanges\")) {\n            if (!Array.isArray(message.entityRanges))\n                return \"entityRanges: array expected\";\n            for (var i = 0; i < message.entityRanges.length; ++i)\n                if (!$util.isString(message.entityRanges[i]))\n                    return \"entityRanges: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a DraftJsBlock message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DraftJsBlock\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DraftJsBlock} DraftJsBlock\n     */\n    DraftJsBlock.fromObject = function fromObject(object) {\n        if (object instanceof $root.DraftJsBlock)\n            return object;\n        var message = new $root.DraftJsBlock();\n        if (object.key != null)\n            message.key = String(object.key);\n        if (object.text != null)\n            message.text = String(object.text);\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.depth != null)\n            message.depth = object.depth | 0;\n        if (object.inlineStyleRanges) {\n            if (!Array.isArray(object.inlineStyleRanges))\n                throw TypeError(\".DraftJsBlock.inlineStyleRanges: array expected\");\n            message.inlineStyleRanges = [];\n            for (var i = 0; i < object.inlineStyleRanges.length; ++i)\n                message.inlineStyleRanges[i] = object.inlineStyleRanges[i] | 0;\n        }\n        if (object.entityRanges) {\n            if (!Array.isArray(object.entityRanges))\n                throw TypeError(\".DraftJsBlock.entityRanges: array expected\");\n            message.entityRanges = [];\n            for (var i = 0; i < object.entityRanges.length; ++i)\n                message.entityRanges[i] = String(object.entityRanges[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DraftJsBlock message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DraftJsBlock\n     * @static\n     * @param {DraftJsBlock} message DraftJsBlock\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DraftJsBlock.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.inlineStyleRanges = [];\n            object.entityRanges = [];\n        }\n        if (options.defaults) {\n            object.key = \"\";\n            object.text = \"\";\n            object.type = \"\";\n            object.depth = 0;\n        }\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = message.key;\n        if (message.text != null && message.hasOwnProperty(\"text\"))\n            object.text = message.text;\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            object.depth = message.depth;\n        if (message.inlineStyleRanges && message.inlineStyleRanges.length) {\n            object.inlineStyleRanges = [];\n            for (var j = 0; j < message.inlineStyleRanges.length; ++j)\n                object.inlineStyleRanges[j] = message.inlineStyleRanges[j];\n        }\n        if (message.entityRanges && message.entityRanges.length) {\n            object.entityRanges = [];\n            for (var j = 0; j < message.entityRanges.length; ++j)\n                object.entityRanges[j] = message.entityRanges[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this DraftJsBlock to JSON.\n     * @function toJSON\n     * @memberof DraftJsBlock\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DraftJsBlock.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DraftJsBlock;\n})();\n\n$root.DraftJsEntity = (function() {\n\n    /**\n     * Properties of a DraftJsEntity.\n     * @exports IDraftJsEntity\n     * @interface IDraftJsEntity\n     * @property {string|null} [type] DraftJsEntity type\n     * @property {string|null} [data] DraftJsEntity data\n     */\n\n    /**\n     * Constructs a new DraftJsEntity.\n     * @exports DraftJsEntity\n     * @classdesc Represents a DraftJsEntity.\n     * @implements IDraftJsEntity\n     * @constructor\n     * @param {IDraftJsEntity=} [properties] Properties to set\n     */\n    function DraftJsEntity(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DraftJsEntity type.\n     * @member {string} type\n     * @memberof DraftJsEntity\n     * @instance\n     */\n    DraftJsEntity.prototype.type = \"\";\n\n    /**\n     * DraftJsEntity data.\n     * @member {string} data\n     * @memberof DraftJsEntity\n     * @instance\n     */\n    DraftJsEntity.prototype.data = \"\";\n\n    /**\n     * Creates a new DraftJsEntity instance using the specified properties.\n     * @function create\n     * @memberof DraftJsEntity\n     * @static\n     * @param {IDraftJsEntity=} [properties] Properties to set\n     * @returns {DraftJsEntity} DraftJsEntity instance\n     */\n    DraftJsEntity.create = function create(properties) {\n        return new DraftJsEntity(properties);\n    };\n\n    /**\n     * Encodes the specified DraftJsEntity message. Does not implicitly {@link DraftJsEntity.verify|verify} messages.\n     * @function encode\n     * @memberof DraftJsEntity\n     * @static\n     * @param {IDraftJsEntity} message DraftJsEntity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsEntity.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DraftJsEntity message, length delimited. Does not implicitly {@link DraftJsEntity.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DraftJsEntity\n     * @static\n     * @param {IDraftJsEntity} message DraftJsEntity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsEntity.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DraftJsEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof DraftJsEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DraftJsEntity} DraftJsEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsEntity.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraftJsEntity();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.string();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DraftJsEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DraftJsEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DraftJsEntity} DraftJsEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsEntity.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DraftJsEntity message.\n     * @function verify\n     * @memberof DraftJsEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DraftJsEntity.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            if (!$util.isString(message.data))\n                return \"data: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a DraftJsEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DraftJsEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DraftJsEntity} DraftJsEntity\n     */\n    DraftJsEntity.fromObject = function fromObject(object) {\n        if (object instanceof $root.DraftJsEntity)\n            return object;\n        var message = new $root.DraftJsEntity();\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.data != null)\n            message.data = String(object.data);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DraftJsEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DraftJsEntity\n     * @static\n     * @param {DraftJsEntity} message DraftJsEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DraftJsEntity.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = \"\";\n            object.data = \"\";\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            object.data = message.data;\n        return object;\n    };\n\n    /**\n     * Converts this DraftJsEntity to JSON.\n     * @function toJSON\n     * @memberof DraftJsEntity\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DraftJsEntity.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DraftJsEntity;\n})();\n\n$root.DraftJsRawContent = (function() {\n\n    /**\n     * Properties of a DraftJsRawContent.\n     * @exports IDraftJsRawContent\n     * @interface IDraftJsRawContent\n     * @property {Array.<IDraftJsBlock>|null} [blocks] DraftJsRawContent blocks\n     */\n\n    /**\n     * Constructs a new DraftJsRawContent.\n     * @exports DraftJsRawContent\n     * @classdesc Represents a DraftJsRawContent.\n     * @implements IDraftJsRawContent\n     * @constructor\n     * @param {IDraftJsRawContent=} [properties] Properties to set\n     */\n    function DraftJsRawContent(properties) {\n        this.blocks = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DraftJsRawContent blocks.\n     * @member {Array.<IDraftJsBlock>} blocks\n     * @memberof DraftJsRawContent\n     * @instance\n     */\n    DraftJsRawContent.prototype.blocks = $util.emptyArray;\n\n    /**\n     * Creates a new DraftJsRawContent instance using the specified properties.\n     * @function create\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {IDraftJsRawContent=} [properties] Properties to set\n     * @returns {DraftJsRawContent} DraftJsRawContent instance\n     */\n    DraftJsRawContent.create = function create(properties) {\n        return new DraftJsRawContent(properties);\n    };\n\n    /**\n     * Encodes the specified DraftJsRawContent message. Does not implicitly {@link DraftJsRawContent.verify|verify} messages.\n     * @function encode\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {IDraftJsRawContent} message DraftJsRawContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsRawContent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.blocks != null && message.blocks.length)\n            for (var i = 0; i < message.blocks.length; ++i)\n                $root.DraftJsBlock.encode(message.blocks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DraftJsRawContent message, length delimited. Does not implicitly {@link DraftJsRawContent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {IDraftJsRawContent} message DraftJsRawContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DraftJsRawContent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DraftJsRawContent message from the specified reader or buffer.\n     * @function decode\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DraftJsRawContent} DraftJsRawContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsRawContent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DraftJsRawContent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.blocks && message.blocks.length))\n                    message.blocks = [];\n                message.blocks.push($root.DraftJsBlock.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DraftJsRawContent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DraftJsRawContent} DraftJsRawContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DraftJsRawContent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DraftJsRawContent message.\n     * @function verify\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DraftJsRawContent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.blocks != null && message.hasOwnProperty(\"blocks\")) {\n            if (!Array.isArray(message.blocks))\n                return \"blocks: array expected\";\n            for (var i = 0; i < message.blocks.length; ++i) {\n                var error = $root.DraftJsBlock.verify(message.blocks[i]);\n                if (error)\n                    return \"blocks.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a DraftJsRawContent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DraftJsRawContent} DraftJsRawContent\n     */\n    DraftJsRawContent.fromObject = function fromObject(object) {\n        if (object instanceof $root.DraftJsRawContent)\n            return object;\n        var message = new $root.DraftJsRawContent();\n        if (object.blocks) {\n            if (!Array.isArray(object.blocks))\n                throw TypeError(\".DraftJsRawContent.blocks: array expected\");\n            message.blocks = [];\n            for (var i = 0; i < object.blocks.length; ++i) {\n                if (typeof object.blocks[i] !== \"object\")\n                    throw TypeError(\".DraftJsRawContent.blocks: object expected\");\n                message.blocks[i] = $root.DraftJsBlock.fromObject(object.blocks[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DraftJsRawContent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DraftJsRawContent\n     * @static\n     * @param {DraftJsRawContent} message DraftJsRawContent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DraftJsRawContent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.blocks = [];\n        if (message.blocks && message.blocks.length) {\n            object.blocks = [];\n            for (var j = 0; j < message.blocks.length; ++j)\n                object.blocks[j] = $root.DraftJsBlock.toObject(message.blocks[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this DraftJsRawContent to JSON.\n     * @function toJSON\n     * @memberof DraftJsRawContent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DraftJsRawContent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DraftJsRawContent;\n})();\n\n$root.Event = (function() {\n\n    /**\n     * Properties of an Event.\n     * @exports IEvent\n     * @interface IEvent\n     * @property {string|null} [eventId] Event eventId\n     * @property {string|null} [userId] Event userId\n     * @property {Uint8Array|null} [data] Event data\n     * @property {number|null} [createdAt] Event createdAt\n     */\n\n    /**\n     * Constructs a new Event.\n     * @exports Event\n     * @classdesc Represents an Event.\n     * @implements IEvent\n     * @constructor\n     * @param {IEvent=} [properties] Properties to set\n     */\n    function Event(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Event eventId.\n     * @member {string} eventId\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.eventId = \"\";\n\n    /**\n     * Event userId.\n     * @member {string} userId\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.userId = \"\";\n\n    /**\n     * Event data.\n     * @member {Uint8Array} data\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.data = $util.newBuffer([]);\n\n    /**\n     * Event createdAt.\n     * @member {number} createdAt\n     * @memberof Event\n     * @instance\n     */\n    Event.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new Event instance using the specified properties.\n     * @function create\n     * @memberof Event\n     * @static\n     * @param {IEvent=} [properties] Properties to set\n     * @returns {Event} Event instance\n     */\n    Event.create = function create(properties) {\n        return new Event(properties);\n    };\n\n    /**\n     * Encodes the specified Event message. Does not implicitly {@link Event.verify|verify} messages.\n     * @function encode\n     * @memberof Event\n     * @static\n     * @param {IEvent} message Event message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Event.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.eventId != null && Object.hasOwnProperty.call(message, \"eventId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventId);\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Event message, length delimited. Does not implicitly {@link Event.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Event\n     * @static\n     * @param {IEvent} message Event message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Event.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Event message from the specified reader or buffer.\n     * @function decode\n     * @memberof Event\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Event} Event\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Event.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Event();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.eventId = reader.string();\n                break;\n            case 2:\n                message.userId = reader.string();\n                break;\n            case 3:\n                message.data = reader.bytes();\n                break;\n            case 4:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Event message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Event\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Event} Event\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Event.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Event message.\n     * @function verify\n     * @memberof Event\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Event.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.eventId != null && message.hasOwnProperty(\"eventId\"))\n            if (!$util.isString(message.eventId))\n                return \"eventId: string expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                return \"data: buffer expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Event message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Event\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Event} Event\n     */\n    Event.fromObject = function fromObject(object) {\n        if (object instanceof $root.Event)\n            return object;\n        var message = new $root.Event();\n        if (object.eventId != null)\n            message.eventId = String(object.eventId);\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.data != null)\n            if (typeof object.data === \"string\")\n                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n            else if (object.data.length)\n                message.data = object.data;\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Event message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Event\n     * @static\n     * @param {Event} message Event\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Event.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.eventId = \"\";\n            object.userId = \"\";\n            if (options.bytes === String)\n                object.data = \"\";\n            else {\n                object.data = [];\n                if (options.bytes !== Array)\n                    object.data = $util.newBuffer(object.data);\n            }\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.eventId != null && message.hasOwnProperty(\"eventId\"))\n            object.eventId = message.eventId;\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.data != null && message.hasOwnProperty(\"data\"))\n            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this Event to JSON.\n     * @function toJSON\n     * @memberof Event\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Event.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Event;\n})();\n\n$root.CommentReplyEvent = (function() {\n\n    /**\n     * Properties of a CommentReplyEvent.\n     * @exports ICommentReplyEvent\n     * @interface ICommentReplyEvent\n     * @property {string|null} [userId] CommentReplyEvent userId\n     * @property {IComment|null} [comment] CommentReplyEvent comment\n     * @property {number|null} [createdAt] CommentReplyEvent createdAt\n     */\n\n    /**\n     * Constructs a new CommentReplyEvent.\n     * @exports CommentReplyEvent\n     * @classdesc Represents a CommentReplyEvent.\n     * @implements ICommentReplyEvent\n     * @constructor\n     * @param {ICommentReplyEvent=} [properties] Properties to set\n     */\n    function CommentReplyEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentReplyEvent userId.\n     * @member {string} userId\n     * @memberof CommentReplyEvent\n     * @instance\n     */\n    CommentReplyEvent.prototype.userId = \"\";\n\n    /**\n     * CommentReplyEvent comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentReplyEvent\n     * @instance\n     */\n    CommentReplyEvent.prototype.comment = null;\n\n    /**\n     * CommentReplyEvent createdAt.\n     * @member {number} createdAt\n     * @memberof CommentReplyEvent\n     * @instance\n     */\n    CommentReplyEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new CommentReplyEvent instance using the specified properties.\n     * @function create\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {ICommentReplyEvent=} [properties] Properties to set\n     * @returns {CommentReplyEvent} CommentReplyEvent instance\n     */\n    CommentReplyEvent.create = function create(properties) {\n        return new CommentReplyEvent(properties);\n    };\n\n    /**\n     * Encodes the specified CommentReplyEvent message. Does not implicitly {@link CommentReplyEvent.verify|verify} messages.\n     * @function encode\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {ICommentReplyEvent} message CommentReplyEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentReplyEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentReplyEvent message, length delimited. Does not implicitly {@link CommentReplyEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {ICommentReplyEvent} message CommentReplyEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentReplyEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentReplyEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentReplyEvent} CommentReplyEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentReplyEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentReplyEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentReplyEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentReplyEvent} CommentReplyEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentReplyEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentReplyEvent message.\n     * @function verify\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentReplyEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentReplyEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentReplyEvent} CommentReplyEvent\n     */\n    CommentReplyEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentReplyEvent)\n            return object;\n        var message = new $root.CommentReplyEvent();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentReplyEvent.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentReplyEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentReplyEvent\n     * @static\n     * @param {CommentReplyEvent} message CommentReplyEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentReplyEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.comment = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this CommentReplyEvent to JSON.\n     * @function toJSON\n     * @memberof CommentReplyEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentReplyEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentReplyEvent;\n})();\n\n$root.CommentCreateEvent = (function() {\n\n    /**\n     * Properties of a CommentCreateEvent.\n     * @exports ICommentCreateEvent\n     * @interface ICommentCreateEvent\n     * @property {string|null} [threadId] CommentCreateEvent threadId\n     * @property {IComment|null} [comment] CommentCreateEvent comment\n     * @property {number|null} [createdAt] CommentCreateEvent createdAt\n     */\n\n    /**\n     * Constructs a new CommentCreateEvent.\n     * @exports CommentCreateEvent\n     * @classdesc Represents a CommentCreateEvent.\n     * @implements ICommentCreateEvent\n     * @constructor\n     * @param {ICommentCreateEvent=} [properties] Properties to set\n     */\n    function CommentCreateEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommentCreateEvent threadId.\n     * @member {string} threadId\n     * @memberof CommentCreateEvent\n     * @instance\n     */\n    CommentCreateEvent.prototype.threadId = \"\";\n\n    /**\n     * CommentCreateEvent comment.\n     * @member {IComment|null|undefined} comment\n     * @memberof CommentCreateEvent\n     * @instance\n     */\n    CommentCreateEvent.prototype.comment = null;\n\n    /**\n     * CommentCreateEvent createdAt.\n     * @member {number} createdAt\n     * @memberof CommentCreateEvent\n     * @instance\n     */\n    CommentCreateEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Creates a new CommentCreateEvent instance using the specified properties.\n     * @function create\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {ICommentCreateEvent=} [properties] Properties to set\n     * @returns {CommentCreateEvent} CommentCreateEvent instance\n     */\n    CommentCreateEvent.create = function create(properties) {\n        return new CommentCreateEvent(properties);\n    };\n\n    /**\n     * Encodes the specified CommentCreateEvent message. Does not implicitly {@link CommentCreateEvent.verify|verify} messages.\n     * @function encode\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {ICommentCreateEvent} message CommentCreateEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.threadId);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            $root.Comment.encode(message.comment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.createdAt);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CommentCreateEvent message, length delimited. Does not implicitly {@link CommentCreateEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {ICommentCreateEvent} message CommentCreateEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommentCreateEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommentCreateEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CommentCreateEvent} CommentCreateEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommentCreateEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.threadId = reader.string();\n                break;\n            case 2:\n                message.comment = $root.Comment.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.createdAt = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CommentCreateEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CommentCreateEvent} CommentCreateEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommentCreateEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommentCreateEvent message.\n     * @function verify\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommentCreateEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n            var error = $root.Comment.verify(message.comment);\n            if (error)\n                return \"comment.\" + error;\n        }\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CommentCreateEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CommentCreateEvent} CommentCreateEvent\n     */\n    CommentCreateEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.CommentCreateEvent)\n            return object;\n        var message = new $root.CommentCreateEvent();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        if (object.comment != null) {\n            if (typeof object.comment !== \"object\")\n                throw TypeError(\".CommentCreateEvent.comment: object expected\");\n            message.comment = $root.Comment.fromObject(object.comment);\n        }\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CommentCreateEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CommentCreateEvent\n     * @static\n     * @param {CommentCreateEvent} message CommentCreateEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommentCreateEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.threadId = \"\";\n            object.comment = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        }\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = $root.Comment.toObject(message.comment, options);\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        return object;\n    };\n\n    /**\n     * Converts this CommentCreateEvent to JSON.\n     * @function toJSON\n     * @memberof CommentCreateEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommentCreateEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommentCreateEvent;\n})();\n\n$root.UserMentionEvent = (function() {\n\n    /**\n     * Properties of a UserMentionEvent.\n     * @exports IUserMentionEvent\n     * @interface IUserMentionEvent\n     * @property {string|null} [userId] UserMentionEvent userId\n     * @property {string|null} [location] UserMentionEvent location\n     * @property {number|null} [createdAt] UserMentionEvent createdAt\n     * @property {string|null} [board] UserMentionEvent board\n     * @property {string|null} [title] UserMentionEvent title\n     * @property {string|null} [comment] UserMentionEvent comment\n     */\n\n    /**\n     * Constructs a new UserMentionEvent.\n     * @exports UserMentionEvent\n     * @classdesc Represents a UserMentionEvent.\n     * @implements IUserMentionEvent\n     * @constructor\n     * @param {IUserMentionEvent=} [properties] Properties to set\n     */\n    function UserMentionEvent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserMentionEvent userId.\n     * @member {string} userId\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.userId = \"\";\n\n    /**\n     * UserMentionEvent location.\n     * @member {string} location\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.location = \"\";\n\n    /**\n     * UserMentionEvent createdAt.\n     * @member {number} createdAt\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UserMentionEvent board.\n     * @member {string} board\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.board = \"\";\n\n    /**\n     * UserMentionEvent title.\n     * @member {string} title\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.title = \"\";\n\n    /**\n     * UserMentionEvent comment.\n     * @member {string} comment\n     * @memberof UserMentionEvent\n     * @instance\n     */\n    UserMentionEvent.prototype.comment = \"\";\n\n    /**\n     * Creates a new UserMentionEvent instance using the specified properties.\n     * @function create\n     * @memberof UserMentionEvent\n     * @static\n     * @param {IUserMentionEvent=} [properties] Properties to set\n     * @returns {UserMentionEvent} UserMentionEvent instance\n     */\n    UserMentionEvent.create = function create(properties) {\n        return new UserMentionEvent(properties);\n    };\n\n    /**\n     * Encodes the specified UserMentionEvent message. Does not implicitly {@link UserMentionEvent.verify|verify} messages.\n     * @function encode\n     * @memberof UserMentionEvent\n     * @static\n     * @param {IUserMentionEvent} message UserMentionEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMentionEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.location != null && Object.hasOwnProperty.call(message, \"location\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.location);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.createdAt);\n        if (message.board != null && Object.hasOwnProperty.call(message, \"board\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.board);\n        if (message.title != null && Object.hasOwnProperty.call(message, \"title\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.title);\n        if (message.comment != null && Object.hasOwnProperty.call(message, \"comment\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.comment);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserMentionEvent message, length delimited. Does not implicitly {@link UserMentionEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserMentionEvent\n     * @static\n     * @param {IUserMentionEvent} message UserMentionEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserMentionEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserMentionEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserMentionEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserMentionEvent} UserMentionEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMentionEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserMentionEvent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.location = reader.string();\n                break;\n            case 3:\n                message.createdAt = reader.int64();\n                break;\n            case 4:\n                message.board = reader.string();\n                break;\n            case 5:\n                message.title = reader.string();\n                break;\n            case 6:\n                message.comment = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserMentionEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserMentionEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserMentionEvent} UserMentionEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserMentionEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserMentionEvent message.\n     * @function verify\n     * @memberof UserMentionEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserMentionEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            if (!$util.isString(message.location))\n                return \"location: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            if (!$util.isString(message.board))\n                return \"board: string expected\";\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            if (!$util.isString(message.title))\n                return \"title: string expected\";\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            if (!$util.isString(message.comment))\n                return \"comment: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserMentionEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserMentionEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserMentionEvent} UserMentionEvent\n     */\n    UserMentionEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserMentionEvent)\n            return object;\n        var message = new $root.UserMentionEvent();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.location != null)\n            message.location = String(object.location);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.board != null)\n            message.board = String(object.board);\n        if (object.title != null)\n            message.title = String(object.title);\n        if (object.comment != null)\n            message.comment = String(object.comment);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserMentionEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserMentionEvent\n     * @static\n     * @param {UserMentionEvent} message UserMentionEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserMentionEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            object.location = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.board = \"\";\n            object.title = \"\";\n            object.comment = \"\";\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.location != null && message.hasOwnProperty(\"location\"))\n            object.location = message.location;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.board != null && message.hasOwnProperty(\"board\"))\n            object.board = message.board;\n        if (message.title != null && message.hasOwnProperty(\"title\"))\n            object.title = message.title;\n        if (message.comment != null && message.hasOwnProperty(\"comment\"))\n            object.comment = message.comment;\n        return object;\n    };\n\n    /**\n     * Converts this UserMentionEvent to JSON.\n     * @function toJSON\n     * @memberof UserMentionEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserMentionEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserMentionEvent;\n})();\n\n$root.ThreadVoteEvent = (function() {\n\n    /**\n     * Properties of a ThreadVoteEvent.\n     * @exports IThreadVoteEvent\n     * @interface IThreadVoteEvent\n     * @property {string|null} [userId] ThreadVoteEvent userId\n     * @property {number|null} [createdAt] ThreadVoteEvent createdAt\n     * @property {string|null} [threadId] ThreadVoteEvent threadId\n     * @property {number|null} [totalVotes] ThreadVoteEvent totalVotes\n     * @property {Object.<string,number>|null} [votes] ThreadVoteEvent votes\n     */\n\n    /**\n     * Constructs a new ThreadVoteEvent.\n     * @exports ThreadVoteEvent\n     * @classdesc Represents a ThreadVoteEvent.\n     * @implements IThreadVoteEvent\n     * @constructor\n     * @param {IThreadVoteEvent=} [properties] Properties to set\n     */\n    function ThreadVoteEvent(properties) {\n        this.votes = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ThreadVoteEvent userId.\n     * @member {string} userId\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.userId = \"\";\n\n    /**\n     * ThreadVoteEvent createdAt.\n     * @member {number} createdAt\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * ThreadVoteEvent threadId.\n     * @member {string} threadId\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.threadId = \"\";\n\n    /**\n     * ThreadVoteEvent totalVotes.\n     * @member {number} totalVotes\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.totalVotes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * ThreadVoteEvent votes.\n     * @member {Object.<string,number>} votes\n     * @memberof ThreadVoteEvent\n     * @instance\n     */\n    ThreadVoteEvent.prototype.votes = $util.emptyObject;\n\n    /**\n     * Creates a new ThreadVoteEvent instance using the specified properties.\n     * @function create\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {IThreadVoteEvent=} [properties] Properties to set\n     * @returns {ThreadVoteEvent} ThreadVoteEvent instance\n     */\n    ThreadVoteEvent.create = function create(properties) {\n        return new ThreadVoteEvent(properties);\n    };\n\n    /**\n     * Encodes the specified ThreadVoteEvent message. Does not implicitly {@link ThreadVoteEvent.verify|verify} messages.\n     * @function encode\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {IThreadVoteEvent} message ThreadVoteEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadVoteEvent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.createdAt);\n        if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.threadId);\n        if (message.totalVotes != null && Object.hasOwnProperty.call(message, \"totalVotes\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.totalVotes);\n        if (message.votes != null && Object.hasOwnProperty.call(message, \"votes\"))\n            for (var keys = Object.keys(message.votes), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.votes[keys[i]]).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ThreadVoteEvent message, length delimited. Does not implicitly {@link ThreadVoteEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {IThreadVoteEvent} message ThreadVoteEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ThreadVoteEvent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ThreadVoteEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ThreadVoteEvent} ThreadVoteEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadVoteEvent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ThreadVoteEvent(), key, value;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.string();\n                break;\n            case 2:\n                message.createdAt = reader.int64();\n                break;\n            case 3:\n                message.threadId = reader.string();\n                break;\n            case 4:\n                message.totalVotes = reader.int64();\n                break;\n            case 5:\n                if (message.votes === $util.emptyObject)\n                    message.votes = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = 0;\n                while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                    case 1:\n                        key = reader.string();\n                        break;\n                    case 2:\n                        value = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                }\n                message.votes[key] = value;\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ThreadVoteEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ThreadVoteEvent} ThreadVoteEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ThreadVoteEvent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ThreadVoteEvent message.\n     * @function verify\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ThreadVoteEvent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            if (!$util.isString(message.threadId))\n                return \"threadId: string expected\";\n        if (message.totalVotes != null && message.hasOwnProperty(\"totalVotes\"))\n            if (!$util.isInteger(message.totalVotes) && !(message.totalVotes && $util.isInteger(message.totalVotes.low) && $util.isInteger(message.totalVotes.high)))\n                return \"totalVotes: integer|Long expected\";\n        if (message.votes != null && message.hasOwnProperty(\"votes\")) {\n            if (!$util.isObject(message.votes))\n                return \"votes: object expected\";\n            var key = Object.keys(message.votes);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isInteger(message.votes[key[i]]) && !(message.votes[key[i]] && $util.isInteger(message.votes[key[i]].low) && $util.isInteger(message.votes[key[i]].high)))\n                    return \"votes: integer|Long{k:string} expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ThreadVoteEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ThreadVoteEvent} ThreadVoteEvent\n     */\n    ThreadVoteEvent.fromObject = function fromObject(object) {\n        if (object instanceof $root.ThreadVoteEvent)\n            return object;\n        var message = new $root.ThreadVoteEvent();\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.threadId != null)\n            message.threadId = String(object.threadId);\n        if (object.totalVotes != null)\n            if ($util.Long)\n                (message.totalVotes = $util.Long.fromValue(object.totalVotes)).unsigned = false;\n            else if (typeof object.totalVotes === \"string\")\n                message.totalVotes = parseInt(object.totalVotes, 10);\n            else if (typeof object.totalVotes === \"number\")\n                message.totalVotes = object.totalVotes;\n            else if (typeof object.totalVotes === \"object\")\n                message.totalVotes = new $util.LongBits(object.totalVotes.low >>> 0, object.totalVotes.high >>> 0).toNumber();\n        if (object.votes) {\n            if (typeof object.votes !== \"object\")\n                throw TypeError(\".ThreadVoteEvent.votes: object expected\");\n            message.votes = {};\n            for (var keys = Object.keys(object.votes), i = 0; i < keys.length; ++i)\n                if ($util.Long)\n                    (message.votes[keys[i]] = $util.Long.fromValue(object.votes[keys[i]])).unsigned = false;\n                else if (typeof object.votes[keys[i]] === \"string\")\n                    message.votes[keys[i]] = parseInt(object.votes[keys[i]], 10);\n                else if (typeof object.votes[keys[i]] === \"number\")\n                    message.votes[keys[i]] = object.votes[keys[i]];\n                else if (typeof object.votes[keys[i]] === \"object\")\n                    message.votes[keys[i]] = new $util.LongBits(object.votes[keys[i]].low >>> 0, object.votes[keys[i]].high >>> 0).toNumber();\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ThreadVoteEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ThreadVoteEvent\n     * @static\n     * @param {ThreadVoteEvent} message ThreadVoteEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ThreadVoteEvent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.votes = {};\n        if (options.defaults) {\n            object.userId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n            object.threadId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.totalVotes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.totalVotes = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n            object.threadId = message.threadId;\n        if (message.totalVotes != null && message.hasOwnProperty(\"totalVotes\"))\n            if (typeof message.totalVotes === \"number\")\n                object.totalVotes = options.longs === String ? String(message.totalVotes) : message.totalVotes;\n            else\n                object.totalVotes = options.longs === String ? $util.Long.prototype.toString.call(message.totalVotes) : options.longs === Number ? new $util.LongBits(message.totalVotes.low >>> 0, message.totalVotes.high >>> 0).toNumber() : message.totalVotes;\n        var keys2;\n        if (message.votes && (keys2 = Object.keys(message.votes)).length) {\n            object.votes = {};\n            for (var j = 0; j < keys2.length; ++j)\n                if (typeof message.votes[keys2[j]] === \"number\")\n                    object.votes[keys2[j]] = options.longs === String ? String(message.votes[keys2[j]]) : message.votes[keys2[j]];\n                else\n                    object.votes[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.votes[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.votes[keys2[j]].low >>> 0, message.votes[keys2[j]].high >>> 0).toNumber() : message.votes[keys2[j]];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ThreadVoteEvent to JSON.\n     * @function toJSON\n     * @memberof ThreadVoteEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ThreadVoteEvent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ThreadVoteEvent;\n})();\n\n$root.EventContextUpdate = (function() {\n\n    /**\n     * Properties of an EventContextUpdate.\n     * @exports IEventContextUpdate\n     * @interface IEventContextUpdate\n     * @property {number|null} [createdAt] EventContextUpdate createdAt\n     * @property {Array.<string>|null} [threadViewportRange] EventContextUpdate threadViewportRange\n     * @property {Array.<string>|null} [commentViewportRange] EventContextUpdate commentViewportRange\n     */\n\n    /**\n     * Constructs a new EventContextUpdate.\n     * @exports EventContextUpdate\n     * @classdesc Represents an EventContextUpdate.\n     * @implements IEventContextUpdate\n     * @constructor\n     * @param {IEventContextUpdate=} [properties] Properties to set\n     */\n    function EventContextUpdate(properties) {\n        this.threadViewportRange = [];\n        this.commentViewportRange = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EventContextUpdate createdAt.\n     * @member {number} createdAt\n     * @memberof EventContextUpdate\n     * @instance\n     */\n    EventContextUpdate.prototype.createdAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * EventContextUpdate threadViewportRange.\n     * @member {Array.<string>} threadViewportRange\n     * @memberof EventContextUpdate\n     * @instance\n     */\n    EventContextUpdate.prototype.threadViewportRange = $util.emptyArray;\n\n    /**\n     * EventContextUpdate commentViewportRange.\n     * @member {Array.<string>} commentViewportRange\n     * @memberof EventContextUpdate\n     * @instance\n     */\n    EventContextUpdate.prototype.commentViewportRange = $util.emptyArray;\n\n    /**\n     * Creates a new EventContextUpdate instance using the specified properties.\n     * @function create\n     * @memberof EventContextUpdate\n     * @static\n     * @param {IEventContextUpdate=} [properties] Properties to set\n     * @returns {EventContextUpdate} EventContextUpdate instance\n     */\n    EventContextUpdate.create = function create(properties) {\n        return new EventContextUpdate(properties);\n    };\n\n    /**\n     * Encodes the specified EventContextUpdate message. Does not implicitly {@link EventContextUpdate.verify|verify} messages.\n     * @function encode\n     * @memberof EventContextUpdate\n     * @static\n     * @param {IEventContextUpdate} message EventContextUpdate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EventContextUpdate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.createdAt != null && Object.hasOwnProperty.call(message, \"createdAt\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.createdAt);\n        if (message.threadViewportRange != null && message.threadViewportRange.length)\n            for (var i = 0; i < message.threadViewportRange.length; ++i)\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.threadViewportRange[i]);\n        if (message.commentViewportRange != null && message.commentViewportRange.length)\n            for (var i = 0; i < message.commentViewportRange.length; ++i)\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.commentViewportRange[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EventContextUpdate message, length delimited. Does not implicitly {@link EventContextUpdate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EventContextUpdate\n     * @static\n     * @param {IEventContextUpdate} message EventContextUpdate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EventContextUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EventContextUpdate message from the specified reader or buffer.\n     * @function decode\n     * @memberof EventContextUpdate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EventContextUpdate} EventContextUpdate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EventContextUpdate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EventContextUpdate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.createdAt = reader.int64();\n                break;\n            case 2:\n                if (!(message.threadViewportRange && message.threadViewportRange.length))\n                    message.threadViewportRange = [];\n                message.threadViewportRange.push(reader.string());\n                break;\n            case 3:\n                if (!(message.commentViewportRange && message.commentViewportRange.length))\n                    message.commentViewportRange = [];\n                message.commentViewportRange.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EventContextUpdate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EventContextUpdate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EventContextUpdate} EventContextUpdate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EventContextUpdate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EventContextUpdate message.\n     * @function verify\n     * @memberof EventContextUpdate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EventContextUpdate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (!$util.isInteger(message.createdAt) && !(message.createdAt && $util.isInteger(message.createdAt.low) && $util.isInteger(message.createdAt.high)))\n                return \"createdAt: integer|Long expected\";\n        if (message.threadViewportRange != null && message.hasOwnProperty(\"threadViewportRange\")) {\n            if (!Array.isArray(message.threadViewportRange))\n                return \"threadViewportRange: array expected\";\n            for (var i = 0; i < message.threadViewportRange.length; ++i)\n                if (!$util.isString(message.threadViewportRange[i]))\n                    return \"threadViewportRange: string[] expected\";\n        }\n        if (message.commentViewportRange != null && message.hasOwnProperty(\"commentViewportRange\")) {\n            if (!Array.isArray(message.commentViewportRange))\n                return \"commentViewportRange: array expected\";\n            for (var i = 0; i < message.commentViewportRange.length; ++i)\n                if (!$util.isString(message.commentViewportRange[i]))\n                    return \"commentViewportRange: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates an EventContextUpdate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EventContextUpdate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EventContextUpdate} EventContextUpdate\n     */\n    EventContextUpdate.fromObject = function fromObject(object) {\n        if (object instanceof $root.EventContextUpdate)\n            return object;\n        var message = new $root.EventContextUpdate();\n        if (object.createdAt != null)\n            if ($util.Long)\n                (message.createdAt = $util.Long.fromValue(object.createdAt)).unsigned = false;\n            else if (typeof object.createdAt === \"string\")\n                message.createdAt = parseInt(object.createdAt, 10);\n            else if (typeof object.createdAt === \"number\")\n                message.createdAt = object.createdAt;\n            else if (typeof object.createdAt === \"object\")\n                message.createdAt = new $util.LongBits(object.createdAt.low >>> 0, object.createdAt.high >>> 0).toNumber();\n        if (object.threadViewportRange) {\n            if (!Array.isArray(object.threadViewportRange))\n                throw TypeError(\".EventContextUpdate.threadViewportRange: array expected\");\n            message.threadViewportRange = [];\n            for (var i = 0; i < object.threadViewportRange.length; ++i)\n                message.threadViewportRange[i] = String(object.threadViewportRange[i]);\n        }\n        if (object.commentViewportRange) {\n            if (!Array.isArray(object.commentViewportRange))\n                throw TypeError(\".EventContextUpdate.commentViewportRange: array expected\");\n            message.commentViewportRange = [];\n            for (var i = 0; i < object.commentViewportRange.length; ++i)\n                message.commentViewportRange[i] = String(object.commentViewportRange[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an EventContextUpdate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EventContextUpdate\n     * @static\n     * @param {EventContextUpdate} message EventContextUpdate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EventContextUpdate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.threadViewportRange = [];\n            object.commentViewportRange = [];\n        }\n        if (options.defaults)\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.createdAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.createdAt = options.longs === String ? \"0\" : 0;\n        if (message.createdAt != null && message.hasOwnProperty(\"createdAt\"))\n            if (typeof message.createdAt === \"number\")\n                object.createdAt = options.longs === String ? String(message.createdAt) : message.createdAt;\n            else\n                object.createdAt = options.longs === String ? $util.Long.prototype.toString.call(message.createdAt) : options.longs === Number ? new $util.LongBits(message.createdAt.low >>> 0, message.createdAt.high >>> 0).toNumber() : message.createdAt;\n        if (message.threadViewportRange && message.threadViewportRange.length) {\n            object.threadViewportRange = [];\n            for (var j = 0; j < message.threadViewportRange.length; ++j)\n                object.threadViewportRange[j] = message.threadViewportRange[j];\n        }\n        if (message.commentViewportRange && message.commentViewportRange.length) {\n            object.commentViewportRange = [];\n            for (var j = 0; j < message.commentViewportRange.length; ++j)\n                object.commentViewportRange[j] = message.commentViewportRange[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this EventContextUpdate to JSON.\n     * @function toJSON\n     * @memberof EventContextUpdate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EventContextUpdate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EventContextUpdate;\n})();\n\n$root.Error = (function() {\n\n    /**\n     * Properties of an Error.\n     * @exports IError\n     * @interface IError\n     * @property {string|null} [message] Error message\n     * @property {number|null} [code] Error code\n     */\n\n    /**\n     * Constructs a new Error.\n     * @exports Error\n     * @classdesc Represents an Error.\n     * @implements IError\n     * @constructor\n     * @param {IError=} [properties] Properties to set\n     */\n    function Error(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Error message.\n     * @member {string} message\n     * @memberof Error\n     * @instance\n     */\n    Error.prototype.message = \"\";\n\n    /**\n     * Error code.\n     * @member {number} code\n     * @memberof Error\n     * @instance\n     */\n    Error.prototype.code = 0;\n\n    /**\n     * Creates a new Error instance using the specified properties.\n     * @function create\n     * @memberof Error\n     * @static\n     * @param {IError=} [properties] Properties to set\n     * @returns {Error} Error instance\n     */\n    Error.create = function create(properties) {\n        return new Error(properties);\n    };\n\n    /**\n     * Encodes the specified Error message. Does not implicitly {@link Error.verify|verify} messages.\n     * @function encode\n     * @memberof Error\n     * @static\n     * @param {IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Error message, length delimited. Does not implicitly {@link Error.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Error\n     * @static\n     * @param {IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer.\n     * @function decode\n     * @memberof Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Error();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.message = reader.string();\n                break;\n            case 2:\n                message.code = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Error message.\n     * @function verify\n     * @memberof Error\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Error.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            if (!$util.isString(message.message))\n                return \"message: string expected\";\n        if (message.code != null && message.hasOwnProperty(\"code\"))\n            if (!$util.isInteger(message.code))\n                return \"code: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Error message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Error\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Error} Error\n     */\n    Error.fromObject = function fromObject(object) {\n        if (object instanceof $root.Error)\n            return object;\n        var message = new $root.Error();\n        if (object.message != null)\n            message.message = String(object.message);\n        if (object.code != null)\n            message.code = object.code | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Error message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Error\n     * @static\n     * @param {Error} message Error\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Error.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.message = \"\";\n            object.code = 0;\n        }\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = message.message;\n        if (message.code != null && message.hasOwnProperty(\"code\"))\n            object.code = message.code;\n        return object;\n    };\n\n    /**\n     * Converts this Error to JSON.\n     * @function toJSON\n     * @memberof Error\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Error.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Error;\n})();\n\nmodule.exports = $root;\n","String.prototype.trimMax = function (max) {\r\n    var s = this;\r\n    if (s.length > max) {\r\n        return s.substr(0, max) + \"...\"\r\n    }\r\n    return s;\r\n}\r\n"],"sourceRoot":""}